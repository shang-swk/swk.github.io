<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>雅思词汇 10</title>
    <link href="/2023/03/27/%E9%9B%85%E6%80%9D%E8%AF%8D%E6%B1%87-10/"/>
    <url>/2023/03/27/%E9%9B%85%E6%80%9D%E8%AF%8D%E6%B1%87-10/</url>
    
    <content type="html"><![CDATA[<p>unit18 词数：70</p><table><thead><tr><th>单词</th><th>🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶</th><th>释义</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;raid&#x3D;&#x3D;</td><td></td><td>n&#x2F;v 突袭；突然搜查</td></tr><tr><td>blast</td><td></td><td>n 爆炸 v 爆炸，炸毁</td></tr><tr><td>cannon</td><td></td><td>n 大炮</td></tr><tr><td>rifle</td><td></td><td>n 步枪</td></tr><tr><td>glow</td><td></td><td>v 发出微弱稳定的光 n 微弱稳定的光</td></tr><tr><td>&#x3D;&#x3D;blade&#x3D;&#x3D;</td><td></td><td>n 刃；螺旋桨的叶片</td></tr><tr><td>spear</td><td></td><td>n 矛；标枪 v 用尖物刺穿</td></tr><tr><td>punch</td><td></td><td>n 打孔机 v 给……打孔；拳打</td></tr><tr><td>chop</td><td></td><td>v 切碎（食物）；劈（木头）</td></tr><tr><td>stab</td><td></td><td>v&#x2F;n（用刀等）刺，戳</td></tr><tr><td>plight</td><td></td><td>n 困境；誓约</td></tr><tr><td>pitfall</td><td></td><td>n 陷阱；危险，困难</td></tr><tr><td>conspiracy</td><td></td><td>n 阴谋，密谋</td></tr><tr><td>&#x3D;&#x3D;destitute&#x3D;&#x3D;</td><td></td><td>adj 赤贫的；缺乏的</td></tr><tr><td>trespass</td><td></td><td>v 非法侵入 n 罪过；非法入侵</td></tr><tr><td>&#x3D;&#x3D;intrude&#x3D;&#x3D;</td><td></td><td>v 闯入；侵扰</td></tr><tr><td>siege</td><td></td><td>n 包围，围攻</td></tr><tr><td>halt</td><td></td><td>v （使）停止 n 停止</td></tr><tr><td>oppress</td><td></td><td>v 压迫；使压抑</td></tr><tr><td>&#x3D;&#x3D;revolt&#x3D;&#x3D;</td><td></td><td>n&#x2F;v 叛乱；反抗</td></tr><tr><td>treason</td><td></td><td>n 叛国罪</td></tr><tr><td>patriot</td><td></td><td>n 爱国者</td></tr><tr><td>&#x3D;&#x3D;reproach&#x3D;&#x3D;</td><td></td><td>n&#x2F;v 责备</td></tr><tr><td>terrific</td><td></td><td>adj 极好的；很大的</td></tr><tr><td>dread</td><td></td><td>v 极为害怕  n 恐惧</td></tr><tr><td>&#x3D;&#x3D;turmoil&#x3D;&#x3D;</td><td></td><td>n 混乱</td></tr><tr><td>scenario</td><td></td><td>n 可能发生的情况</td></tr><tr><td>contest</td><td></td><td>v 争取赢得；争辩 n 竞争；比赛</td></tr><tr><td>contend</td><td></td><td>v 竞争；争辩</td></tr><tr><td>tactic</td><td></td><td>n 策略，战术</td></tr><tr><td>&#x3D;&#x3D;refute&#x3D;&#x3D;</td><td></td><td>v 反驳；否认</td></tr><tr><td>mitigate</td><td></td><td>v 减轻，缓和</td></tr><tr><td>&#x3D;&#x3D;savage&#x3D;&#x3D;</td><td></td><td>adj 野蛮的 v 凶狠的攻击 n 野蛮人</td></tr><tr><td>tomb</td><td></td><td>n 坟墓</td></tr><tr><td>hell</td><td></td><td>n 地狱</td></tr><tr><td>naval</td><td></td><td>adj 海军的</td></tr><tr><td>fleet</td><td></td><td>n 舰队；机群</td></tr><tr><td>devastate</td><td></td><td>v 毁坏</td></tr><tr><td>peril</td><td></td><td>n 重大危险；险情</td></tr><tr><td>forgo</td><td></td><td>v 放弃</td></tr><tr><td>tablet</td><td></td><td>n 碑 ；药片</td></tr><tr><td>&#x3D;&#x3D;patrol&#x3D;&#x3D;</td><td></td><td>n&#x2F;v 巡逻</td></tr><tr><td>&#x3D;&#x3D;camouflage&#x3D;&#x3D;</td><td></td><td>v&#x2F;n 伪装</td></tr><tr><td>burrow</td><td></td><td>n 地洞 v 掘地洞</td></tr><tr><td>veteran</td><td></td><td>n 老兵；老手</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>雅思词汇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IELTS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>雅思词汇 9</title>
    <link href="/2023/03/27/%E9%9B%85%E6%80%9D%E8%AF%8D%E6%B1%87-9/"/>
    <url>/2023/03/27/%E9%9B%85%E6%80%9D%E8%AF%8D%E6%B1%87-9/</url>
    
    <content type="html"><![CDATA[<p>unit16+17  词数：48</p><table><thead><tr><th>单词</th><th>🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶</th><th>释义</th></tr></thead><tbody><tr><td>lease</td><td></td><td>n 租约 v 出租；租用</td></tr><tr><td>&#x3D;&#x3D;voucher&#x3D;&#x3D;</td><td></td><td>n 代金券</td></tr><tr><td>&#x3D;&#x3D;coupon&#x3D;&#x3D;</td><td></td><td>n 优惠券</td></tr><tr><td>&#x3D;&#x3D;invoice&#x3D;&#x3D;</td><td></td><td>n 发票 v 开发票给</td></tr><tr><td>levy</td><td></td><td>n 税款</td></tr><tr><td>tariff</td><td></td><td>n 关税；（公共服务的）收费</td></tr><tr><td>impose</td><td></td><td>v 强加；征收（税款）</td></tr><tr><td>&#x3D;&#x3D;gross&#x3D;&#x3D;</td><td></td><td>adj 总的</td></tr><tr><td>bond</td><td></td><td>n 债券</td></tr><tr><td>deflation</td><td></td><td>n 通货紧缩</td></tr><tr><td>increment</td><td></td><td>n 增加量；定期的加薪</td></tr><tr><td>&#x3D;&#x3D;escalate&#x3D;&#x3D;</td><td></td><td>v （使）逐步升级，（使）不断恶化</td></tr><tr><td>influx</td><td></td><td>n 流入，涌进</td></tr><tr><td>cargo</td><td></td><td>n 货物</td></tr><tr><td>&#x3D;&#x3D;auction&#x3D;&#x3D;</td><td></td><td>v&#x2F;n 拍卖</td></tr><tr><td>turnover</td><td></td><td>n 流动率；营业额</td></tr><tr><td>quote</td><td></td><td>n 限额；定额</td></tr><tr><td>&#x3D;&#x3D;dividend&#x3D;&#x3D;</td><td></td><td>n 股息，红利</td></tr><tr><td>instalment</td><td></td><td>n （分期付款对的）一期付款</td></tr><tr><td>shilling</td><td></td><td>n 先令</td></tr><tr><td>copper</td><td></td><td>&#x3D;&#x3D;n 铜；警察&#x3D;&#x3D;</td></tr><tr><td>incentive</td><td></td><td>n 刺激，激励</td></tr><tr><td>&#x3D;&#x3D;reimburse&#x3D;&#x3D;</td><td></td><td>v 赔偿，补偿</td></tr><tr><td>payroll</td><td></td><td>&#x3D;&#x3D;n 工资名单&#x3D;&#x3D;</td></tr><tr><td>&#x3D;&#x3D;subsidy&#x3D;&#x3D;</td><td></td><td>n 津贴，补贴</td></tr><tr><td>vocation</td><td></td><td>n （认为非常适合自己的）职业；使命感</td></tr><tr><td>&#x3D;&#x3D;workaholic&#x3D;&#x3D;</td><td></td><td>n 工作狂</td></tr><tr><td>&#x3D;&#x3D;resume&#x3D;&#x3D;</td><td></td><td>n 履历；简历</td></tr><tr><td>sack</td><td></td><td>n 大口袋 v 开除</td></tr><tr><td>&#x3D;&#x3D;sanction&#x3D;&#x3D;</td><td></td><td>n 批准；制裁 v 批准；对……实施制裁</td></tr><tr><td>charter</td><td></td><td>n 宪章 v 租，包（船、车、飞机等）</td></tr><tr><td>&#x3D;&#x3D;protocol&#x3D;&#x3D;</td><td></td><td>n 协定书；礼仪</td></tr><tr><td>benchmark</td><td></td><td>n 基准</td></tr><tr><td>&#x3D;&#x3D;default&#x3D;&#x3D;</td><td></td><td>v 不支付，不履行 n 违约；默认值</td></tr><tr><td>enact</td><td></td><td>v 通过（法律）；表演</td></tr><tr><td>&#x3D;&#x3D;prosecute&#x3D;&#x3D;</td><td></td><td>v 检举，起诉</td></tr><tr><td>&#x3D;&#x3D;plea&#x3D;&#x3D;</td><td></td><td>n 借口；请求</td></tr><tr><td>confine</td><td></td><td>&#x3D;&#x3D;n 【-s】边界，范围 v 限制；监禁&#x3D;&#x3D;</td></tr><tr><td>deceive</td><td></td><td>v 欺骗；蒙蔽 deceit n 欺骗</td></tr><tr><td>fraud</td><td></td><td>n 骗子；赝品</td></tr><tr><td>stigma</td><td></td><td>n 耻辱</td></tr><tr><td>&#x3D;&#x3D;confess&#x3D;&#x3D;</td><td></td><td>v 供认；忏悔</td></tr><tr><td>succumb</td><td></td><td>v 屈服</td></tr><tr><td>penalty</td><td></td><td>n 惩罚</td></tr><tr><td>mortgage</td><td></td><td>v &#x3D;&#x3D;抵押（房屋、土地）借款&#x3D;&#x3D; n 房屋抵押贷款</td></tr><tr><td>anonymous</td><td></td><td>adj 匿名的</td></tr><tr><td>&#x3D;&#x3D;petition&#x3D;&#x3D;</td><td></td><td>v 请求 n 请愿书；上诉</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>雅思词汇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IELTS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>雅思词汇 8</title>
    <link href="/2023/03/23/%E9%9B%85%E6%80%9D%E8%AF%8D%E6%B1%87-8/"/>
    <url>/2023/03/23/%E9%9B%85%E6%80%9D%E8%AF%8D%E6%B1%87-8/</url>
    
    <content type="html"><![CDATA[<p>unit13+14  词数：71</p><table><thead><tr><th>单词</th><th>🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶</th><th>释义</th></tr></thead><tbody><tr><td>safari</td><td></td><td>n 东非观兽旅行</td></tr><tr><td>pyramid</td><td></td><td>n 金字塔</td></tr><tr><td>jet</td><td></td><td>n 喷气式飞机；喷射口</td></tr><tr><td>&#x3D;&#x3D;rack&#x3D;&#x3D;</td><td></td><td>n 搁物架，挂物架</td></tr><tr><td>freight</td><td></td><td>n 货运；货物 v 运送（货物）</td></tr><tr><td>itinerary</td><td></td><td>n 行程，路线</td></tr><tr><td>&#x3D;&#x3D;curb&#x3D;&#x3D;</td><td></td><td>n 路缘，起控制作用的事物</td></tr><tr><td>auto</td><td></td><td>n 汽车</td></tr><tr><td>tram</td><td></td><td>n 有轨电车</td></tr><tr><td>van</td><td></td><td>n 厢式货车；客货车</td></tr><tr><td>wagon</td><td></td><td>n 四轮运货马车</td></tr><tr><td>carriage</td><td></td><td>n 四轮马车</td></tr><tr><td>&#x3D;&#x3D;cart&#x3D;&#x3D;</td><td></td><td>n 购物车，超市手推车</td></tr><tr><td>pedicab</td><td></td><td>n 人力三轮车</td></tr><tr><td>garage</td><td></td><td>n 汽车维修厂；车库</td></tr><tr><td>brake</td><td></td><td>n 车闸；刹车 v 刹车</td></tr><tr><td>tyre</td><td></td><td>n 轮胎</td></tr><tr><td>honk</td><td></td><td>n 汽车喇叭声 v 按汽车喇叭</td></tr><tr><td>&#x3D;&#x3D;steward&#x3D;&#x3D;</td><td></td><td>n 男乘务员；管家</td></tr><tr><td>carrier</td><td></td><td>n &#x3D;&#x3D;航空母舰&#x3D;&#x3D;；运输工具</td></tr><tr><td>steamer</td><td></td><td>n 汽船，轮船</td></tr><tr><td>liner</td><td></td><td>n 邮轮，客轮</td></tr><tr><td>raft</td><td></td><td>n 木筏，木排</td></tr><tr><td>canoe</td><td></td><td>n 独木舟</td></tr><tr><td>deck</td><td></td><td>n &#x3D;&#x3D;甲板&#x3D;&#x3D; v 装饰</td></tr><tr><td>turbine</td><td></td><td>n 涡轮机</td></tr><tr><td>propeller</td><td></td><td>n 螺旋桨，推进器</td></tr><tr><td>&#x3D;&#x3D;stern&#x3D;&#x3D;</td><td></td><td>n 船尾</td></tr><tr><td>canal</td><td></td><td>n 运河</td></tr><tr><td>&#x3D;&#x3D;ditch&#x3D;&#x3D;</td><td></td><td>n 沟，渠 v &#x3D;&#x3D;抛弃&#x3D;&#x3D;</td></tr><tr><td>locomotive</td><td></td><td>n 火车头，机车</td></tr><tr><td>rail</td><td></td><td>n 栏杆；铁路路轨</td></tr><tr><td>&#x3D;&#x3D;lull&#x3D;&#x3D;</td><td></td><td>n 暂停 v 使昏昏欲睡</td></tr><tr><td>postage</td><td></td><td>n 邮资</td></tr><tr><td>parcel</td><td></td><td>v 打包，包 n （土地的）一块</td></tr><tr><td>velocity</td><td></td><td>n 速度</td></tr><tr><td>Marxism</td><td></td><td>n 马克思主义</td></tr><tr><td>regime</td><td></td><td>n 统治制度，政权，政体</td></tr><tr><td>&#x3D;&#x3D;hierarchy&#x3D;&#x3D;</td><td></td><td>n 等级制度；统治集团</td></tr><tr><td>municipal</td><td></td><td>adj 市政的，地方政府的</td></tr><tr><td>&#x3D;&#x3D;arena&#x3D;&#x3D;</td><td></td><td>n 竞技场；舞台</td></tr><tr><td>secretary</td><td></td><td>n 秘书；大臣</td></tr><tr><td>&#x3D;&#x3D;parliament&#x3D;&#x3D;</td><td></td><td>n 议会，国会</td></tr><tr><td>Senate</td><td></td><td>n 大学理事会</td></tr><tr><td>&#x3D;&#x3D;delegation&#x3D;&#x3D;</td><td></td><td>n 代表团；委派</td></tr><tr><td>behalf</td><td></td><td>n 代表某人</td></tr><tr><td>statesman</td><td></td><td>n 政治家</td></tr><tr><td>bureau</td><td></td><td>n 局，处，科；办事处</td></tr><tr><td>&#x3D;&#x3D;harness&#x3D;&#x3D;</td><td></td><td>v 控制，利用</td></tr><tr><td>&#x3D;&#x3D;consortium&#x3D;&#x3D;</td><td></td><td>n 财团</td></tr><tr><td>puppet</td><td></td><td>n 玩偶；傀儡</td></tr><tr><td>throne</td><td></td><td>n 王位</td></tr><tr><td>crown</td><td></td><td>n 王冠 v 为……加冕</td></tr><tr><td>wreath</td><td></td><td>n 花环；花圈</td></tr><tr><td>colony</td><td></td><td>n 殖民地</td></tr><tr><td>liberty</td><td></td><td>n 自由</td></tr><tr><td>clan</td><td></td><td>n 宗族；帮派</td></tr><tr><td>ethic</td><td></td><td>adj 民族的</td></tr><tr><td>&#x3D;&#x3D;franchise&#x3D;&#x3D;</td><td></td><td>v 出售……对的特许经营权 n 特许权</td></tr><tr><td>entitle</td><td></td><td>v 给……权利；给……题名</td></tr><tr><td>respondent</td><td></td><td>n 调查对象（名义测试）</td></tr><tr><td>poll</td><td></td><td>n 民意调查；选举投票；投票数</td></tr><tr><td>&#x3D;&#x3D;nominate&#x3D;&#x3D;</td><td></td><td>v 提名；任命</td></tr><tr><td>succession</td><td></td><td>n 连续；继承权，继位</td></tr><tr><td>steady</td><td></td><td>adj 不摇晃的；稳定的</td></tr><tr><td>ethic</td><td></td><td>n 行为准则；【-s】道德规范</td></tr><tr><td>proclaim</td><td></td><td>v 声明；清楚地表明</td></tr><tr><td>Arabian</td><td></td><td>adj 阿拉伯的</td></tr><tr><td>Portuguese</td><td></td><td>adj 葡萄牙的 n 葡萄牙语；葡萄牙人</td></tr><tr><td>Swiss</td><td></td><td>adj 瑞士的 n 瑞士的</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>雅思词汇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IELTS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>雅思词汇 7</title>
    <link href="/2023/03/22/%E9%9B%85%E6%80%9D%E8%AF%8D%E6%B1%87-7/"/>
    <url>/2023/03/22/%E9%9B%85%E6%80%9D%E8%AF%8D%E6%B1%87-7/</url>
    
    <content type="html"><![CDATA[<p>unit 12-13 饮食+建筑场所</p><p>75词</p><table><thead><tr><th>单词</th><th>🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶</th><th>释义</th></tr></thead><tbody><tr><td>supper</td><td></td><td>n 晚餐</td></tr><tr><td>banquet</td><td></td><td>n 宴会</td></tr><tr><td>refreshment</td><td></td><td>n 点心</td></tr><tr><td>gourmet</td><td></td><td>n 美食家</td></tr><tr><td>&#x3D;&#x3D;cutlery&#x3D;&#x3D;</td><td></td><td>n 餐具；刀具</td></tr><tr><td>ceramic</td><td></td><td>adj 陶瓷的 n 陶瓷制品</td></tr><tr><td>porcelain</td><td></td><td>n 瓷器；瓷</td></tr><tr><td>saucer</td><td></td><td>n 茶托</td></tr><tr><td>furnace</td><td></td><td>n 熔炉</td></tr><tr><td>liquor</td><td></td><td>n 烈性酒</td></tr><tr><td>tobacco</td><td></td><td>n 烟草</td></tr><tr><td>turnip</td><td></td><td>n 芜菁</td></tr><tr><td>hull</td><td></td><td>n 果实外壳；船体 v剥去果实的外壳</td></tr><tr><td>berry</td><td></td><td>n 浆果</td></tr><tr><td>papaya</td><td></td><td>n 番木瓜</td></tr><tr><td>plum</td><td></td><td>n 李子</td></tr><tr><td>kiwi</td><td></td><td>n 猕猴桃</td></tr><tr><td>flour</td><td></td><td>n 面粉</td></tr><tr><td>rod</td><td></td><td>n 杆</td></tr><tr><td>dairy</td><td></td><td>n 乳制品 adj 乳制的</td></tr><tr><td>pasta</td><td></td><td>n 意大利面食</td></tr><tr><td>vanilla</td><td></td><td>n 香草 adj 香草味的</td></tr><tr><td>mustard</td><td></td><td>n 芥末；芥菜</td></tr><tr><td>wasabi</td><td></td><td>n 山葵</td></tr><tr><td>ginger</td><td></td><td>n 姜</td></tr><tr><td>scallion</td><td></td><td>n 大葱</td></tr><tr><td>vinegar</td><td></td><td>n 醋</td></tr><tr><td>&#x3D;&#x3D;bitter&#x3D;&#x3D;</td><td></td><td>adj 苦的；痛苦的</td></tr><tr><td>sauce</td><td></td><td>n 酱汁</td></tr><tr><td>ketchup</td><td></td><td>n 番茄酱</td></tr><tr><td>erection</td><td></td><td>n 建筑，建造</td></tr><tr><td>venue</td><td></td><td>n 发生地点</td></tr><tr><td>reside</td><td></td><td>v 居住</td></tr><tr><td>Skyscraper</td><td></td><td>n 摩天大楼</td></tr><tr><td>Villa</td><td></td><td>n 乡间别墅</td></tr><tr><td>mansion</td><td></td><td>n 宅第</td></tr><tr><td>lodge</td><td></td><td>v 租住 n 小屋；度假村</td></tr><tr><td>&#x3D;&#x3D;cellar&#x3D;&#x3D;</td><td></td><td>n 地窖</td></tr><tr><td>shed</td><td></td><td>n 棚 v 流，洒；摆脱</td></tr><tr><td>cottage</td><td></td><td>n 村舍</td></tr><tr><td>cradle</td><td></td><td>n 摇篮，发源地</td></tr><tr><td>porch</td><td></td><td>n 门廊</td></tr><tr><td>corridor</td><td></td><td>n 走廊，通道</td></tr><tr><td>escalator</td><td></td><td>n 自动扶梯</td></tr><tr><td>handrail</td><td></td><td>n 扶手</td></tr><tr><td>pillar</td><td></td><td>n 柱子；栋梁</td></tr><tr><td>beam</td><td></td><td>n （能量,例子）束</td></tr><tr><td>vault</td><td></td><td>n 拱顶；保险库</td></tr><tr><td>arch</td><td></td><td>n 拱门 v 使弯成弓形</td></tr><tr><td>eaves</td><td></td><td>n 屋檐</td></tr><tr><td>chimney</td><td></td><td>n 烟囱</td></tr><tr><td>parlour</td><td></td><td>n 客厅</td></tr><tr><td>radiator</td><td></td><td>n 暖气设备</td></tr><tr><td>cabinet</td><td></td><td>n 储藏柜</td></tr><tr><td>terrace</td><td></td><td>n 大阳台</td></tr><tr><td>lavatory</td><td></td><td>n 厕所，洗手间</td></tr><tr><td>basin</td><td></td><td>n 盆，盆地</td></tr><tr><td>booth</td><td></td><td>n 售货摊；电话亭</td></tr><tr><td>&#x3D;&#x3D;peripheral&#x3D;&#x3D;</td><td></td><td>adj 外围的 n 外围设备</td></tr><tr><td>spacious</td><td></td><td>adj 宽敞的</td></tr><tr><td>plaza</td><td></td><td>n 广场</td></tr><tr><td>&#x3D;&#x3D;mason&#x3D;&#x3D;</td><td></td><td>n 石匠</td></tr><tr><td>lever</td><td></td><td>n 杠杆</td></tr><tr><td>pole</td><td></td><td>n 杆</td></tr><tr><td>&#x3D;&#x3D;apparatus&#x3D;&#x3D;</td><td></td><td>n 器械，装置</td></tr><tr><td>crane</td><td></td><td>n 起重机，鹤</td></tr><tr><td>malfunction</td><td></td><td>v 发生故障</td></tr><tr><td>mend</td><td></td><td>v 维修；使康复</td></tr><tr><td>trim</td><td></td><td>v 修剪；装饰 adj 整齐的，整洁的</td></tr><tr><td>weld</td><td></td><td>v 焊接；使紧密相连</td></tr><tr><td>saw</td><td></td><td>n 锯子</td></tr><tr><td>screw</td><td></td><td>n 螺丝钉；螺旋桨</td></tr><tr><td>viaduct</td><td></td><td>n 高架桥</td></tr><tr><td>exterior</td><td></td><td>n 外部，外观 adj 外部的</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>雅思词汇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IELTS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>雅思词汇 6</title>
    <link href="/2023/03/22/%E9%9B%85%E6%80%9D%E8%AF%8D%E6%B1%87-6/"/>
    <url>/2023/03/22/%E9%9B%85%E6%80%9D%E8%AF%8D%E6%B1%87-6/</url>
    
    <content type="html"><![CDATA[<p>unit 10-11 材料和时尚潮流</p><p>50词</p><table><thead><tr><th>单词</th><th>🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶</th><th>释义</th></tr></thead><tbody><tr><td>merchandise</td><td></td><td>n 商品</td></tr><tr><td>outfit</td><td></td><td>n 全套服装 v 装备</td></tr><tr><td>kit</td><td></td><td>n 成套工具</td></tr><tr><td>utensil</td><td></td><td>n （家庭）用具，器皿</td></tr><tr><td>litter</td><td></td><td>n 垃圾</td></tr><tr><td>lotion</td><td></td><td>n 润肤乳</td></tr><tr><td>shampoo</td><td></td><td>v 用洗发剂洗 n 洗发剂</td></tr><tr><td>tub</td><td></td><td>n 桶，盆</td></tr><tr><td>plug</td><td></td><td>n 塞子，插头 v 把……塞住</td></tr><tr><td>mattress</td><td></td><td>n 床垫</td></tr><tr><td>rug</td><td></td><td>n 小毯子</td></tr><tr><td>mat</td><td></td><td>n 地垫</td></tr><tr><td>cushion</td><td></td><td>n 软垫</td></tr><tr><td>blanket</td><td></td><td>n 毛毯；毯子</td></tr><tr><td>quilt</td><td></td><td>n 被子</td></tr><tr><td>sheet</td><td></td><td>n 床单；被单</td></tr><tr><td>sponge</td><td></td><td>n 海绵</td></tr><tr><td>towel</td><td></td><td>n 毛巾</td></tr><tr><td>razor</td><td></td><td>n 剃刀 v 剃</td></tr><tr><td>&#x3D;&#x3D;fuse&#x3D;&#x3D;</td><td></td><td>n 保险丝；导火线 v 使融化；使融合</td></tr><tr><td>cord</td><td></td><td>n 细绳，粗线</td></tr><tr><td>strand</td><td></td><td>n 缕，股；滨，岸</td></tr><tr><td>wax</td><td></td><td>n 腊；蜂蜡</td></tr><tr><td>portfolio</td><td></td><td>n 文件及，公文包</td></tr><tr><td>paperback</td><td></td><td>n 平装书</td></tr><tr><td>pamphlet</td><td></td><td>n 小册子</td></tr><tr><td>scissors</td><td></td><td>n 剪刀，剪子</td></tr><tr><td>shear</td><td></td><td>n 【-s】修篱笆的大剪刀 v 剪</td></tr><tr><td>bolt</td><td></td><td>n 螺栓；插销 v 闩上门窗</td></tr><tr><td>knob</td><td></td><td>n 球形把手；旋钮</td></tr><tr><td>pane</td><td></td><td>n （一块）窗玻璃</td></tr><tr><td>opacity</td><td></td><td>n 不透明性</td></tr><tr><td>barrel</td><td></td><td>n 桶</td></tr><tr><td>shelf</td><td></td><td>n 架子，隔板</td></tr><tr><td>ladder</td><td></td><td>n 梯子；阶梯</td></tr><tr><td>&#x3D;&#x3D;stool&#x3D;&#x3D;</td><td></td><td>n 凳子</td></tr><tr><td>dredge</td><td></td><td>n 挖泥船 v 挖掘；撒（糖、面粉等）</td></tr><tr><td>&#x3D;&#x3D;mill&#x3D;&#x3D;</td><td></td><td>n 磨粉机 v 碾碎；无目的的转</td></tr><tr><td>alloy</td><td></td><td>n 合金</td></tr><tr><td>lead</td><td></td><td>n 铅</td></tr><tr><td>pitch</td><td></td><td>n 沥青</td></tr><tr><td>lime</td><td></td><td>n 石灰</td></tr><tr><td>plaster</td><td></td><td>n 灰泥；熟石膏</td></tr><tr><td>knit</td><td></td><td>v 编织，针织</td></tr><tr><td>linen</td><td></td><td>n 亚麻布</td></tr><tr><td>lumber</td><td></td><td>n 木材，木料</td></tr><tr><td>pit</td><td></td><td>n 深坑；煤坑；潜在危险</td></tr><tr><td>&#x3D;&#x3D;lubricate&#x3D;&#x3D;</td><td></td><td>v 润滑</td></tr><tr><td>counterfeit</td><td></td><td>adj 假冒的 v 伪造</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>雅思词汇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IELTS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>雅思词汇 5</title>
    <link href="/2023/03/22/%E9%9B%85%E6%80%9D%E8%AF%8D%E6%B1%87-5/"/>
    <url>/2023/03/22/%E9%9B%85%E6%80%9D%E8%AF%8D%E6%B1%87-5/</url>
    
    <content type="html"><![CDATA[<p>unit 8+9 语言和娱乐运动</p><p>52词</p><table><thead><tr><th>单词</th><th></th><th>释义</th></tr></thead><tbody><tr><td>pictograph</td><td></td><td>n 象形文字</td></tr><tr><td>semantic</td><td></td><td>adj 语义的</td></tr><tr><td>syntax</td><td></td><td>n 句法</td></tr><tr><td>phonetics</td><td></td><td>n 语音学</td></tr><tr><td>intonation</td><td></td><td>n 语调</td></tr><tr><td>utterance</td><td></td><td>n 说话；话语</td></tr><tr><td>syllable</td><td></td><td>n 音节</td></tr><tr><td>phoneme</td><td></td><td>n 音位</td></tr><tr><td>consonant</td><td></td><td>n 辅音</td></tr><tr><td>logogram</td><td></td><td>n 缩记符</td></tr><tr><td>clause</td><td></td><td>n 分句；条款</td></tr><tr><td>prefix</td><td></td><td>n 前缀；前置代号</td></tr><tr><td>suffix</td><td></td><td>n 后缀</td></tr><tr><td>synonym</td><td></td><td>n 同义词</td></tr><tr><td>noun</td><td></td><td>n 名词</td></tr><tr><td>plural</td><td></td><td>n 复数；adj 复数的</td></tr><tr><td>pronoun</td><td></td><td>n 代词</td></tr><tr><td>preposition</td><td></td><td>n 介词</td></tr><tr><td>compile</td><td></td><td>v 编撰</td></tr><tr><td>decipher</td><td></td><td>v 译解；辨认</td></tr><tr><td>eloquence</td><td></td><td>n 雄辩；流利的口才</td></tr><tr><td>contention</td><td></td><td>n 争论；观点</td></tr><tr><td>press</td><td></td><td>n 新闻界，记者；报社；出版社</td></tr><tr><td>leaflet</td><td></td><td>n 传单 v散发传单</td></tr><tr><td>propaganda</td><td></td><td>n 宣传，鼓吹</td></tr><tr><td>pastime</td><td></td><td>n 消遣，娱乐</td></tr><tr><td>recreation</td><td></td><td>n 休闲，娱乐</td></tr><tr><td>&#x3D;&#x3D;rehearsal&#x3D;&#x3D;</td><td></td><td>n 排练</td></tr><tr><td>mimic</td><td></td><td>v 模仿；戏仿</td></tr><tr><td>symphony</td><td></td><td>n 交响乐</td></tr><tr><td>orchestra</td><td></td><td>n 管弦乐队</td></tr><tr><td>tragedy</td><td></td><td>n 悲剧；悲惨的事</td></tr><tr><td>crafstman</td><td></td><td>n 工匠</td></tr><tr><td>&#x3D;&#x3D;depict&#x3D;&#x3D;</td><td></td><td>v 描述；描绘</td></tr><tr><td>&#x3D;&#x3D;improvise&#x3D;&#x3D;</td><td></td><td>v 临时做；即兴创作</td></tr><tr><td>lyric</td><td></td><td>n 【-s】歌词 adj 抒情的</td></tr><tr><td>melody</td><td></td><td>n 乐曲；旋律</td></tr><tr><td>disc</td><td></td><td>n 光碟；唱片</td></tr><tr><td>cello</td><td></td><td>n 大提琴</td></tr><tr><td>harmonica</td><td></td><td>n 口琴</td></tr><tr><td>flute</td><td></td><td>n 长笛</td></tr><tr><td>&#x3D;&#x3D;patron&#x3D;&#x3D;</td><td></td><td>n 赞助人；顾客</td></tr><tr><td>billiards</td><td></td><td>n 台球</td></tr><tr><td>hockey</td><td></td><td>n 曲棍球</td></tr><tr><td>cricket</td><td></td><td>n 板球</td></tr><tr><td>racket</td><td></td><td>n （网球，羽毛球）的球拍</td></tr><tr><td>pedestrian</td><td></td><td>n 步行者，行人</td></tr><tr><td>cruise</td><td></td><td>v 乘船游览</td></tr><tr><td>jog</td><td></td><td>v 慢跑</td></tr><tr><td>stride</td><td></td><td>v 大步走</td></tr><tr><td>linger</td><td></td><td>v 逗留，留连；继续留存</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>雅思词汇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IELTS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>雅思词汇 4</title>
    <link href="/2023/03/15/%E9%9B%85%E6%80%9D%E8%AF%8D%E6%B1%87-4/"/>
    <url>/2023/03/15/%E9%9B%85%E6%80%9D%E8%AF%8D%E6%B1%87-4/</url>
    
    <content type="html"><![CDATA[<p>unit6+7 科技、历史 3月15日</p><p>42词</p><table><thead><tr><th align="center">单词</th><th>🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶🎶</th><th align="center">释义</th></tr></thead><tbody><tr><td align="center">polytechnic</td><td></td><td align="center">adj 有关多种工艺的；n 理工学院</td></tr><tr><td align="center">gizmo</td><td></td><td align="center">n 小装置</td></tr><tr><td align="center">realm</td><td></td><td align="center">n 领域</td></tr><tr><td align="center">utilise</td><td></td><td align="center">v 利用</td></tr><tr><td align="center">gauge</td><td></td><td align="center">n 测量仪器 v 测量；判断</td></tr><tr><td align="center">&#x3D;&#x3D;auxiliary&#x3D;&#x3D;</td><td></td><td align="center">adj 辅助的；备用的</td></tr><tr><td align="center">versatile</td><td></td><td align="center">adj 多功能的</td></tr><tr><td align="center">lens</td><td></td><td align="center">n 透镜；（照相机等的镜头）</td></tr><tr><td align="center">radar</td><td></td><td align="center">n 雷达</td></tr><tr><td align="center">dial</td><td></td><td align="center">v 拨（电话）</td></tr><tr><td align="center">generator</td><td></td><td align="center">n 发电机</td></tr><tr><td align="center">pivot</td><td></td><td align="center">n 支点；中心</td></tr><tr><td align="center">hydraulic</td><td></td><td align="center">adj 水力的，液压的</td></tr><tr><td align="center">drainage</td><td></td><td align="center">n 排水系统；排水</td></tr><tr><td align="center">sewage</td><td></td><td align="center">n （下水道的）污水</td></tr><tr><td align="center">ventilation</td><td></td><td align="center">n 通风；通风设备</td></tr><tr><td align="center">distil</td><td></td><td align="center">v 蒸馏；提取……的精华</td></tr><tr><td align="center">prototype</td><td></td><td align="center">n 原型</td></tr><tr><td align="center">feudalism</td><td></td><td align="center">n 封建主义</td></tr><tr><td align="center">ethical</td><td></td><td align="center">adj 伦理的，道德的</td></tr><tr><td align="center">tribe</td><td></td><td align="center">n 部落</td></tr><tr><td align="center">anthropologist</td><td></td><td align="center">n 人类学家</td></tr><tr><td align="center">archaeology</td><td></td><td align="center">n 考古学</td></tr><tr><td align="center">excavate</td><td></td><td align="center">v 挖掘</td></tr><tr><td align="center">engrave</td><td></td><td align="center">v 在……上雕刻</td></tr><tr><td align="center">ritual</td><td></td><td align="center">n 仪式</td></tr><tr><td align="center">etiquette</td><td></td><td align="center">n 礼仪，礼节</td></tr><tr><td align="center">sacred</td><td></td><td align="center">adj 神圣的</td></tr><tr><td align="center">Pope</td><td></td><td align="center">n 教皇</td></tr><tr><td align="center">bishop</td><td></td><td align="center">n 主教</td></tr><tr><td align="center">missionary</td><td></td><td align="center">n 传教士</td></tr><tr><td align="center">priest</td><td></td><td align="center">n 牧师；神父</td></tr><tr><td align="center">cathedral</td><td></td><td align="center">n 大教堂</td></tr><tr><td align="center">choir</td><td></td><td align="center">n 唱诗班</td></tr><tr><td align="center">monk</td><td></td><td align="center">n 僧侣</td></tr><tr><td align="center">pagoda</td><td></td><td align="center">n 佛塔</td></tr><tr><td align="center">imperial</td><td></td><td align="center">adj 帝国的</td></tr><tr><td align="center">majesty</td><td></td><td align="center">n 壮观；陛下</td></tr><tr><td align="center">nobility</td><td></td><td align="center">n 高尚的品质；贵族</td></tr><tr><td align="center">nostalgia</td><td></td><td align="center">n 思乡之情</td></tr><tr><td align="center">adversity</td><td></td><td align="center">n 逆境</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>雅思词汇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IELTS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>雅思词汇 3</title>
    <link href="/2023/03/14/%E9%9B%85%E6%80%9D%E8%AF%8D%E6%B1%87-3/"/>
    <url>/2023/03/14/%E9%9B%85%E6%80%9D%E8%AF%8D%E6%B1%87-3/</url>
    
    <content type="html"><![CDATA[<p>unit4+5 太空、学校教育 3月14日</p><p>85词</p><table><thead><tr><th align="center">单词</th><th></th><th align="center">释义</th></tr></thead><tbody><tr><td align="center">cosmos</td><td></td><td align="center">n 宇宙</td></tr><tr><td align="center">interstellar</td><td></td><td align="center">adj 星际的</td></tr><tr><td align="center">terrestrial</td><td></td><td align="center">adj 地球的，陆地的</td></tr><tr><td align="center">celestial</td><td></td><td align="center">adj 天上的</td></tr><tr><td align="center">meteorite</td><td></td><td align="center">n 陨石</td></tr><tr><td align="center">envelope</td><td></td><td align="center">n 包裹物，外层</td></tr><tr><td align="center">propulsion</td><td></td><td align="center">n 推进力</td></tr><tr><td align="center">vent</td><td></td><td align="center">n 排气口 v 排放；发泄</td></tr><tr><td align="center">expedition</td><td></td><td align="center">n 远征，探索</td></tr><tr><td align="center">spectacle</td><td></td><td align="center">n 壮观的景象  [-s]眼睛</td></tr><tr><td align="center">eclipse</td><td></td><td align="center">n 黄道</td></tr><tr><td align="center">specimen</td><td></td><td align="center">n 样本</td></tr><tr><td align="center">ion</td><td></td><td align="center">n 离子</td></tr><tr><td align="center">electron</td><td></td><td align="center">n 电子</td></tr><tr><td align="center">quantum</td><td></td><td align="center">n 量子</td></tr><tr><td align="center">formation</td><td></td><td align="center">n 形成</td></tr><tr><td align="center">antenna</td><td></td><td align="center">n 天线</td></tr><tr><td align="center">circuit</td><td></td><td align="center">n 线路；巡回</td></tr><tr><td align="center">ultraviolet</td><td></td><td align="center">n 紫外线 adj 紫外线的</td></tr><tr><td align="center">discernible</td><td></td><td align="center">adj 可分辨的，看得清的</td></tr><tr><td align="center">squash</td><td></td><td align="center">v 压扁 n 壁球</td></tr><tr><td align="center">cataclysmic</td><td></td><td align="center">adj 剧变的；灾难性的</td></tr><tr><td align="center">novice</td><td></td><td align="center">n 新手</td></tr><tr><td align="center">illiteracy</td><td></td><td align="center">n 文盲</td></tr><tr><td align="center">numerate</td><td></td><td align="center">adj 识数的，有计算能力的</td></tr><tr><td align="center">riddle</td><td></td><td align="center">n 谜</td></tr><tr><td align="center">cram</td><td></td><td align="center">v 把……塞进 ；死记硬背</td></tr><tr><td align="center">indulge</td><td></td><td align="center">n 推动，促进；动量；惯性</td></tr><tr><td align="center">wit</td><td></td><td align="center">n 风趣的人；机智；风趣</td></tr><tr><td align="center">aptitude</td><td></td><td align="center">n 天生的才能</td></tr><tr><td align="center">notorious</td><td></td><td align="center">adj 声明狼藉的</td></tr><tr><td align="center">esteem</td><td></td><td align="center">v 尊重</td></tr><tr><td align="center">dean</td><td></td><td align="center">n （大学）学院院长</td></tr><tr><td align="center">faculty</td><td></td><td align="center">n（大学）系，院；（美）（大学的）全体教员</td></tr><tr><td align="center">lecturer</td><td></td><td align="center">n【英】大学的 讲师</td></tr><tr><td align="center">diplomat</td><td></td><td align="center">n 外交官；善于交际的人</td></tr><tr><td align="center">sophomore</td><td></td><td align="center">n 【美】（大学或高中）二年级学生</td></tr><tr><td align="center">alumna</td><td></td><td align="center">n alumnus 毕业生，校友</td></tr><tr><td align="center">orientation</td><td></td><td align="center">n 迎新会；方向</td></tr><tr><td align="center">coed</td><td></td><td align="center">adj 男女同校的</td></tr><tr><td align="center">matriculation</td><td></td><td align="center">n 注册入大学</td></tr><tr><td align="center">tale</td><td></td><td align="center">n 故事，传说</td></tr><tr><td align="center">coverage</td><td></td><td align="center">n 新闻报道；覆盖范围</td></tr><tr><td align="center">sketch</td><td></td><td align="center">n 概略 v概述</td></tr><tr><td align="center">inventory</td><td></td><td align="center">n 库存；详细目录</td></tr><tr><td align="center">reel</td><td></td><td align="center">n 卷轴；卷筒</td></tr><tr><td align="center">audit</td><td></td><td align="center">n 审计 v 旁听；审计</td></tr><tr><td align="center">psychology</td><td></td><td align="center">n 心理学</td></tr><tr><td align="center">&#x3D;&#x3D;logistics&#x3D;&#x3D;</td><td></td><td align="center">n 物流；后勤</td></tr><tr><td align="center">arithmetic</td><td></td><td align="center">n 算数</td></tr><tr><td align="center">algebra</td><td></td><td align="center">n 代数学，代数</td></tr><tr><td align="center">&#x3D;&#x3D;calculus&#x3D;&#x3D;</td><td></td><td align="center">n 微积分；结石</td></tr><tr><td align="center">merge</td><td></td><td align="center">n 合并</td></tr><tr><td align="center">diagonal</td><td></td><td align="center">adj 斜纹的 n 对角线</td></tr><tr><td align="center">sphere</td><td></td><td align="center">n 球体；范围</td></tr><tr><td align="center">cone</td><td></td><td align="center">n 圆锥体；锥形体</td></tr><tr><td align="center">decimal</td><td></td><td align="center">adj 小数的；十进位的 n 小数</td></tr><tr><td align="center">ounce</td><td></td><td align="center">n 少量</td></tr><tr><td align="center">mercury</td><td></td><td align="center">n 水影 [M~]水星</td></tr><tr><td align="center">volt</td><td></td><td align="center">n 伏特</td></tr><tr><td align="center">hollow</td><td></td><td align="center">adj 空心的</td></tr><tr><td align="center">ozone</td><td></td><td align="center">n 臭氧</td></tr><tr><td align="center">eccentric</td><td></td><td align="center">adj 奇怪的</td></tr><tr><td align="center">ferment</td><td></td><td align="center">v 发酵；骚动；n 酶；发酵；动乱</td></tr><tr><td align="center">dilute</td><td></td><td align="center">v 冲淡 adj 稀释了的</td></tr><tr><td align="center">noxious</td><td></td><td align="center">adj 有害的</td></tr><tr><td align="center">inert</td><td></td><td align="center">adj 无生气的；惰性的</td></tr><tr><td align="center">empirical</td><td></td><td align="center">adj 以实验为依据的；经验主义的</td></tr><tr><td align="center">doctrine</td><td></td><td align="center">n 学说；教义</td></tr><tr><td align="center">syllabus</td><td></td><td align="center">n 教学大纲</td></tr><tr><td align="center">rudimentary</td><td></td><td align="center">adj 基本的</td></tr><tr><td align="center">profound</td><td></td><td align="center">adj （影响）深刻的；见解深刻的</td></tr><tr><td align="center">&#x3D;&#x3D;scrutinise&#x3D;&#x3D;</td><td></td><td align="center">v 仔细检查</td></tr><tr><td align="center">gist</td><td></td><td align="center">n 主旨</td></tr><tr><td align="center">cite</td><td></td><td align="center">v 引用</td></tr><tr><td align="center">hypothesis</td><td></td><td align="center">n 假说</td></tr><tr><td align="center">postulate</td><td></td><td align="center">v 假定 n 假设</td></tr><tr><td align="center">deduce</td><td></td><td align="center">v 演绎，推论</td></tr><tr><td align="center">analogy</td><td></td><td align="center">n 类比</td></tr><tr><td align="center">nuance</td><td></td><td align="center">n 细微差别</td></tr><tr><td align="center">inductive</td><td></td><td align="center">adj 归纳的；诱导的</td></tr><tr><td align="center">manifest</td><td></td><td align="center">v 显示，表明</td></tr><tr><td align="center">survey</td><td></td><td align="center">n 民意调查 v对……民意调查</td></tr><tr><td align="center">fellowship</td><td></td><td align="center">n 研究生奖学金</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>雅思词汇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IELTS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>雅思词汇 2</title>
    <link href="/2023/03/13/%E9%9B%85%E6%80%9D%E8%AF%8D%E6%B1%87-2/"/>
    <url>/2023/03/13/%E9%9B%85%E6%80%9D%E8%AF%8D%E6%B1%87-2/</url>
    
    <content type="html"><![CDATA[<p>unit2+3   植物、动物研究  3月13日</p><p>69词</p><table><thead><tr><th>单词</th><th></th><th align="center">释义</th></tr></thead><tbody><tr><td>herb</td><td></td><td align="center">n 药草；香草</td></tr><tr><td>perennial</td><td></td><td align="center">n 多年生植物 adj 长期的，持久的</td></tr><tr><td>horticulture</td><td></td><td align="center">n 园艺</td></tr><tr><td>mutation</td><td></td><td align="center">n 突变，变异</td></tr><tr><td>hybridisation</td><td></td><td align="center">n 杂交</td></tr><tr><td>reclaim</td><td></td><td align="center">v 开垦</td></tr><tr><td>pluck</td><td></td><td align="center">v 采，摘</td></tr><tr><td>arable</td><td></td><td align="center">adj 适合耕种的</td></tr><tr><td>&#x3D;&#x3D;rear&#x3D;&#x3D;</td><td></td><td align="center">v 培养；饲养 n 后部</td></tr><tr><td>spade</td><td></td><td align="center">n 铁锹</td></tr><tr><td>rake</td><td></td><td align="center">n 耙子 v耙；搜索</td></tr><tr><td>fungus</td><td></td><td align="center">n 真菌</td></tr><tr><td>mould&#x3D;mold</td><td></td><td align="center">n 霉菌 v 发霉</td></tr><tr><td>pollen</td><td></td><td align="center">n 花粉 v 给……授粉</td></tr><tr><td>burgeon</td><td></td><td align="center">n 嫩枝 v 急速增长</td></tr><tr><td>aromatic</td><td></td><td align="center">adj 芳香的</td></tr><tr><td>wither</td><td></td><td align="center">v （使）枯萎</td></tr><tr><td>rot   rotten adj</td><td></td><td align="center">v （使）腐烂 n 腐烂</td></tr><tr><td>terrace</td><td></td><td align="center">n 梯田</td></tr><tr><td>charcoal</td><td></td><td align="center">n 木炭</td></tr><tr><td>bough</td><td></td><td align="center">n 大树枝</td></tr><tr><td>hay</td><td></td><td align="center">n 干草</td></tr><tr><td>reed</td><td></td><td align="center">n 芦苇</td></tr><tr><td>thorn</td><td></td><td align="center">n 刺；荆棘</td></tr><tr><td>meadow</td><td></td><td align="center">n 草地；牧场</td></tr><tr><td>lawn</td><td></td><td align="center">n 草地；草坪</td></tr><tr><td>tulip</td><td></td><td align="center">n 郁金香</td></tr><tr><td>mint</td><td></td><td align="center">n 薄荷；铸币厂 v 铸币</td></tr><tr><td>reef</td><td></td><td align="center">n 暗礁</td></tr><tr><td>alga</td><td></td><td align="center">n 海藻</td></tr><tr><td>enzyme</td><td></td><td align="center">n 酶</td></tr><tr><td>primate</td><td></td><td align="center">n 灵长目动物</td></tr><tr><td>vertebrate</td><td></td><td align="center">n 脊椎动物</td></tr><tr><td>carnivore</td><td></td><td align="center">n 食肉动物</td></tr><tr><td>herbivore</td><td></td><td align="center">n 食草动物</td></tr><tr><td>fauna</td><td></td><td align="center">n （某地区）动物群</td></tr><tr><td>flora</td><td></td><td align="center">n （某地区）植物群</td></tr><tr><td>flock</td><td></td><td align="center">（鸟、羊）群 v 聚集</td></tr><tr><td>herd</td><td></td><td align="center">n 兽群</td></tr><tr><td>swarm</td><td></td><td align="center">n 一大群</td></tr><tr><td>throng</td><td></td><td align="center">n 人群，一大群人 v 群集</td></tr><tr><td>descendant</td><td></td><td align="center">n 后裔，后代 adj 下降的</td></tr><tr><td>proliferate</td><td></td><td align="center">v 迅速增殖；剧增</td></tr><tr><td>sterility</td><td></td><td align="center">n 不生育</td></tr><tr><td>courtship</td><td></td><td align="center">n 求偶</td></tr><tr><td>brood</td><td></td><td align="center">n 一窝幼鸟 v孵蛋</td></tr><tr><td>claw</td><td></td><td align="center">n 爪 ；钳</td></tr><tr><td>paw</td><td></td><td align="center">n（动物）掌，爪子</td></tr><tr><td>plume</td><td></td><td align="center">n 羽毛</td></tr><tr><td>bristle</td><td></td><td align="center">n 鬓毛，刷子毛</td></tr><tr><td>cricket</td><td></td><td align="center">n 蟋蟀</td></tr><tr><td>tortoise and hare</td><td></td><td align="center"></td></tr><tr><td>saddle</td><td></td><td align="center">n 马鞍；车座</td></tr><tr><td>falcon</td><td></td><td align="center">n 隼；猎鹰</td></tr><tr><td>sparrow</td><td></td><td align="center">n 麻雀</td></tr><tr><td>pigeon</td><td></td><td align="center">n 鸽子</td></tr><tr><td>squirrel</td><td></td><td align="center">n 松鼠</td></tr><tr><td>creep</td><td></td><td align="center">v 爬行</td></tr><tr><td>crawl</td><td></td><td align="center">v 爬，卑躬屈膝</td></tr><tr><td>vitamin</td><td></td><td align="center">n 维生素</td></tr><tr><td>devour</td><td></td><td align="center">v 吞食，狼吞虎咽的吃</td></tr><tr><td>acoustic</td><td></td><td align="center">adj 听觉的</td></tr><tr><td>optical</td><td></td><td align="center">adj 视觉的</td></tr><tr><td>nocturnal</td><td></td><td align="center">adj 晚间发生的</td></tr><tr><td>dormant</td><td></td><td align="center">adj 睡眠的</td></tr><tr><td>hibernation</td><td></td><td align="center">n 冬眠</td></tr><tr><td>tame</td><td></td><td align="center">v 驯养；制服 adj 驯服的，乏味的</td></tr><tr><td>shepherd</td><td></td><td align="center">n 牧羊人</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>雅思词汇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IELTS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>雅思词汇 1</title>
    <link href="/2023/03/13/%E9%9B%85%E6%80%9D%E8%AF%8D%E6%B1%87-1/"/>
    <url>/2023/03/13/%E9%9B%85%E6%80%9D%E8%AF%8D%E6%B1%87-1/</url>
    
    <content type="html"><![CDATA[<p>unit1：地质  3月13日 </p><p>50词</p><table><thead><tr><th align="left">单词</th><th>默写</th><th align="center">释义</th></tr></thead><tbody><tr><td align="left">hydrosphere</td><td></td><td align="center">n. 水圈；大气中的水汽</td></tr><tr><td align="left">lithosphere</td><td></td><td align="center">n.岩石圈</td></tr><tr><td align="left">mishap</td><td></td><td align="center">n.小灾难</td></tr><tr><td align="left">calamity</td><td></td><td align="center">n 灾难，不幸的事情</td></tr><tr><td align="left">jeopardize</td><td></td><td align="center">v 危害，危及</td></tr><tr><td align="left">pebble</td><td></td><td align="center">n 鹅卵石</td></tr><tr><td align="left">ore</td><td></td><td align="center">n 矿石；矿</td></tr><tr><td align="left">marble</td><td></td><td align="center">n 大理石；弹球</td></tr><tr><td align="left">quartz</td><td></td><td align="center">n 石英</td></tr><tr><td align="left">grantie</td><td></td><td align="center">n 黄岗岩</td></tr><tr><td align="left">gust</td><td></td><td align="center">n 一阵狂风；感情的迸发</td></tr><tr><td align="left">breeze</td><td></td><td align="center">n 微风，和风</td></tr><tr><td align="left">gale</td><td></td><td align="center">n 大风</td></tr><tr><td align="left">thermodynamics</td><td></td><td align="center">adj 热力学；热力学的</td></tr><tr><td align="left">&#x3D;&#x3D;fume&#x3D;&#x3D;</td><td></td><td align="center">n 烟，气体 v 冒烟;发怒</td></tr><tr><td align="left">mist</td><td></td><td align="center">n 薄雾；水汽</td></tr><tr><td align="left">torrent</td><td></td><td align="center">n 激流，洪流</td></tr><tr><td align="left">seismic</td><td></td><td align="center">adj 地震的，地震引起的</td></tr><tr><td align="left">terrain</td><td></td><td align="center">n 地形</td></tr><tr><td align="left">cliff</td><td></td><td align="center">n 悬崖</td></tr><tr><td align="left">swamp</td><td></td><td align="center">n 沼泽，湿地</td></tr><tr><td align="left">plateau</td><td></td><td align="center">n 高原</td></tr><tr><td align="left">oasis</td><td></td><td align="center">n 绿洲；宜人之地</td></tr><tr><td align="left">arctic</td><td></td><td align="center">adj 极冷的；北极的 n 北极</td></tr><tr><td align="left">Antartic</td><td></td><td align="center">adj 南极的 n 南极</td></tr><tr><td align="left">axis</td><td></td><td align="center">n  轴线</td></tr><tr><td align="left">brook</td><td></td><td align="center">n 小河 溪</td></tr><tr><td align="left">stony</td><td></td><td align="center">adj 石头的，多石的</td></tr><tr><td align="left">Oceania</td><td></td><td align="center">n 大洋洲</td></tr><tr><td align="left">&#x3D;&#x3D;peninsula&#x3D;&#x3D;</td><td></td><td align="center">n 半岛</td></tr><tr><td align="left">meteorology</td><td></td><td align="center">n 气象学</td></tr><tr><td align="left">tropics</td><td></td><td align="center">n 热带地区</td></tr><tr><td align="left">arid</td><td></td><td align="center">adj 干燥的</td></tr><tr><td align="left">humid</td><td></td><td align="center">adj 潮湿的</td></tr><tr><td align="left">thaw</td><td></td><td align="center">v 解冻，融化 n 解冻时期</td></tr><tr><td align="left">chill</td><td></td><td align="center">v （使）变冷 n 寒冷；害怕</td></tr><tr><td align="left">frigid</td><td></td><td align="center">adj 寒冷的</td></tr><tr><td align="left">Celsius</td><td></td><td align="center">adj 摄氏度的</td></tr><tr><td align="left">hillside</td><td></td><td align="center">n 山腰，山坡</td></tr><tr><td align="left">Oriental</td><td></td><td align="center">adj 东方的（中国和日本）</td></tr><tr><td align="left">inevitable</td><td></td><td align="center">adj 不可避免的，必然的</td></tr><tr><td align="left">irreversible</td><td></td><td align="center">adj 不可逆转的；不可挽回的</td></tr><tr><td align="left">silt</td><td></td><td align="center">n 淤泥，泥沙 v（使）淤塞</td></tr><tr><td align="left">outskirts</td><td></td><td align="center">n 郊区</td></tr><tr><td align="left">desolate</td><td></td><td align="center">adj 荒凉的</td></tr><tr><td align="left">paradise</td><td></td><td align="center">n 天堂的</td></tr><tr><td align="left">precipitate</td><td></td><td align="center">v （水汽凝结）；沉淀</td></tr><tr><td align="left">dew</td><td></td><td align="center">n 露水</td></tr><tr><td align="left">synthetic</td><td></td><td align="center">adj 人造的，合成的 n【-s】合成物</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>雅思词汇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IELTS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些正则表达式语法</title>
    <link href="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/"/>
    <url>/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="正则表达式（速记版）"><a href="#正则表达式（速记版）" class="headerlink" title="正则表达式（速记版）"></a>正则表达式（速记版）</h2><p>工具：编辑器或者regex101</p><h3 id="1、限定符"><a href="#1、限定符" class="headerlink" title="1、限定符"></a>1、限定符</h3><p>（1）&#x3D;&#x3D;？     匹配的条件是前面的那个字符出现一次或者0次&#x3D;&#x3D;</p><p>例如：<img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F1" alt="image-20220712183215288"></p><p>（2）&#x3D;&#x3D;*        匹配条件是前面的那个字符出现0次、1次或者多次&#x3D;&#x3D;</p><p>例如：</p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F2" alt="image-20220712183509170"></p><p>（3）&#x3D;&#x3D;+           匹配条件是前面的字符出现1次或者1次以上&#x3D;&#x3D;</p><p>例如：<img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F3" alt="image-20220712183643138"></p><p>（4）  &#x3D;&#x3D;{……}    来确定范围或者来限定确定个数&#x3D;&#x3D;</p><p>例如：</p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F4" alt="image-20220712183835292"></p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F5" alt="image-20220712183859559"></p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F6" alt="image-20220712183930989"></p><p>假设限定符对象是多个字符：</p><p>例如：</p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F7" alt="image-20220712184116466"></p><h3 id="2、“或”运算符"><a href="#2、“或”运算符" class="headerlink" title="2、“或”运算符"></a>2、“或”运算符</h3><p>&#x3D;&#x3D;“或”来连接要匹配的两个或者多个字符，而且外面一定要有小括号！！！&#x3D;&#x3D;</p><p>例如：</p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F8" alt="image-20220712184331639"></p><h3 id="3、字符类"><a href="#3、字符类" class="headerlink" title="3、字符类"></a>3、字符类</h3><p>[ ]+               括号里给定具体内容或者一些范围来进行匹配，在匹配范围前面&#x3D;&#x3D;加^号&#x3D;&#x3D;来表示匹配除了这个范围以外的字符。</p><p>^叫做脱字符</p><p>需要注意的是：换行符也包括在其中</p><p>例子：</p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F9" alt="image-20220712185035937"></p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F10" alt="image-20220712185112466"></p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F11" alt="image-20220712185141779"></p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F12" alt="image-20220712185201401"></p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F13" alt="image-20220712185230482"></p><h3 id="4、元字符"><a href="#4、元字符" class="headerlink" title="4、元字符"></a>4、元字符</h3><p>正则表达式中给我们预先定义好了一系列常用的字符类型，比如：数字、空白符、单词开头、结尾……&#x3D;&#x3D;它们被称为元字符&#x3D;&#x3D;</p><p>大多数元字符以反斜杠开头&#x3D;&#x3D;“\”&#x3D;&#x3D;</p><p>\d         代表数字字符</p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F14" alt="image-20220712185442043"></p><p>\w        代表“单词”字符 也就是所有的英文字符、数字字符和下划线</p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F15" alt="image-20220712185604018"></p><p>\s       空白字符 代表所有的空格和换行符 </p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F16" alt="image-20220712185720579"></p><p>注意：\W   \D     \S       表示上述的反面</p><p>。                      代表任意字符但不包含换行符</p><p>^                        去匹配行首</p><p>$                         去匹配行尾</p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F17" alt="image-20220712190017713"></p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F18" alt="image-20220712190034927"></p><h3 id="5、贪婪与懒惰匹配"><a href="#5、贪婪与懒惰匹配" class="headerlink" title="5、贪婪与懒惰匹配"></a>5、贪婪与懒惰匹配</h3><p> ？  可以把贪婪匹配变为懒惰匹配</p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F19" alt="image-20220712190238205"></p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F20" alt="image-20220712190259210"></p><h3 id="6、实例"><a href="#6、实例" class="headerlink" title="6、实例"></a>6、实例</h3><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F21" alt="image-20220712190410967"></p><p>注意转义的运用！！！      &#x3D;&#x3D;也就是\加上要用的符号表示该符号&#x3D;&#x3D;</p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F22" alt="image-20220712190510702"></p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F23" alt="image-20220712190642363"></p><p><img src="/2022/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%9F%E8%AE%B0%E7%89%88%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F24" alt="image-20220712190715412"></p>]]></content>
    
    
    <categories>
      
      <category>正则表达式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware Workstation虚拟机学习使用</title>
    <link href="/2022/08/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/08/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="VMware-Workstation虚拟机学习使用"><a href="#VMware-Workstation虚拟机学习使用" class="headerlink" title="VMware Workstation虚拟机学习使用"></a>VMware Workstation虚拟机学习使用</h1><h2 id="1-虚拟机简单介绍"><a href="#1-虚拟机简单介绍" class="headerlink" title="1.  虚拟机简单介绍"></a>1.  虚拟机简单介绍</h2><p>虚拟机软件可让你在不重启电脑的情况下，在一个操作系统上同时运行多个不同的系统，譬如在 Win10 上同时运行 Ubuntu 与 Win7，用户可用于各种开发、测试或运行不同平台的软件。</p><p>VMware Workstation Pro 16 中文专业版功能相对免费的 VMWare Player 要丰富强大得多！新版本支持 Windows 10，支持 USB 3.1、蓝牙、4K，支持容器、兼容 Hyper-V，支持 DirectX 11 和 OpenGL 4.1 加速，3D 游戏性能大幅提高！另外还可共享或远程控制虚拟机等……</p><p>激活码</p><p>YF390-0HF8P-M81RQ-2DXQE-M2UT6</p><h2 id="2-网络模式"><a href="#2-网络模式" class="headerlink" title="2.  网络模式"></a>2.  网络模式</h2><p>我们知道VMware也分几种版本，普通用户最常用的就是Workstation，但是不管使用哪种版本，我们都能发现在安装过程中让我们选择 网络模式。在默认情况下会选中桥接模式，但有用户会问其他模式是干什么用的？有时候选择了其他模式之后就不能上网了。今天小编就和大家一起探讨一下 VMware 3种网络模式的功能和通信规则。</p><p><img src="/2022/08/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0/vm1" alt="IMG_256"></p><p>我们首先说一下VMware的几个虚拟设备</p><p>VMnet0：用于虚拟桥接网络下的虚拟交换机</p><p>VMnet1：用于虚拟Host-Only网络下的虚拟交换机</p><p>VMnet8：用于虚拟NAT网络下的虚拟交换机</p><p>VMware Network Adepter VMnet1：Host用于与Host-Only虚拟网络进行通信的虚拟网卡</p><p>VMware Network Adepter VMnet8：Host用于与NAT虚拟网络进行通信的虚拟网卡</p><p>安装了VMware虚拟机后，会在网络连接对话框中多出两个虚拟网卡，如图：</p><p><img src="/2022/08/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0/vm2" alt="IMG_257"></p><p>网络连接</p><p><strong>一.桥接网络（Bridged Networking）</strong></p><p>桥接网络是指本地物理网卡和虚拟网卡通过VMnet0虚拟交换机进行桥接，物理网卡和虚拟网卡在拓扑图上处于同等地位（虚拟网卡既不是Adepter VMnet1也不是Adepter VMnet8）。</p><p><img src="/2022/08/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0/vm3" alt="IMG_258"></p><p>桥接网络拓扑图</p><p>那么物理网卡和虚拟网卡就相当于处于同一个网段，虚拟交换机就相当于一台现实网络中的交换机。所以两个网卡的IP地址也要设置为同一网段。</p><p><img src="/2022/08/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0/vm4" alt="IMG_259"></p><p>物理网卡IP地址</p><p><img src="/2022/08/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0/vm5" alt="IMG_260"></p><p>虚拟网卡IP地址</p><p>我们看到，物理网卡和虚拟网卡的IP地址处于同一个网段，子网掩码、网关、DNS等参数都相同。两个网卡在拓扑结构中是相对独立的。</p><p>我们在192.168.15.111上ping192.168.15.96，结果显示两个网卡能够互相通信。如果在网络中存在DHCP服务器， 那么虚拟网卡同样可以从DHCP服务器上获取IP地址。所以桥接网络模式是VMware虚拟机中最简单直接的模式。安装虚拟机时它为默认选项。</p><p><strong>二.NAT模式</strong></p><p>在NAT网络中，会用到VMware Network Adepter VMnet8虚拟网卡，主机上的VMware Network Adepter VMnet8虚拟网卡被直接连接到VMnet8虚拟交换机上与虚拟网卡进行通信。</p><p><img src="/2022/08/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0/vm6" alt="IMG_261"></p><p>NAT网络模式</p><p>VMware Network Adepter VMnet8虚拟网卡的作用仅限于和VMnet8网段进行通信，它不给VMnet8网段提供路由功能，所以虚拟机虚拟一个NAT服务器，使虚拟网卡可以连 接到Internet。在这种情况下，我们就可以使用端口映射功能，让访问主机80端口的请求映射到虚拟机的80端口上。</p><p>VMware Network Adepter VMnet8虚拟网卡的IP地址是在安装VMware时由系统指定生成的，我们不要修改这个数值，否则会使主机和虚拟机无法通信。</p><p>虚拟出来的网段和NAT模式虚拟网卡的网段是一样的，都为192.168.111.X，包括NAT服务器的IP地址也是这个网段。在安装VMware之后同样会生成一个虚拟DHCP服务器，为NAT服务器分配IP地址。<br> 当主机和虚拟机进行通信的时候就会调用VMware Network Adepter VMnet8虚拟网卡，因为他们都在一个网段，所以通信就不成问题了。</p><p>实际上，VMware Network Adepter VMnet8虚拟网卡的作用就是为主机和虚拟机的通信提供一个接口，即使主机的物理网卡被关闭，虚拟机仍然可以连接到Internet，但是主机和虚拟机之间就不能互访了。</p><p><strong>三.Host-Only模式</strong><br> 在Host-Only模式下，虚拟网络是一个全封闭的网络，它唯一能够访问的就是主机。其实Host-Only网络和NAT网络很相似，不同的 地方就是Host-Only网络没有NAT服务，所以虚拟网络不能连接到Internet。主机和虚拟机之间的通信是通过VMware Network Adepter VMnet1虚拟网卡来实现的。</p><p><img src="/2022/08/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0/vm7" alt="IMG_262"></p><p>同NAT一样，VMware Network Adepter VMnet1虚拟网卡的IP地址也是VMware系统指定的，同时生成的虚拟DHCP服务器和虚拟网卡的IP地址位于同一网段，但和物理网卡的IP地址不在同一网段。</p><p>Host-Only的宗旨就是建立一个与外界隔绝的内部网络，来提高内网的安全性。这个功能或许对普通用户来说没有多大意义，但大型服务商会常 常利用这个功能。如果你想为VMnet1网段提供路由功能，那就需要使用RRAS，而不能使用XP或2000的ICS，因为ICS会把内网的IP地址改为 192.168.0.1，但虚拟机是不会给VMnet1虚拟网卡分配这个地址的，那么主机和虚拟机之间就不能通信了。</p><p><strong>综述</strong></p><p>在VMware的3中网络模式中，NAT模式是最简单的，基本不需要手动配置IP地址等相关参数。至于桥接模式则需要额外的IP地址，如果是在内网环境中还很容易，如果是ADSL宽带就比较麻烦了，ISP一般是不会大方的多提供一个公网IP的。 </p><h2 id="3-通俗理解"><a href="#3-通俗理解" class="headerlink" title="3.  通俗理解"></a>3.  通俗理解</h2><table><thead><tr><th>模式</th><th>解释</th></tr></thead><tbody><tr><td>桥接模式</td><td>同一个网段内访问 能访问互联网。</td></tr><tr><td>NAT模式</td><td>不在一个网段内 能上网 也能访问内网其他机器，但是其他机子访问不了。</td></tr><tr><td>Host模式</td><td>物理机能访问。不能不上网 不能访问局域网其他机子。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vmware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web安全基础知识</title>
    <link href="/2022/08/09/web%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/08/09/web%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p>黑盒测试  白盒测试   灰盒测试</p><hr><h4 id="1、肉鸡"><a href="#1、肉鸡" class="headerlink" title="1、肉鸡"></a>1、肉鸡</h4><p>可以被我们随意控制的电脑并且不被发现</p><h4 id="2、木马"><a href="#2、木马" class="headerlink" title="2、木马"></a>2、木马</h4><p>灰鸽子、黑洞……</p><h4 id="3、远控"><a href="#3、远控" class="headerlink" title="3、远控"></a>3、远控</h4><p>远距离控制电脑</p><h4 id="4、网页木马"><a href="#4、网页木马" class="headerlink" title="4、网页木马"></a>4、网页木马</h4><p>字面意思</p><h4 id="5、黑页"><a href="#5、黑页" class="headerlink" title="5、黑页"></a>5、黑页</h4><p>修改网站首页放自己的</p><h4 id="6、挂马"><a href="#6、挂马" class="headerlink" title="6、挂马"></a>6、挂马</h4><p>在别人的网站里面放木马</p><h4 id="7、大马"><a href="#7、大马" class="headerlink" title="7、大马"></a>7、大马</h4><p>功能强大网页后门</p><h4 id="8、小马"><a href="#8、小马" class="headerlink" title="8、小马"></a>8、小马</h4><p>保存文件   有时候上传会查杀</p><h4 id="9、一句话后门"><a href="#9、一句话后门" class="headerlink" title="9、一句话后门"></a>9、一句话后门</h4><p>一段很小的网页代码后门，可以用客户端连接，对网站进行控制</p><h4 id="10、后门"><a href="#10、后门" class="headerlink" title="10、后门"></a>10、后门</h4><p>BackDoor   </p><h4 id="11、拖库"><a href="#11、拖库" class="headerlink" title="11、拖库"></a>11、拖库</h4><p>本来是数据库领域的术语，指从数据库中导出数据。</p><h4 id="12、社工库"><a href="#12、社工库" class="headerlink" title="12、社工库"></a>12、社工库</h4><p>黑客与大数据进行结合1的产物，黑客们将泄露的用户数据整合分析，然后归档在一个地方</p><h4 id="13、撞库"><a href="#13、撞库" class="headerlink" title="13、撞库"></a>13、撞库</h4><p>黑客通过收集互联网已泄露的用户和密码信息，生成对应的字典表，尝试批量登录其他网站后，得到一系列可以登录的用户。很多用户在不同网站用的是相同的账号密码，因此黑客可以通过已经获取的账号密码来登录其他网站</p><h4 id="14、提权"><a href="#14、提权" class="headerlink" title="14、提权"></a>14、提权</h4><p>提高自己在服务器里面的权限</p><h4 id="15、网络钓鱼"><a href="#15、网络钓鱼" class="headerlink" title="15、网络钓鱼"></a>15、网络钓鱼</h4><p>利用欺骗性的电子邮件和伪造的web站点来进行诈骗活动，比如QQ空间盗号</p><h4 id="16、社会工程学攻击"><a href="#16、社会工程学攻击" class="headerlink" title="16、社会工程学攻击"></a>16、社会工程学攻击</h4><p>人为行动，利用心理等手段</p><h4 id="17、rootkit"><a href="#17、rootkit" class="headerlink" title="17、rootkit"></a>17、rootkit</h4><p>rootkit是攻击者用来隐藏自己的行踪和保留root</p><h4 id="18、ipc"><a href="#18、ipc" class="headerlink" title="18、ipc$"></a>18、ipc$</h4><p>它是为了让进程间的通信而开放的饿命名管道，可以通过验证用户名和密码获得相应的权限，在远程管理计算机和查看计算机的共享资源时使用</p><h4 id="19、弱口令"><a href="#19、弱口令" class="headerlink" title="19、弱口令"></a>19、弱口令</h4><p>指那些强度不够的口令</p><h4 id="20、默认共享"><a href="#20、默认共享" class="headerlink" title="20、默认共享"></a>20、默认共享</h4><p>是WINDOWS2000&#x2F;XP&#x2F;2003 系统开启共享服务时自动开启所有硬盘的共享，因为加了“$”符号，所以看不到共享的托手图表，也称为隐藏共享</p><h4 id="21、shell"><a href="#21、shell" class="headerlink" title="21、shell"></a>21、shell</h4><p>指的是命令指行的运行环境</p><h4 id="22、交互shell"><a href="#22、交互shell" class="headerlink" title="22、交互shell"></a>22、交互shell</h4><p>shell等待你的输入，并且执行你提交的命令。这种模式被称为交互式是因为shell与用户进行交互。</p><h4 id="23、webshell"><a href="#23、webshell" class="headerlink" title="23、webshell"></a>23、webshell</h4><p>就是以asp、rphp、jsp 或者cgi等网页文件形式存在的一种命令执行环境，也可以将其称做是一种网页后门。黑客在**了一个网站后，通常会将这些asp或php后门文件与网站服务器WEB目录下正常的网页文件混在一起，好后就可以使用浏览器来访问这些asp 或者php后门，得到一个命令执行环境，以达到控制网站服务器的目的。</p><h4 id="24、溢出"><a href="#24、溢出" class="headerlink" title="24、溢出"></a>24、溢出</h4><p>确切的来说是缓冲区溢出</p><h4 id="25、注入"><a href="#25、注入" class="headerlink" title="25、注入"></a>25、注入</h4><p>随着B&#x2F;S模式应用开发的发展，使用这种模式编写程序的程序员越来越来越多，但是由于程序员的水平参差不齐相当大一部分应用程序存在安全隐患。&#x3D;&#x3D;用户可以提交一段数据库查询代码，根据程序返回的结果，获得某些他想要知的数据&#x3D;&#x3D;，这个就是所谓的SQLinjection，即: SQL 注意注入。</p><h4 id="26、注入点"><a href="#26、注入点" class="headerlink" title="26、注入点"></a>26、注入点</h4><p>是可以实行注入的地方，通常是一个访问数据库的连接。根据注入点数据库的运行账号的权限不同，所得到的权限也不同</p><h4 id="27、旁站入侵"><a href="#27、旁站入侵" class="headerlink" title="27、旁站入侵"></a>27、旁站入侵</h4><p>同一个服务器上有多个 ，可以通过入侵其中的一个站点，通过提权跨目录访问其他站点</p><h4 id="28、C段渗透"><a href="#28、C段渗透" class="headerlink" title="28、C段渗透"></a>28、C段渗透</h4><p>C端下服务器入侵 同一个网段内例如：202.202.1-2020.0.254  如果拿下其中的一台服务器，通过这台服务器嗅探目标服务器传输上的数据，从而拿到这台服务器的权限。常见的工具有cain</p><h4 id="29、内网"><a href="#29、内网" class="headerlink" title="29、内网"></a>29、内网</h4><p>通俗的来说就是局域网</p><h4 id="30、外网"><a href="#30、外网" class="headerlink" title="30、外网"></a>30、外网</h4><p>字面意思</p><h4 id="31、中间人攻击"><a href="#31、中间人攻击" class="headerlink" title="31、中间人攻击"></a>31、中间人攻击</h4><p>（MITM攻击）密码学里面涉及到</p><p>比如：SMB会话劫持、DNS欺骗等技术</p><h4 id="32、端口"><a href="#32、端口" class="headerlink" title="32、端口"></a>32、端口</h4><p>相当于一种数据的传输通道</p><h4 id="33、免杀"><a href="#33、免杀" class="headerlink" title="33、免杀"></a>33、免杀</h4><p>字面意思</p><h4 id="34、加壳"><a href="#34、加壳" class="headerlink" title="34、加壳"></a>34、加壳</h4><p>逆向里面的加壳相同的意思</p><h4 id="35、花指令"><a href="#35、花指令" class="headerlink" title="35、花指令"></a>35、花指令</h4><p>一般用来做免杀</p><p>就是几句汇编指令，让杀毒软件不能正常找到，从而达到免杀的目的</p><h4 id="36、TCP-x2F-IP"><a href="#36、TCP-x2F-IP" class="headerlink" title="36、TCP&#x2F;IP"></a>36、TCP&#x2F;IP</h4><p>网络通信协议  是internet的基础协议</p><h4 id="37、路由器"><a href="#37、路由器" class="headerlink" title="37、路由器"></a>37、路由器</h4><p>字面意思</p><h4 id="38、蜜罐"><a href="#38、蜜罐" class="headerlink" title="38、蜜罐"></a>38、蜜罐</h4><p>故意让人攻击的目标，引诱黑客来攻击。&#x3D;&#x3D;（自己做网站被攻击，可以试试用蜜罐）&#x3D;&#x3D;</p><h4 id="39、拒绝服务攻击"><a href="#39、拒绝服务攻击" class="headerlink" title="39、拒绝服务攻击"></a>39、拒绝服务攻击</h4><p>DOS攻击，其目的是使计算机无法正常服务，最常见的DOS攻击有计算机网络宽带攻击和连通性攻击，连通性攻击指使用大量的连接请求冲击计算机，使得所有可用的操作系统资源被消耗，最终计算机无法处理。</p><h4 id="40、CC攻击"><a href="#40、CC攻击" class="headerlink" title="40、CC攻击"></a>40、CC攻击</h4><p>攻击者借助代理服务器生成指向受害主机的合法请求，实现DDOS和伪装</p><h4 id="41、脚本注入攻击（SQL-INJECTION）"><a href="#41、脚本注入攻击（SQL-INJECTION）" class="headerlink" title="41、脚本注入攻击（SQL INJECTION）"></a>41、脚本注入攻击（SQL INJECTION）</h4><p>所谓脚本注入攻击者把SQL命令插入到WEB表单的输入域或页面请求的查询字串，欺骗服务器执行恶意的SQL命令，在某些表单中，用户输入的内容直接用来构造动态的SQL命令，或作为存储过程的输入参数，这类表单特别容易受到SQL注入式攻击。</p><h4 id="42、加密技术"><a href="#42、加密技术" class="headerlink" title="42、加密技术"></a>42、加密技术</h4><p>加密技术是最常用的安全保密手段，利用技术手段把重要的数据变为乱码(加密)传送，到达目的地后再用相同或不同的手段还原(解密)。&#x3D;&#x3D;加密技术包括两个元素:算法和密钥。算法是将普通的信息或者可以理解的信息与一串数字(密钥)结合&#x3D;&#x3D;，产生不可理解的密文的步骤，密钥是用来对数据进行编码和解密的一种算法。在安全保密中，可通过适当的钥加密技术和管理机制来保证网络的信息通信安全。</p><h4 id="43、局域网内部的ARP攻击"><a href="#43、局域网内部的ARP攻击" class="headerlink" title="43、局域网内部的ARP攻击"></a>43、局域网内部的ARP攻击</h4><p>ARP (Address Resolution Protocol,地址解析协议)协议的基本功能就是通过目标设备的IP地址，查询目标设备的MAC地址，以保证通信的进行。基于ARP协议的这一工作特性，黑客向对方计算机不断发送有欺诈性质的ARP数据包，数据包内包含有与当前设备重复的Mac地址，使对方在回应报文时，由于简单的地址重复错误而导致不能进行正常的网络通信。一般情况下，受到ARP攻击的计算机会出现&#x3D;&#x3D;两种现象:<br>1.不断弹出“本机的XXX段硬件地址与网络中的XXX段地址冲突”的对话框。<br>2.计算机不能正常上网，出现网络中断的症状。&#x3D;&#x3D;<br>因为这种攻击是利用ARP请求报文进行“欺骗”的，所以防火墙会误以为是正常的请求数据包，不予拦截。&#x3D;&#x3D;因此普通的防火墙很难抵挡这种攻击。&#x3D;&#x3D;</p><h4 id="44、欺骗攻击和他的攻击方式"><a href="#44、欺骗攻击和他的攻击方式" class="headerlink" title="44、欺骗攻击和他的攻击方式"></a>44、欺骗攻击和他的攻击方式</h4><p>网络欺骗的技术主要有：HONEYPOT和分布式HONEYPOT、欺骗空间技术等。主要方式有：IP欺骗、ARP欺骗、DNS欺骗、WEB欺骗、电子邮件欺骗、源路由欺骗（通过指定路由，以假冒身份与其他主机进行合法通信或者发送假报文，使受攻击主机出现错误动作）、地址欺骗（包括伪造原地址或者中间站点）等。</p><h4 id="45、嗅探"><a href="#45、嗅探" class="headerlink" title="45、嗅探"></a>45、嗅探</h4><p>嗅探计算机网络的共享通讯隧道的，支持每队通讯计算机独占通道的交换机&#x2F;集线器仍然过于昂贵，共享意味着计算机能够接收到发送给其他计算机的信息。</p><h4 id="46、跳板"><a href="#46、跳板" class="headerlink" title="46、跳板"></a>46、跳板</h4><p>一个具有辅助作用的机器，利用这个主机作为一个间接工具没控制其他主机，一般和肉鸡连用。</p><h4 id="47、权限"><a href="#47、权限" class="headerlink" title="47、权限"></a>47、权限</h4><p>字面意思</p><h4 id="48、IP地址"><a href="#48、IP地址" class="headerlink" title="48、IP地址"></a>48、IP地址</h4><p>字面意思</p><h4 id="49、RARP反向地址解析协议"><a href="#49、RARP反向地址解析协议" class="headerlink" title="49、RARP反向地址解析协议"></a>49、RARP反向地址解析协议</h4><p>此协议将硬件地址映射到网络地址</p><h4 id="50、UDP用户数据报协议"><a href="#50、UDP用户数据报协议" class="headerlink" title="50、UDP用户数据报协议"></a>50、UDP用户数据报协议</h4><p>参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。</p><h4 id="51、TCP协议"><a href="#51、TCP协议" class="headerlink" title="51、TCP协议"></a>51、TCP协议</h4><p>面向连接的、可靠的、基于字节流的传输层通信协议</p><h4 id="52、FTP文件传输协议"><a href="#52、FTP文件传输协议" class="headerlink" title="52、FTP文件传输协议"></a>52、FTP文件传输协议</h4><p>允许用户以文件操作的方式（文件的增、删、改、查、传送等）与另一主机相互通信</p><h4 id="53、SMTP简单邮件传送协议"><a href="#53、SMTP简单邮件传送协议" class="headerlink" title="53、SMTP简单邮件传送协议"></a>53、SMTP简单邮件传送协议</h4><p>简单邮件传送协议，SMTP协议为系统之间传送电子邮件。</p><h4 id="54、终端协议"><a href="#54、终端协议" class="headerlink" title="54、终端协议"></a>54、终端协议</h4><p>允许用户以虚终端方式访问远程主机</p><h4 id="55、HTTP"><a href="#55、HTTP" class="headerlink" title="55、HTTP"></a>55、HTTP</h4><p>超文本传输协议（）是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。</p><h4 id="56、HTTPS"><a href="#56、HTTPS" class="headerlink" title="56、HTTPS"></a>56、HTTPS</h4><p>略</p><h4 id="57、TFTP"><a href="#57、TFTP" class="headerlink" title="57、TFTP"></a>57、TFTP</h4><p>简单文件传输协议</p><h4 id="58、ICMP-协议"><a href="#58、ICMP-协议" class="headerlink" title="58、ICMP  协议"></a>58、ICMP  协议</h4><p>ICMP ( 全InterControlMessageProtocol，即Inter控制消息协议)用于在IP主机、路由器之间传递控制消息，包括网络通不通、主机是否可达、路由是否可用等网络本身的消息。例如，我们在检测网络通不通时常会使用Ping命令，Ping执行操作的过程就是ICMP协议工作的过程。&#x3D;&#x3D;“ICMP 协议”对于网络安全有着极其重要的意义,其本身的特性决定了它非常容易被用于攻击网络上的路由器和主机&#x3D;&#x3D;。例如，曾经轰动一时的海信主页被黑事件就是以ICMP攻击为主的。&#x3D;&#x3D;由于操作系统规定ICMP数据包最大尺寸不超过64KB，因而如果向目标主机发送超过64KB上限的数据包，该主机就会出现内存分配错误&#x3D;&#x3D;，进而导致系统耗费大量的资源处理，疲于奔命，最终瘫瘓、死机。</p><h4 id="59、dns协议"><a href="#59、dns协议" class="headerlink" title="59、dns协议"></a>59、dns协议</h4><p>DNS协议就是用来将域名解析到IP地址的一种协议，当然，也可以将IP地址转换为域名的一种协议。</p><h4 id="60、Root"><a href="#60、Root" class="headerlink" title="60、Root"></a>60、Root</h4><p>Unix里面最高权限的用户，也就是超级管理员</p><h4 id="61、-EXP-x2F-EXPLOIT"><a href="#61、-EXP-x2F-EXPLOIT" class="headerlink" title="61、 EXP&#x2F;EXPLOIT"></a>61、 EXP&#x2F;EXPLOIT</h4><p>漏洞利用代码，运行之后对目标进行攻击。</p><h4 id="62、POC-x2F-Proof-of-Concept"><a href="#62、POC-x2F-Proof-of-Concept" class="headerlink" title="62、POC&#x2F;Proof of Concept"></a>62、POC&#x2F;Proof of Concept</h4><p>漏洞验证代码，检测目标是否存在对应漏洞</p><h4 id="63、Playload"><a href="#63、Playload" class="headerlink" title="63、Playload"></a>63、Playload</h4><p>中文 ‘有效载荷’，指成功exploit之后，真正在目标系统执行的代码和指令</p><h4 id="64、shellcode"><a href="#64、shellcode" class="headerlink" title="64、shellcode"></a>64、shellcode</h4><p>由建立正向&#x2F;反向shell而得名</p><h4 id="65、软件加壳"><a href="#65、软件加壳" class="headerlink" title="65、软件加壳"></a>65、软件加壳</h4><p>“壳”是一段专门负责保护软件不被非法修改或反编译的程序。&#x3D;&#x3D;它们一般都实现于程序运行，拿到控制权，然后完成它们保护软件的任务&#x3D;&#x3D;。经过加壳的软件在跟踪时已看到其真实的十六进制代码，因此起到保护软件的作用。</p><h4 id="66、软件脱壳"><a href="#66、软件脱壳" class="headerlink" title="66、软件脱壳"></a>66、软件脱壳</h4><p>用相应的工具，把壳去掉。</p><h4 id="67、蠕虫病毒"><a href="#67、蠕虫病毒" class="headerlink" title="67、蠕虫病毒"></a>67、蠕虫病毒</h4><p>&#x3D;&#x3D;它利用了WINDOWS系统的开放性特点，特别是COM到COM+的组件编程思路，一个脚本程序能调用功能更大的组件来完成自己的功能。&#x3D;&#x3D;以VB脚本病毒为例，它们都是把VBS脚本文件加在附件中，使用*HTM, VBS等欺骗性的文件名。蠕虫病毒的主要特性有:自我复制能力、很强的传播性、潜伏性、特定的触发性、很大的破坏性。</p><h4 id="68、LAN"><a href="#68、LAN" class="headerlink" title="68、LAN"></a>68、LAN</h4><p>局域网 一种网络，连接近距离的计算机，一般位于单个房间、建筑物或小的地理区域里。LAN上的所有系统位于一个网络跳之间。</p><h4 id="69、Proxy"><a href="#69、Proxy" class="headerlink" title="69、Proxy"></a>69、Proxy</h4><p>代理。一类程序或系统，连接来自客户机计算的流量，并代表客户与服务器交互。代理能用于过滤应用级别的制定类型的流量或缓存信息以提高性能。&#x3D;&#x3D;许多防火墙依赖代理进行过滤&#x3D;&#x3D;。 </p><h4 id="70、HTML"><a href="#70、HTML" class="headerlink" title="70、HTML"></a>70、HTML</h4><p>网页代码    超文本</p><h4 id="71、css"><a href="#71、css" class="headerlink" title="71、css"></a>71、css</h4><h4 id="72、js"><a href="#72、js" class="headerlink" title="72、js"></a>72、js</h4><h4 id="73、CMS"><a href="#73、CMS" class="headerlink" title="73、CMS"></a>73、CMS</h4><p>内容管理系统</p><h4 id="74、独立服务器"><a href="#74、独立服务器" class="headerlink" title="74、独立服务器"></a>74、独立服务器</h4><p>独立服务器整体硬件都是独立的，功能强大的，特别是CPU。使用真实存在的服务器就像拥有自己的房子，没有人打扰，可以自由部署东西。</p><h4 id="75、vps"><a href="#75、vps" class="headerlink" title="75、vps"></a>75、vps</h4><p>VPS主机是一项服务器虚拟化和自动化技术，它采用的是操作系统虚拟化技术。操作&#x3D;&#x3D;系统虚拟化的概念是基于共用操作系统内核,这样虛拟服务器就无需额外的虛拟化内核的过程，因而虚拟过程资源损耗就更低&#x3D;&#x3D;，从而可以在一台物理服务器上实现更多的虚拟化服务器。这些VPS主机以最大化的效率共享硬件、软件许可证以及管理资源。每一个VPS主机均可独立进行重启，并拥有自己的root访.<br>问权限、用户、IP地址、内存、过程、文件、应用程序、系统函数库以及配置文件。</p><h4 id="76、域名"><a href="#76、域名" class="headerlink" title="76、域名"></a>76、域名</h4><h4 id="77、CTF"><a href="#77、CTF" class="headerlink" title="77、CTF"></a>77、CTF</h4><h4 id="78、awd攻防对抗赛"><a href="#78、awd攻防对抗赛" class="headerlink" title="78、awd攻防对抗赛"></a>78、awd攻防对抗赛</h4><h4 id="79、cve"><a href="#79、cve" class="headerlink" title="79、cve"></a>79、cve</h4><p>通用漏洞披露</p><h4 id="80、CNVD"><a href="#80、CNVD" class="headerlink" title="80、CNVD"></a>80、CNVD</h4><p>国家信息安全漏洞共享平台，简称CNVD,国家计算机网络应急技术处理协调中心联合建立的信息安全漏洞信息共享知识库。主要目标提升我国在安全漏洞方面的整体研究水平和及时预防能力，带动国内相关安全产品的发展。</p><h4 id="81、-0day"><a href="#81、-0day" class="headerlink" title="81、 0day"></a>81、 0day</h4><p> 0day漏洞是负责应用程序的程序员或供应商所未知的软件缺陷。因为该漏洞未知，所以没有可用的补丁程序。</p><h4 id="82、1day"><a href="#82、1day" class="headerlink" title="82、1day"></a>82、1day</h4><p>刚发布的  但是已被官方发布补丁</p><h4 id="83、Nday"><a href="#83、Nday" class="headerlink" title="83、Nday"></a>83、Nday</h4><p>已被公布的Nday</p><h4 id="84、APT攻击"><a href="#84、APT攻击" class="headerlink" title="84、APT攻击"></a>84、APT攻击</h4><p>Advanced Persistent Threat,高级可持续性攻击，是指组织(特别是政府)或者小团体利用先进的攻击手段对特定目标进行长期持续性网络攻击的供给形式(极强的隐蔽性、潜伏期长，持续性强、目标性强)</p><h4 id="85、渗透测试"><a href="#85、渗透测试" class="headerlink" title="85、渗透测试"></a>85、渗透测试</h4><p>黑盒测试、白盒测试、灰盒测试</p><h4 id="86、暗网"><a href="#86、暗网" class="headerlink" title="86、暗网"></a>86、暗网</h4><p>“暗网”是指隐藏的网络，普通网民无法通过常规手段搜索访问，需要使用一些特定的软件、配置或者授权等才能登录。&#x3D;&#x3D;一般用tor洋葱浏览器进入。暗网是利用加密传输、P2P 对等网络、多点中继混淆等&#x3D;&#x3D;，为用户提供匿名的互联网信息访问的一类技术手段，其最突出的特点就是匿名性。</p><h4 id="87、恶意软件"><a href="#87、恶意软件" class="headerlink" title="87、恶意软件"></a>87、恶意软件</h4><p>非授权控制计算机或者窃取计算机数据等多种恶意行为的程序</p><h4 id="88、间谍软件"><a href="#88、间谍软件" class="headerlink" title="88、间谍软件"></a>88、间谍软件</h4><p>一般能够在用户不知情的情况下，在其电脑、手机上安装后门，&#x3D;&#x3D;具备收集用户信息。监听和偷拍等功能的软件&#x3D;&#x3D;</p><h4 id="89、洪水攻击"><a href="#89、洪水攻击" class="headerlink" title="89、洪水攻击"></a>89、洪水攻击</h4><p>是黑客比较常用的一种攻击技术，特点是实施简单，威力巨大，大多是无视防御<br>的。从定义上说，攻击者对网络资源发送过量数据时就发生了洪水攻击，这个网络资源可以是router, switch, host, application等。洪水攻击将攻击流量比作成洪水，只要攻击流量足够大，就可以将防御手段打穿。DDoS 攻击便是洪水攻击的一种。</p><h4 id="90、SYN攻击"><a href="#90、SYN攻击" class="headerlink" title="90、SYN攻击"></a>90、SYN攻击</h4><p>利用操作系统TCP协议设计上的问题执行的拒绝服务攻击，涉及TCP建立连接的三次握手设计。</p><h4 id="91、DOS攻击"><a href="#91、DOS攻击" class="headerlink" title="91、DOS攻击"></a>91、DOS攻击</h4><p>拒绝服务攻击。攻击者通过利用漏洞或发送大量请求导致对象无法访问网络或者网站无法被访问。</p><h4 id="92-DDoS"><a href="#92-DDoS" class="headerlink" title="92.DDoS"></a>92.DDoS</h4><p>&#x3D;&#x3D;分布式DOS攻击，常见的UDP、SYN、反射放大攻击等等，就是通过许多台肉鸡一起向你发送一些网络请求信息&#x3D;&#x3D;，导致网络堵塞不能上网。</p><h4 id="93、抓鸡"><a href="#93、抓鸡" class="headerlink" title="93、抓鸡"></a>93、抓鸡</h4><p> 即设法控制电脑</p><h4 id="94、端口扫描"><a href="#94、端口扫描" class="headerlink" title="94、端口扫描"></a>94、端口扫描</h4><p>端口扫描是指发送一组端口扫描信息，通过它了解从哪里可探寻到攻击弱点，并了解其提供的计算机网络服务类型</p><h4 id="95、反弹窗口"><a href="#95、反弹窗口" class="headerlink" title="95、反弹窗口"></a>95、反弹窗口</h4><p>有人发现，防护墙对于连入的连接往往会进行非常严格的过滤但是对于连出的连接却疏于防范。于是，利用这一特性，反弹端口型软件的服务器（被控制端）会主动连接客户端（控制端），就给人“被控制端主动来连接控制端的假象，让人麻痹大意”</p><h4 id="96、鱼叉攻击"><a href="#96、鱼叉攻击" class="headerlink" title="96、鱼叉攻击"></a>96、鱼叉攻击</h4><p>与撒网式钓鱼不同，该攻击具有针对性</p><h4 id="97-钓鲸攻击"><a href="#97-钓鲸攻击" class="headerlink" title="97.钓鲸攻击"></a>97.钓鲸攻击</h4><p>对高级管理人员进行网络钓鱼攻击</p><h4 id="98、水坑攻击"><a href="#98、水坑攻击" class="headerlink" title="98、水坑攻击"></a>98、水坑攻击</h4><p>在受害者额必经之路上设置一个水坑</p><h4 id="99、c2"><a href="#99、c2" class="headerlink" title="99、c2"></a>99、c2</h4><p>常用语apt攻击场景中。作动词解释时理解为恶意软件和攻击者进行交互，作名词解释时理解为攻击者的“基础设施”</p><h4 id="100、供应链攻击"><a href="#100、供应链攻击" class="headerlink" title="100、供应链攻击"></a>100、供应链攻击</h4><p>是黑客攻击目标机构的合作伙伴，并以该合作伙为跳板，达到渗透目标用户的目的。一种常见的表现形式为，用户对厂商产品的信任，&#x3D;&#x3D;在厂商产品下载安装或者更新时进行恶意软件植入进行攻击。&#x3D;&#x3D;所以，在某些软件下载平台下载的时候，若遭遇捆绑软件，就得小心了!</p><h4 id="101、渗透"><a href="#101、渗透" class="headerlink" title="101、渗透"></a>101、渗透</h4><p>通过扫描检测你的网络设备及系统有没有安全漏洞，有的话就可能被入侵，就像一滴水透过一块有漏洞的木板</p><h4 id="102、横移"><a href="#102、横移" class="headerlink" title="102、横移"></a>102、横移</h4><p>指攻击者入侵后，从立足点在内部网络进行拓展，搜寻更多的系统。</p><h4 id="103、暗链"><a href="#103、暗链" class="headerlink" title="103、暗链"></a>103、暗链</h4><p>看不见的网络链接，“暗链”在网站中的链接做得非常隐蔽，短时间内不易被搜索引擎察觉</p><h4 id="104、暴库"><a href="#104、暴库" class="headerlink" title="104、暴库"></a>104、暴库</h4><p>入侵网站的一种方法，通过恶意代码让网站爆出一些敏感数据来</p><h4 id="105、薅羊毛"><a href="#105、薅羊毛" class="headerlink" title="105、薅羊毛"></a>105、薅羊毛</h4><h4 id="106、商业电子邮件攻击（BEC）"><a href="#106、商业电子邮件攻击（BEC）" class="headerlink" title="106、商业电子邮件攻击（BEC）"></a>106、商业电子邮件攻击（BEC）</h4><p>也被称为“变脸诈骗”攻击，这是针对高层管理人员的攻击,攻击者通常冒充(盗用)决策者的邮件，来下达与资金、利益相关的指令;或者攻击者依赖社会工程学制作电子邮件，说服&#x2F;诱导高管短时间进行经济交易。</p><h4 id="107、电信诈骗"><a href="#107、电信诈骗" class="headerlink" title="107、电信诈骗"></a>107、电信诈骗</h4><h4 id="108、杀猪盘"><a href="#108、杀猪盘" class="headerlink" title="108、杀猪盘"></a>108、杀猪盘</h4><p>电信诈骗的一种</p><h4 id="109、黑产"><a href="#109、黑产" class="headerlink" title="109、黑产"></a>109、黑产</h4><p>网络非法交易产业</p><h4 id="110、黑帽黑客"><a href="#110、黑帽黑客" class="headerlink" title="110、黑帽黑客"></a>110、黑帽黑客</h4><h4 id="111、白帽黑客"><a href="#111、白帽黑客" class="headerlink" title="111、白帽黑客"></a>111、白帽黑客</h4><h4 id="112、红帽黑客"><a href="#112、红帽黑客" class="headerlink" title="112、红帽黑客"></a>112、红帽黑客</h4><h4 id="113、红队"><a href="#113、红队" class="headerlink" title="113、红队"></a>113、红队</h4><h4 id="114、蓝队"><a href="#114、蓝队" class="headerlink" title="114、蓝队"></a>114、蓝队</h4><h4 id="115、紫队"><a href="#115、紫队" class="headerlink" title="115、紫队"></a>115、紫队</h4><p>裁判</p><h4 id="116、加密机"><a href="#116、加密机" class="headerlink" title="116、加密机"></a>116、加密机</h4><h4 id="117、CA证书"><a href="#117、CA证书" class="headerlink" title="117、CA证书"></a>117、CA证书</h4><h4 id="118、SSL证书"><a href="#118、SSL证书" class="headerlink" title="118、SSL证书"></a>118、SSL证书</h4><h4 id="119、防火墙"><a href="#119、防火墙" class="headerlink" title="119、防火墙"></a>119、防火墙</h4><p>主要部署于不同网络或网络安全域之间的出口，通过监测、限制、更改跨越防火<br>墙的数据流，尽可能地对外部屏蔽网络内部的信息、结构和运行状况，有选择地<br>接受外部访问。</p><h4 id="120、IDS"><a href="#120、IDS" class="headerlink" title="120、IDS"></a>120、IDS</h4><p>入侵检测系统,用于在黑客发起进攻或是发起进攻之前检测到攻击,并加以拦截。IDS是不同于防火墙。防火墙只能屏蔽入侵，而DS却可以在入侵发生以前，通过一些信息来检测到即将发生的攻击或是入侵并作出反应。</p><h4 id="121、NIDS"><a href="#121、NIDS" class="headerlink" title="121、NIDS"></a>121、NIDS</h4><p>是Network Intrusion Detection System的缩写，即网络入侵检测系统，主要用于<br>检测Hacker或Cracker通过网络进行的入侵行为。&#x3D;&#x3D;NIDS的运行方式有两种，一种是在目标主机上运行以监测其本身的通信信息，另一种是在一台单独的机器上运行以监测所有网络设备的通信信息，比如Hub、路由器。&#x3D;&#x3D;</p><h4 id="122、IPS"><a href="#122、IPS" class="headerlink" title="122、IPS"></a>122、IPS</h4><p>入侵防御系统，目的在于及时识破攻击程序或有害代码及其克隆和变种，采取预防措施，先期组织入侵，防患于未然。</p><h4 id="123、杀毒软件"><a href="#123、杀毒软件" class="headerlink" title="123、杀毒软件"></a>123、杀毒软件</h4><h4 id="124-、反病毒引擎"><a href="#124-、反病毒引擎" class="headerlink" title="124 、反病毒引擎"></a>124 、反病毒引擎</h4><h4 id="125、防毒墙"><a href="#125、防毒墙" class="headerlink" title="125、防毒墙"></a>125、防毒墙</h4><h4 id="126、告警"><a href="#126、告警" class="headerlink" title="126、告警"></a>126、告警</h4><h4 id="127、误报"><a href="#127、误报" class="headerlink" title="127、误报"></a>127、误报</h4><h4 id="128、漏报"><a href="#128、漏报" class="headerlink" title="128、漏报"></a>128、漏报</h4><h4 id="129、NAC"><a href="#129、NAC" class="headerlink" title="129、NAC"></a>129、NAC</h4><p>网络转入控制</p><h4 id="130、漏扫"><a href="#130、漏扫" class="headerlink" title="130、漏扫"></a>130、漏扫</h4><p>即漏洞扫描，指基于漏洞数据库，通过扫描等手段对指定的远程或者本地计算机<br>系统的安全脆弱性进行检测，发现可利用漏洞的一种安全检测(渗透攻击)行为。</p><h4 id="131、UTM"><a href="#131、UTM" class="headerlink" title="131、UTM"></a>131、UTM</h4><p>即Unified Threat Management，中文名为统一威胁管理，最早由IDC于2014年提出，即将不同设备的安全能力(最早包括入侵检测、防火墙和反病毒技术)，集中在同一网关上，实现统一管理和运维。</p><h4 id="132、网闸"><a href="#132、网闸" class="headerlink" title="132、网闸"></a>132、网闸</h4><h4 id="133、堡垒机"><a href="#133、堡垒机" class="headerlink" title="133、堡垒机"></a>133、堡垒机</h4><p>运用各种技术手段监控和记录运维人员对网络内的服务器、网络设备。安全设备、数据库等设备的操作行为，以便集中报警，及时处理及审计定责。</p><h4 id="134、数据库审计"><a href="#134、数据库审计" class="headerlink" title="134、数据库审计"></a>134、数据库审计</h4><p>能够实时记录网络.上的数据库活动，对数据库操作进行细粒度审计的合规性管<br>理，对数据库遭受到的风险行为进行告警，对攻击行为进行阻断。它通过对用户访问数据库行为的记录、分析和汇报，用来帮助用户事后生成合规报告、事故追根溯源，同时加强内外部数据库网络行为记录，提高数据资产安全。</p><h4 id="135、DLP"><a href="#135、DLP" class="headerlink" title="135、DLP"></a>135、DLP</h4><p>数据防泄露，通过数字资产的精准识别和策略制定，主要用于防止企业的制定数据和信息资产以违反安全策略规定的形式流出企业。</p><h4 id="136、VPN"><a href="#136、VPN" class="headerlink" title="136、VPN"></a>136、VPN</h4><p>虚拟专用网，在公用网络上建立专用网络，进行加密通讯，通过对数据包的加密和数据包目标地址的转换实现远程访问。</p><h4 id="137、SD-WAN"><a href="#137、SD-WAN" class="headerlink" title="137、SD-WAN"></a>137、SD-WAN</h4><h4 id="138、路由器"><a href="#138、路由器" class="headerlink" title="138、路由器"></a>138、路由器</h4><h4 id="139、网关"><a href="#139、网关" class="headerlink" title="139、网关"></a>139、网关</h4><h4 id="140、WAF"><a href="#140、WAF" class="headerlink" title="140、WAF"></a>140、WAF</h4><p>web应用防火墙</p><h4 id="141、SOC"><a href="#141、SOC" class="headerlink" title="141、SOC"></a>141、SOC</h4><p>安全运行中心</p><h4 id="142、LAS"><a href="#142、LAS" class="headerlink" title="142、LAS"></a>142、LAS</h4><p>日志审计系统，主要功能是提供日志的收集、检索和分析能力，可为威胁检测提供丰富的上下文。</p><h4 id="143、NOC"><a href="#143、NOC" class="headerlink" title="143、NOC"></a>143、NOC</h4><p>网络操作中心</p><h4 id="144、siem"><a href="#144、siem" class="headerlink" title="144、siem"></a>144、siem</h4><h4 id="145、上网行为管理"><a href="#145、上网行为管理" class="headerlink" title="145、上网行为管理"></a>145、上网行为管理</h4><h4 id="146、蜜罐"><a href="#146、蜜罐" class="headerlink" title="146、蜜罐"></a>146、蜜罐</h4><h4 id="147、沙箱"><a href="#147、沙箱" class="headerlink" title="147、沙箱"></a>147、沙箱</h4><p>用来执行非可信的程序</p><h4 id="148、沙箱逃逸"><a href="#148、沙箱逃逸" class="headerlink" title="148、沙箱逃逸"></a>148、沙箱逃逸</h4><h4 id="149、网络靶场"><a href="#149、网络靶场" class="headerlink" title="149、网络靶场"></a>149、网络靶场</h4><h4 id="150、加密技术"><a href="#150、加密技术" class="headerlink" title="150、加密技术"></a>150、加密技术</h4><h4 id="151、黑名单"><a href="#151、黑名单" class="headerlink" title="151、黑名单"></a>151、黑名单</h4><h4 id="152、白名单"><a href="#152、白名单" class="headerlink" title="152、白名单"></a>152、白名单</h4><h4 id="153、-边界防御"><a href="#153、-边界防御" class="headerlink" title="153、 边界防御"></a>153、 边界防御</h4><h4 id="154、-南北向流量"><a href="#154、-南北向流量" class="headerlink" title="154、 南北向流量"></a>154、 南北向流量</h4><p>数据中心内部通信产生的流量</p><h4 id="155、-东西流量"><a href="#155、-东西流量" class="headerlink" title="155、 东西流量"></a>155、 东西流量</h4><p>数据中心内部不同主机之间相互通信所产生的流量</p><h4 id="156、规则库"><a href="#156、规则库" class="headerlink" title="156、规则库"></a>156、规则库</h4><h4 id="157、下一代"><a href="#157、下一代" class="headerlink" title="157、下一代"></a>157、下一代</h4><p>表示产品和技术的大创新</p><h4 id="158、大数据安全分析"><a href="#158、大数据安全分析" class="headerlink" title="158、大数据安全分析"></a>158、大数据安全分析</h4><h4 id="159、EPP"><a href="#159、EPP" class="headerlink" title="159、EPP"></a>159、EPP</h4><h4 id="160、EDR"><a href="#160、EDR" class="headerlink" title="160、EDR"></a>160、EDR</h4><h4 id="161、NDR"><a href="#161、NDR" class="headerlink" title="161、NDR"></a>161、NDR</h4><h4 id="162、安全可视化"><a href="#162、安全可视化" class="headerlink" title="162、安全可视化"></a>162、安全可视化</h4><h4 id="163、NTA"><a href="#163、NTA" class="headerlink" title="163、NTA"></a>163、NTA</h4><h4 id="164、MDR"><a href="#164、MDR" class="headerlink" title="164、MDR"></a>164、MDR</h4><h4 id="165、-应急响应"><a href="#165、-应急响应" class="headerlink" title="165、 应急响应"></a>165、 应急响应</h4><h4 id="166、XDR"><a href="#166、XDR" class="headerlink" title="166、XDR"></a>166、XDR</h4><h4 id="167、-安全运营"><a href="#167、-安全运营" class="headerlink" title="167、 安全运营"></a>167、 安全运营</h4><h4 id="168、威胁情报"><a href="#168、威胁情报" class="headerlink" title="168、威胁情报"></a>168、威胁情报</h4><h4 id="169、TTP"><a href="#169、TTP" class="headerlink" title="169、TTP"></a>169、TTP</h4><h4 id="170、IOC"><a href="#170、IOC" class="headerlink" title="170、IOC"></a>170、IOC</h4><h4 id="171、上下文"><a href="#171、上下文" class="headerlink" title="171、上下文"></a>171、上下文</h4><h4 id="172、STIX"><a href="#172、STIX" class="headerlink" title="172、STIX"></a>172、STIX</h4><h4 id="173、杀伤链"><a href="#173、杀伤链" class="headerlink" title="173、杀伤链"></a>173、杀伤链</h4><h4 id="174、ATT-amp-CK"><a href="#174、ATT-amp-CK" class="headerlink" title="174、ATT&amp;CK"></a>174、ATT&amp;CK</h4><h4 id="175、钻石模型"><a href="#175、钻石模型" class="headerlink" title="175、钻石模型"></a>175、钻石模型</h4><h4 id="176、关联分析"><a href="#176、关联分析" class="headerlink" title="176、关联分析"></a>176、关联分析</h4>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql基础</title>
    <link href="/2022/08/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/08/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql基础"><a href="#mysql基础" class="headerlink" title="mysql基础"></a>mysql基础</h1><h2 id="1-数据库的基本操作"><a href="#1-数据库的基本操作" class="headerlink" title="1.  数据库的基本操作"></a>1.  数据库的基本操作</h2><p><strong>数据库操作语句一定要加上分号 否则会出现一直不执行的情况    一直出现-&gt;符号</strong></p><h3 id="1-1-MYSQL登录与退出"><a href="#1-1-MYSQL登录与退出" class="headerlink" title="1.1.  MYSQL登录与退出"></a>1.1.  MYSQL登录与退出</h3><p>D:\phpStudy\MySQL\bin</p><p>输入 mysql -uroot -p -P3306 -h127.0.0.1</p><p>退出的三种方法</p><p>mysql &gt; exit;</p><p>mysql &gt; quit;</p><p>mysql &gt; \q;</p><h3 id="1-2-MYSQL数据库的一些解释"><a href="#1-2-MYSQL数据库的一些解释" class="headerlink" title="1.2.  MYSQL数据库的一些解释"></a>1.2.  MYSQL数据库的一些解释</h3><p>注意：数据库就相当于文件夹</p><p>   表就相当于文件</p><p>​     </p><h3 id="1-3-mysql注释符有三种："><a href="#1-3-mysql注释符有三种：" class="headerlink" title="1.3.  mysql注释符有三种："></a>1.3.  mysql注释符有三种：</h3><p>​    1、#…</p><p>​    2、”– …”</p><p>​    3、&#x2F;<em>…</em>&#x2F;</p><p>​     </p><h2 id="2-数据库的一些基本操作"><a href="#2-数据库的一些基本操作" class="headerlink" title="2.  数据库的一些基本操作"></a>2.  数据库的一些基本操作</h2><h3 id="2-1-数据库的增删改查-sql语句"><a href="#2-1-数据库的增删改查-sql语句" class="headerlink" title="2.1.  数据库的增删改查(sql语句)"></a>2.1.  数据库的增删改查(sql语句)</h3><p>增：create database db1;</p><p>删：drop database db1;</p><p>改：alter database db1 charset utf8</p><p>查：show databases;#查看所有的数据库</p><p>show create database db1;</p><p>查看指定的数据库  </p><p>设置默认的utf8,在配置文件中：写上character_set_server &#x3D; utf8</p><p>use db2  </p><p>select database() #查看你当前在哪个文件夹</p><p>重命名数据库 RENAME database olddbname TO newdbname</p><p>show status; – 显示一些系统特定资源的信息，例如，正在运行的线程数量。</p><p>desc tabl_name; 显示表结构，字段类型，主键，是否为空等属性，但不显示外键。</p><p>show databases 查看这个mysql里面有多少个库</p><p>use mysql </p><p>use 选择数据库</p><p>show tables 查看当前库里面所有的表</p><p>mysql&gt; select password from user where user&#x3D;’root’;</p><p>Mysql 5.7 select authentication_string,user from mysql.user;</p><p>查看当前数据库 里面的表user 用户为root的密码</p><p>alter database 数据库名 character set utf8;</p><h2 id="3-table-表的操作"><a href="#3-table-表的操作" class="headerlink" title="3.  table 表的操作"></a>3.  table 表的操作</h2><h3 id="3-1-查看表结构"><a href="#3-1-查看表结构" class="headerlink" title="3.1.  查看表结构"></a>3.1.  查看表结构</h3><p>desc table</p><p>DESCRIBE 表名;</p><h2 id="3-2-查看表的内容"><a href="#3-2-查看表的内容" class="headerlink" title="3.2.  查看表的内容"></a>3.2.  查看表的内容</h2><p>select * from table_name</p><h3 id="3-3-建立表"><a href="#3-3-建立表" class="headerlink" title="3.3.  建立表"></a>3.3.  建立表</h3><p>CREATE TABLE 表名 (</p><p>​        属性名 数据类型 [完整约束条件],</p><p>​        属性名 数据类型 [完整约束条件],</p><p>​        …</p><p>​        …</p><p>​        属性名 数据类型 [完整约束条件]</p><p>​    );</p><p>​    </p><p>字段名就是属性名</p><p>完整的建立表的语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">create table <span class="hljs-title function_ invoke__">users</span>(id <span class="hljs-keyword">int</span>(<span class="hljs-number">7</span>) AUTO_INCREMENT,username <span class="hljs-title function_ invoke__">varchar</span>(<span class="hljs-number">100</span>) not <span class="hljs-literal">null</span>,<br>password <span class="hljs-title function_ invoke__">varchar</span>(<span class="hljs-number">100</span>) not <span class="hljs-literal">null</span>,PRIMARY <span class="hljs-title function_ invoke__">KEY</span>(id))ENGINE=InnoDB DEFAULT CHARSET=utf8;<br><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;if not exists表示当相同的表名存在时，则不执行此创建语句，避免语句执行错误&#x3D;&#x3D;</p><p>​    </p><p>create database if not exists [table];   </p><p>ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</p><p>&#x3D;&#x3D;ENGINE 设置表的引擎 和默认的字符类型&#x3D;&#x3D;</p><p>​    </p><p>常见的数据库引擎 </p><p>​    </p><p>InnoDB myisam </p><p>​    </p><p>数据类型 </p><p><a href="https://www.cnblogs.com/-xlp/p/8617760.html">https://www.cnblogs.com/-xlp/p/8617760.html</a></p><p>​    </p><h3 id="3-4-约束条件"><a href="#3-4-约束条件" class="headerlink" title="3.4.  约束条件"></a>3.4.  约束条件</h3><p>PRIMARY KEY 标识该属性为该表的主键，可以唯一的标识对应的元组</p><p>FOREIGN KEY 标识该属性为该表的外键，是与之联系某表的主键</p><p>NOT NULL 标识该属性不能为空</p><p>​        UNIQUE 标识该属性的值是唯一的</p><p>​        AUTO_INCREMENT   标识该属性的值是自动增加，这是MySQL的SQL语句的特色</p><p>​        DEFAULT   为该属性设置默认值</p><p>​    </p><h3 id="3-5-修改表的操作"><a href="#3-5-修改表的操作" class="headerlink" title="3.5.  修改表的操作"></a>3.5.  修改表的操作</h3><p>修改表</p><p>​    </p><p>格式：ALTER TABLE 旧表名 RENAME 新表名;</p><p>​    </p><p>修改字段的数据类型</p><p>​    </p><p>​        ALTER TABLE 表名 MODIFY 属性名 数据类型;</p><p>修改字段名：</p><p>​    </p><p>​        ALTER TABLE 表名 CHANGE 旧属性名 新属性名 新数据类型;</p><p>​    </p><p>增加字段名</p><p>​    </p><p>​        ALTER TABLE 表名 ADD 属性名1 数据类型 [完整性约束条件] [FIRST | AFTER 属性名2];</p><p>​    </p><p>删除字段</p><p>​    </p><p>​        ALTER TABLE 表名 DROP 属性名;</p><p>更改表的存储引擎</p><p>​    </p><p>​        格式：ALTER TABLE 表名 ENGINE &#x3D; 存储引擎名; </p><h2 id="4-数据的增删改查"><a href="#4-数据的增删改查" class="headerlink" title="4.  数据的增删改查"></a>4.  数据的增删改查</h2><p>为表中所有字段添加数据</p><p>语法：INSERT INTO 表名（字段名1，字段名2，…）VALUES（值1，值2，…）；</p><p>mysql&gt; insert into users (id,username,password)values(1,’moon’,’123456’);</p><h3 id="4-1-增"><a href="#4-1-增" class="headerlink" title="4.1.  增"></a>4.1.  增</h3><p>语法：INSERT INTO 表名 VALUES(值11，值2，…）；</p><p>mysql&gt; insert into users values(null,’test’,’123456’);</p><p>语法：INSERT INTO 表名（字段1，字段2，…）VALUES(值1，值2，…）</p><p>语法：INSERT INTO 表名 SET 字段名1&#x3D;值1[,字段名2&#x3D;值2，…]</p><p>举例：INSERT INTO student SET id&#x3D;4，name&#x3D;’zhaoliu’,grade&#x3D;72;</p><p>同时添加多条数据</p><p>语法：INSERT INTO 表名[(字段名1，字段名2，…)]VALUES （值1，值2，…），（值1，值2，…），</p><p>mysql&gt; insert into users (id,username,password)values(null,’moon’,’123456’),(null,’alex’,’123456’);</p><p>：INSERT INTO 表名[(字段名1，字段名2，…)]VALUES （值1，值2，…），（值1，值2，…），（值1，值2，…）</p><p>mysql&gt; insert into users values(null,’moon1’,’123456’),(null,’alex1’,’123456’);</p><h3 id="4-2-删"><a href="#4-2-删" class="headerlink" title="4.2.  删"></a>4.2.  删</h3><p>DELETE FROM 表名 [WHERE 条件表达式</p><p>delete from users where id&#x3D;1;</p><p>删除全部数据</p><p>若 DELETE 语句中没有使用WHERE语句，则会将表中所有记录都删除。</p><p>DELETE FROM 表名</p><p>删除全部数据的另一种方法——TRUNCATE</p><h3 id="4-3-更新"><a href="#4-3-更新" class="headerlink" title="4.3.  更新"></a>4.3.  更新</h3><p><code>语法：UPDATE 表名 SET 字段名1=值1，[ ，字段名2=值2，…][ WHERE 条件表达式 ]</code></p><p>update users set password&#x3D;’aaaa’ where id&#x3D;1;</p><p>update users set password&#x3D;’123456’,username&#x3D;’moon’ where id&#x3D;1</p><p>update users set password&#x3D;456789;</p><h3 id="4-4-查"><a href="#4-4-查" class="headerlink" title="4.4.  查"></a>4.4.  查</h3><p>select * from users;</p><p>星号代表所有的字段</p><p>查询指定的字段</p><p>select username,password from users;</p><p>按条件调节查询</p><p>按关系来查询</p><p>语法：SELECT 字段名1，字段名2，…FROM 表名WHERE 条件表达式</p><p>in 查询</p><p>SELECT * FROM student2 WHERE id IN （1,2,3）；</p><p>带 BETWEEN AND 关键字的查询</p><p>select * from users where id not between 1 and 10;</p><p> as  表示别名</p><p>比如：</p><p>select username as name from users ;</p><p>带 DISTINCT 关键字的查询</p><p> 取出不一样的值，相同的值不重复取用</p><p>select distinct username from users</p><p>like查询 一般都会给跟着%</p><p>select * from users where username like “%m%” ;</p><p> m字母左右边的都匹配</p><p>%在左边就匹配m左边的 %在右边就匹配m右边的</p><p>下划线 _ 匹配一个字符</p><p>select* from users where username like “moo_”</p><p>and查询</p><p>满足多个条件</p><p> select * from users where id&#x3D;1 and username&#x3D;’moon’;</p><p>or查询</p><p>满足任意一个条件</p><p>select * from users where id&#x3D;1 or username&#x3D;’moon’;</p><p>OR 和 AND 一起使用的情况</p><p>&#x3D;&#x3D;OR 和 AND 一起使用的时候，AND 的优先级高于 OR，因此二者一起使用时，会先运算 AND 两边的表达式，再运算 OR 两边的表达式。&#x3D;&#x3D;</p><p>mysql&gt; select * from users where id &gt;5 and password&#x3D;’123456c’ or username&#x3D;’moon1’;</p><p>聚合查询</p><p>count 返回行数</p><p>select count(*) from users;</p><p>select count(id) from users;</p><p>COUNT() 返回某列的行数</p><p>SUM() 返回某列值的和</p><p>AVG() 返回某列的平均值</p><p>MAX() 返回某列的最大值</p><p>MIN() 返回某列的最小值</p><p>分组查询</p><p>如果报错请在 my.ini添加 </p><p>sql_mode&#x3D;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</p><p>GROUP BY</p><p>mysql&gt; SELECT * FROM users GROUP BY password;</p><p>+—-+———-+———-+</p><p>| id | username | password |</p><p>+—-+———-+———-+</p><p>| 3 | moon1  | 123456  |</p><p>| 1 | moon   | 456789  |</p><p>+—-+———-+———-+</p><p>2 rows in set (0.01 sec)</p><p>mysql&gt; SELECT * FROM users GROUP BY username;</p><p>+—-+———-+———-+</p><p>| id | username | password |</p><p>+—-+———-+———-+</p><p>| 2 | alex1  | 456789  |</p><p>| 1 | moon   | 456789  |</p><p>| 3 | moon1  | 123456  |</p><p>+—-+———-+———-+</p><p>3 rows in set (0.01 sec)</p><p>使用 LIMIT 限制查询结果的数量</p><p>select * from users limit 2,10;</p><p>select * from users as u where u.id&#x3D;1;</p><p>为表和字段取别名</p><p>select username as myname from users;</p><p>mysql的子查询</p><p>where型子查询</p><p>  （把内层查询结果当作外层查询的比较条件）  </p><p>​         select * from users where id in (select id from users where id&gt;10);</p><p>​         </p><p>​         </p><p>​                    </p><p>from型子查询 </p><p>​    (把内层的查询结果供外层再次查询)                 </p><p>​        select * from (select username,age from users) as agev_a where age&gt;20   </p><p>​        select * from (select * from users where id&gt;&#x3D;10) as age_10; </p><p>​            (select * from users where id&gt;&#x3D;10)查询出来的是一个集合 别名为age_10</p><p>​            select * from age_10</p><p>​            </p><p>exists型子查询</p><p>​    （把外层查询结果拿到内层，看内层的查询是否成立）</p><p>1</p><p>0</p><p>select * from users where EXISTS (select * from users where id&gt;1)</p><p>联合查询（两个表的查询）</p><p>注释：默认地，UNION 操作符选取不同的值。如果允许重复的值，请使用 UNION ALL。</p><p>当 ALL 随 UNION 一起使用时（即 UNION ALL），不消除重复行</p><p>UNION ALL 查询全部 而且不会消除重复的行</p><p>union </p><p>SQL UNION ALL 语法</p><p>union的用法及注意事项</p><p>​    两次查询的列数必须一致</p><p>​     select * from users union select *,1 from news;</p><p>CREATE TABLE <code>news</code> (</p><p> <code>id</code> int(11) NOT NULL AUTO_INCREMENT,</p><p> <code>title</code> varchar(255) not NULL,</p><p> <code>content</code> varchar(255) not null,</p><p> PRIMARY KEY (<code>id</code>)</p><p>) ENGINE&#x3D;MyISAM AUTO_INCREMENT&#x3D;0 DEFAULT CHARSET&#x3D;utf8; </p><p>insert into news (title,content)values(‘a1’,’a1’);</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP基础</title>
    <link href="/2022/08/09/PHP%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/08/09/PHP%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP基础"><a href="#PHP基础" class="headerlink" title="PHP基础"></a>PHP基础</h1><h2 id="1-PHP简述"><a href="#1-PHP简述" class="headerlink" title="1.  PHP简述"></a>1.  PHP简述</h2><p>PHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言。</p><p>在一个php文件中可以包括以下内容：</p><ul><li><p>PHP 文件可包含文本、HTML、JavaScript代码和 PHP 代码</p></li><li><p>PHP 代码在服务器上执行，结果以纯 HTML 形式返回给浏览器</p></li><li><p>PHP 文件的默认文件扩展名是 “.php”</p></li></ul><p>php的使用：</p><ol><li><p>PHP 可以生成动态页面内容</p></li><li><p>PHP 可以创建、打开、读取、写入、关闭服务器上的文件</p></li><li><p>PHP 可以收集表单数据</p></li><li><p>PHP 可以发送和接收 cookies</p></li><li><p>PHP 可以添加、删除、修改您的数据库中的数据</p></li><li><p>PHP 可以限制用户访问您的网站上的一些页面</p></li><li><p>PHP 可以加密数据</p></li></ol><h2 id="2-基本语法格式"><a href="#2-基本语法格式" class="headerlink" title="2.  基本语法格式"></a>2.  基本语法格式</h2><p>PHP 脚本以 <?php 开始，以 ?> 结束</p><?php//php脚本的基本格式/* \* 多行注释，跟java的注释方法相同 \* */**变量的命名**变量以 $ 符号开始，后面跟着变量的名称变量名必须以字母或者下划线字符开始变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）变量名不能包含空格//php的变量声明是以$开始的$num = 3.14;$str = "hello"; static的关键字的使用 \* 当一个函数完成时，它的所有变量通常都会被删除。 \* 然而，有时候您希望某个局部变量不要被删除。 \* 要做到这一点，请在您第一次声明变量时使用 static 关键字： <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>  <span class="hljs-built_in">static</span> <span class="hljs-variable">$n</span>=<span class="hljs-number">0</span>;<br><br>  <span class="hljs-variable">$n</span>++;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;调用了一次&quot;</span>.<span class="hljs-variable">$n</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><br>&#125;<br><br><span class="hljs-title function_ invoke__">test</span>();<span class="hljs-title function_ invoke__">test</span>();<span class="hljs-title function_ invoke__">test</span>();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table> ## 3.  数据类型、常量以及字符串php有5种数据类型：String（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值）。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;字符串类型&quot;</span>;<br><br><span class="hljs-variable">$b</span> = <span class="hljs-number">1234</span>;<span class="hljs-comment">//整形</span><br><br><span class="hljs-variable">$c</span> = -<span class="hljs-number">3.1415</span>;<span class="hljs-comment">//浮点型</span><br><br><span class="hljs-variable">$d</span> = <span class="hljs-number">8E-3</span>;<br><br><span class="hljs-variable">$e</span> = <span class="hljs-literal">true</span>;<span class="hljs-comment">//boolean类型</span><br><br><span class="hljs-variable">$f</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>);<span class="hljs-comment">//数组类型</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">obj</span></span>&#123;<span class="hljs-comment">//php对象的声明</span><br><br>  <span class="hljs-keyword">var</span> <span class="hljs-variable">$num</span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">name</span>(<span class="hljs-params"></span>) </span>&#123; &#125;<br><br>&#125;<br><br><span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">obj</span>();<span class="hljs-comment">//对象实例化类型</span><br><br><span class="hljs-variable">$g</span> = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//NULL</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>);<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$b</span>);<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$c</span>);<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$d</span>);<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$e</span>);<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$f</span>);<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$o</span>);<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$g</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>常量：常量是一个简单值的标识符。该值在脚本中不能改变。（在整个脚本中都能使用）一个常量由英文字母、下划线、和数字组成,但数字不能作为首字母出现。 (常量名不需要加 $ 修饰符)。设置常量，使用 define() 函数，函数语法如下： <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">bool</span> <span class="hljs-title function_ invoke__">define</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span> , <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$value</span> [, <span class="hljs-keyword">bool</span> <span class="hljs-variable">$case_insensitive</span> = <span class="hljs-literal">false</span> ] )<br></code></pre></td></tr></table></figure>　　该函数有三个参数:name：必选参数，常量名称，即标志符。value：必选参数，常量的值。case_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><br><span class="hljs-comment">// 常量</span><br><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;CL&quot;</span>, <span class="hljs-string">&quot;这是一个全局常量&quot;</span>, <span class="hljs-literal">true</span>);<br><br><span class="hljs-keyword">echo</span> CL; <span class="hljs-comment">// 默认false，变量名区分大小写</span><br><br><span class="hljs-keyword">echo</span> cl; <span class="hljs-comment">// true不区分大小写</span><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>**预定义常量**PHP预定义了许多常量，这些常量无需使用define()函数定义，可直接在程序中使用。下面列举了一些常用的PHP预定义常量。 （1）`__FILE__`(FILE前后分别是两个下画线)：当前正在处理的脚本文件名，若使用在一个被引用的文件中（include或require），那么它的值就是被引用的文件，而不是引用它的那个文件。 （2）`__LINE__`(LINE前后分别是两个下画线)：正在处理的脚本文件的当前行数。 （3）PHP_VERSION：当前PHP预处理器的版本，如5.4.16。 （4）PHP_OS: PHP所在的操作系统的类型。如Linux。 （5）TRUE：表示逻辑真。FALSE：表示逻辑假。NULL：表示没有值或值不确定。 （6）DIRECTORY_SEPARATOR: 表示目录分隔符，UNIX或Linux操作系统环境时的值为“ / ”, Window操作系统环境时的值为 “ \ ”。 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>echo __FILE__;<br><br>echo &quot;&lt;br/&gt;&quot;;<br><br>echo __LINE__;<br><br>echo &quot;&lt;br/&gt;&quot;;<br><br>echo PHP_VERSION;<br><br>echo &quot;&lt;br/&gt;&quot;;<br><br>echo PHP_OS;<br><br>echo &quot;&lt;br/&gt;&quot;;<br><br>echo DIRECTORY_SEPARATOR;<br><br>?&gt; <br></code></pre></td></tr></table></figure>**整型**整数类型：保存整数数值（范围限制），4个字节存储数据。PHP中默认为有符号。在PHP中提供四种整形的定义方式，十进制定义，二进制定义，八进制定义和十六进制定义$a = 120 //十进制$a = 0b110 //二进制$a = 0120   //八进制$a = 0x120  //十六进制 // 使用echo输出时。默认输出为十进制decbin() // 十进制转二进制decoct() // 十进制转八进制dechex() // 十进制转十六进制bindec() // 二进制转十进制bin2hex() //二进制转十六进制   **字符串**：字符串变量用于存储并处理文本。 <?php$name='暗月';//双引号里面有变量会输出变量的值`$str =`"这是 $name 的全栈渗透测试培训，这是一个比较高质量的课程，一个很大的体系 欢迎来学习。";//单引号 如果里面有变量都作为一个字符串处理`$str1 =`'这是 $name 的全栈渗透测试培训，这是一个比较高质量的课程，一个很大的体系 欢迎来学习。';echo $str;echo $str1; <?php // 字符串$text1 = "hello";$text2 = "world";echo `$text1 . " " . $text2;` // "."是并置运算符（连接）echo "返回字符串的长度：", strlen($text1);echo "返回子串的第一次位置：", strpos($text1, "l");?><p>字符的操作函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br></pre></td><td class="code"><pre><code class="hljs php">addcslashes — 以 C 语言风格使用反斜线转义字符串中的字符<br>addslashes — 使用反斜线引用字符串<br><br>bin2hex — 函数把包含数据的二进制字符串转换为十六进制值<br><br>chop — rtrim 的别名<br><br>chr — 返回指定的字符<br><br>chunk_split — 将字符串分割成小块<br><br>convert_cyr_string — 将字符由一种 Cyrillic 字符转换成另一种<br><br>convert_uudecode — 解码一个 uuencode 编码的字符串<br><br>convert_uuencode — 使用 uuencode 编码一个字符串<br><br>count_chars — 返回字符串所用字符的信息<br><br>crc32 — 计算一个字符串的 crc32 多项式<br><br>crypt — 单向字符串散列<br><br><span class="hljs-keyword">echo</span> — 输出一个或多个字符串<br><br>explode — 使用一个字符串分割另一个字符串<br><br>fprintf — 将格式化后的字符串写入到流<br><br>get_html_translation_table — 返回使用 htmlspecialchars 和 htmlentities 后的转换表<br><br>hebrev — 将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew）<br><br>hebrevc — 将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew），并且转换换行符<br><br>hex2bin — 转换十六进制字符串为二进制字符串<br><br>html_entity_decode — Convert HTML entities to their corresponding characters<br><br>htmlentities — 将字符转换为 HTML 转义字符<br><br>htmlspecialchars_decode — 将特殊的 HTML 实体转换回普通字符<br><br>htmlspecialchars — 将特殊字符转换为 HTML 实体<br><br>implode — 将一个一维数组的值转化为字符串<br><br>join — 别名 implode<br><br>lcfirst — 使一个字符串的第一个字符小写<br><br>levenshtein — 计算两个字符串之间的编辑距离<br><br>localeconv — Get numeric formatting information<br><br>ltrim — 删除字符串开头的空白字符（或其他字符）<br><br>md5_file — 计算指定文件的 MD5 散列值<br><br>md5 — 计算字符串的 MD5 散列值<br><br>metaphone — Calculate the metaphone key of a <span class="hljs-keyword">string</span><br><br>money_format — 将数字格式化成货币字符串<br><br>nl_langinfo — Query language <span class="hljs-keyword">and</span> locale information<br><br>nl2br — 在字符串所有新行之前插入 HTML 换行标记<br><br>number_format — 以千位分隔符方式格式化一个数字<br><br>ord — 转换字符串第一个字节为 <span class="hljs-number">0</span>-<span class="hljs-number">255</span> 之间的值<br><br>parse_str — 将字符串解析成多个变量<br><br><span class="hljs-keyword">print</span> — 输出字符串<br><br>printf — 输出格式化字符串<br><br>quoted_printable_decode — 将 quoted-printable 字符串转换为 <span class="hljs-number">8</span>-bit 字符串<br><br>quoted_printable_encode — 将 <span class="hljs-number">8</span>-bit 字符串转换成 quoted-printable 字符串<br><br>quotemeta — 转义元字符集<br><br>rtrim — 删除字符串末端的空白字符（或者其他字符）<br><br>setlocale — 设置地区信息<br><br>sha1_file — 计算文件的 sha1 散列值<br><br>sha1 — 计算字符串的 sha1 散列值<br><br>similar_text — 计算两个字符串的相似度<br><br>soundex — Calculate the soundex key of a <span class="hljs-keyword">string</span><br><br>sprintf — Return a formatted <span class="hljs-keyword">string</span><br><br>sscanf — 根据指定格式解析输入的字符<br><br>str_contains — Determine <span class="hljs-keyword">if</span> a <span class="hljs-keyword">string</span> contains a given substring<br><br>str_ends_with — Checks <span class="hljs-keyword">if</span> a <span class="hljs-keyword">string</span> ends with a given substring<br><br>str_getcsv — 解析 CSV 字符串为一个数组<br><br>str_ireplace — str_replace 的忽略大小写版本<br><br>str_pad — 使用另一个字符串填充字符串为指定长度<br><br>str_repeat — 重复一个字符串<br><br>str_replace — 子字符串替换<br><br>str_rot13 — 对字符串执行 ROT13 转换<br><br>str_shuffle — 随机打乱一个字符串<br><br>str_split — 将字符串转换为数组<br><br>str_starts_with — Checks <span class="hljs-keyword">if</span> a <span class="hljs-keyword">string</span> starts with a given substring<br><br>str_word_count — 返回字符串中单词的使用情况<br><br>strcasecmp — 二进制安全比较字符串（不区分大小写）<br><br>strchr — 别名 strstr<br><br>strcmp — 二进制安全字符串比较<br><br>strcoll — 基于区域设置的字符串比较<br><br>strcspn — 获取不匹配遮罩的起始子字符串的长度<br><br>strip_tags — 从字符串中去除 HTML 和 PHP 标记<br><br>stripcslashes — 反引用一个使用 addcslashes 转义的字符串<br><br>stripos — 查找字符串首次出现的位置（不区分大小写）<br><br>stripslashes — 反引用一个引用字符串<br><br>stristr — strstr 函数的忽略大小写版本<br><br>strlen — 获取字符串长度<br><br>strnatcasecmp — 使用“自然顺序”算法比较字符串（不区分大小写）<br><br>strnatcmp — 使用自然排序算法比较字符串<br><br>strncasecmp — 二进制安全比较字符串开头的若干个字符（不区分大小写）<br><br>strncmp — 二进制安全比较字符串开头的若干个字符<br><br>strpbrk — 在字符串中查找一组字符的任何一个字符<br><br>strpos — 查找字符串首次出现的位置<br><br>strrchr — 查找指定字符在字符串中的最后一次出现<br><br>strrev — 反转字符串<br><br>strripos — 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）<br><br>strrpos — 计算指定字符串在目标字符串中最后一次出现的位置<br><br>strspn — 计算字符串中全部字符都存在于指定字符集合中的第一段子串的长度。<br><br>strstr — 查找字符串的首次出现<br><br>strtok — 标记分割字符串<br><br>strtolower — 将字符串转化为小写<br><br>strtoupper — 将字符串转化为大写<br><br>strtr — 转换指定字符<br><br>substr_compare — 二进制安全比较字符串（从偏移位置比较指定长度）<br><br>substr_count — 计算字串出现的次数<br><br>substr_replace — 替换字符串的子串<br><br>substr — 返回字符串的子串<br><br>trim — 去除字符串首尾处的空白字符（或者其他字符）<br><br>ucfirst — 将字符串的首字母转换为大写<br><br>ucwords — 将字符串中每个单词的首字母转换为大写<br><br>vfprintf — 将格式化字符串写入流<br><br>vprintf — 输出格式化字符串<br><br>vsprintf — 返回格式化字符串<br><br>wordwrap — 打断字符串为指定数量的字串<br><br> <br><br> <br><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;暗月&#x27;</span>;<br><br><span class="hljs-comment">//双引号 里面有变量 会 输出变量的值</span><br><br><span class="hljs-comment">//$str =&quot; 这是 $name 的全栈渗透测试培训，这是一个比较高质量的课程，一个很大的体系 欢迎来学习。 &quot;;</span><br><br><span class="hljs-comment">//单引号 如果里面有变量都作为一个字符串处理</span><br><br><span class="hljs-comment">//$str1 =&#x27;这是 $name 的全栈渗透测试培训，这是一个比较高质量的课程，一个很大的体系 欢迎来学习。&#x27;;</span><br><br> <br><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;123456&#x27;</span>;<br><br><span class="hljs-comment">//echo $str.&quot; 一共有 &quot;.strlen($a).&quot;字符&quot;;</span><br><br><span class="hljs-comment">//去掉空格</span><br><br><span class="hljs-comment">//echo trim($str);</span><br><br> <br><br><span class="hljs-comment">//echo $str1;</span><br><br> <br><br><span class="hljs-comment">//查找字符串 返回位置</span><br><br><span class="hljs-comment">//echo strpos($str,&#x27;暗月&#x27;);</span><br><br><span class="hljs-comment">//截取字符串</span><br><br><span class="hljs-comment">//echo substr($str,strpos($str,&#x27;暗月&#x27;),strpos($str,&#x27;培训&#x27;));</span><br><br><span class="hljs-comment">//md5 加密</span><br><br><span class="hljs-comment">//echo md5($a);</span><br><br><span class="hljs-comment">//通过下标 取字符的值</span><br><br><span class="hljs-comment">//echo $a[0];</span><br><br><span class="hljs-comment">//字符串替换函数</span><br><br><span class="hljs-variable">$a1</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-variable">$a</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a1</span>;<br><br><span class="hljs-comment">//遍历字符串</span><br><br> <br><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$a</span>);<span class="hljs-variable">$i</span>++)&#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>[<span class="hljs-variable">$i</span>].<span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>;<br><br>&#125;<br><br> <br><br> <br><br> <br><br> <br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mb_str_split</span>(<span class="hljs-params"> <span class="hljs-variable">$string</span> </span>) </span>&#123;<br><br>   <span class="hljs-comment">// /u表示把字符串当作utf-8处理，并把字符串开始和结束之前所有的字符串分割成数组</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_split</span>(<span class="hljs-string">&#x27;/(?&lt;!^)(?!$)/u&#x27;</span>, <span class="hljs-variable">$string</span> );<br><br>&#125;<br><br> <br><br> <br><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str</span>);<span class="hljs-variable">$i</span>++) &#123;<br><br>  <span class="hljs-variable">$k</span> = <span class="hljs-variable">$str</span>[<span class="hljs-variable">$i</span>]; <span class="hljs-comment">//输出乱码</span><br><br>&#125;<br><br> <br><br><span class="hljs-keyword">foreach</span> (<span class="hljs-title function_ invoke__">mb_str_split</span>(<span class="hljs-variable">$str</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$c</span>)<br><br>&#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>; <span class="hljs-comment">//正常输出：中 文 测 试</span><br><br><br></code></pre></td></tr></table></figure><h2 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4.  运算符"></a>4.  运算符</h2><p>基本运算符：</p><p><img src="/2022/08/09/PHP%E5%9F%BA%E7%A1%80/php%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6" alt="php1"></p><p>赋值运算符：</p><p><img src="/2022/08/09/PHP%E5%9F%BA%E7%A1%80/php%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6" alt="php2"></p><p>　</p><p>递增&#x2F;递减运算符：</p><p><img src="/2022/08/09/PHP%E5%9F%BA%E7%A1%80/php%E9%80%92%E5%A2%9E%E3%80%81%E9%80%92%E5%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6" alt="php3"></p><p>比较运算符：</p><p><img src="/2022/08/09/PHP%E5%9F%BA%E7%A1%80/php%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6" alt="php4"></p><p>逻辑运算符：</p><p><img src="/2022/08/09/PHP%E5%9F%BA%E7%A1%80/php%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6" alt="php5"></p><p>三元运算符：</p><p>(expr1) ? (expr2) : (expr3)</p><h2 id="5-控制语句"><a href="#5-控制语句" class="headerlink" title="5.  控制语句"></a>5.  控制语句</h2><p>控制语法的语句结构和其他大多数语言结构相同，有以下两类：</p><h3 id="5-1-条件控制语句"><a href="#5-1-条件控制语句" class="headerlink" title="5.1.  条件控制语句"></a>5.1.  条件控制语句</h3><p><strong>if</strong> <strong>语句</strong> - 在条件成立时执行代码</p><p><strong>if…else</strong> 语句 - 在条件成立时执行一块代码，条件不成立时执行另一块代码</p><p><strong>if…elseif….else</strong> 语句 - 在若干条件之一成立时执行一个代码块</p><p><strong>switch</strong> 语句 - 在若干条件之一成立时执行一个代码块</p><h3 id="5-2-循环控制语句"><a href="#5-2-循环控制语句" class="headerlink" title="5.2.  循环控制语句"></a>5.2.  循环控制语句</h3><p><strong>while</strong> - 只要指定的条件成立，则循环执行代码块</p><p><strong>do…while</strong> - 首先执行一次代码块，然后在指定的条件成立时重复这个循环</p><p><strong>for</strong> - 循环执行代码块指定的次数</p><p><strong>foreach</strong> - 根据数组中每个元素来循环代码块</p><p><strong>break****语句</strong>用于终止本次循环</p><p><strong>continue****语句</strong>的作用是跳出本次循环，接着执行下一次循环</p><h2 id="6-php数组"><a href="#6-php数组" class="headerlink" title="6.  php数组"></a>6.  php数组</h2><p>数组是一个能在单个变量中存储多个值的特殊变量。</p><p>在 PHP 中，array() 函数用于创建数组：</p><p>array();</p><p>在 PHP 中，有三种类型的数组：</p><p><strong>数值数组</strong> - 带有数字 ID 键的数组</p><p><strong>关联数组</strong> - 带有指定的键的数组，每个键关联一个值</p><p><strong>多维数组</strong> - 包含一个或多个数组的数组</p><p>数组的声明</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$array1</span> = <span class="hljs-keyword">array</span>();<br><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$cars</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;Volvo&quot;</span>,<span class="hljs-string">&quot;BMW&quot;</span>,<span class="hljs-string">&quot;Toyota&quot;</span>);<span class="hljs-comment">//简单的数组</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$cars</span>);<span class="hljs-comment">//count()返回数组的长度</span><br><br><span class="hljs-variable">$age</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;Peter&quot;</span>=&gt;<span class="hljs-string">&quot;35&quot;</span>,<span class="hljs-string">&quot;Ben&quot;</span>=&gt;<span class="hljs-string">&quot;37&quot;</span>,<span class="hljs-string">&quot;Joe&quot;</span>=&gt;<span class="hljs-string">&quot;43&quot;</span>);<span class="hljs-comment">//关联数组</span><br><br><span class="hljs-comment">//其中包含多个键值对</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Peter is &quot;</span> . <span class="hljs-variable">$age</span>[<span class="hljs-string">&#x27;Peter&#x27;</span>] . <span class="hljs-string">&quot; years old.&quot;</span>;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$age</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span>=&gt;<span class="hljs-variable">$x_value</span>)<span class="hljs-comment">//关联数组的遍历方法</span><br><br>&#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Key=&quot;</span> . <span class="hljs-variable">$x</span> . <span class="hljs-string">&quot;, Value=&quot;</span> . <span class="hljs-variable">$x_value</span>;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在PHP 中定义了多个数组排序的内置函数：</p><ul><li><p>sort() - 对数组进行升序排列</p></li><li><p>rsort() - 对数组进行降序排列</p></li><li><p>asort() - 根据关联数组的值，对数组进行升序排列</p></li><li><p>ksort() - 根据关联数组的键，对数组进行升序排列</p></li><li><p>arsort() - 根据关联数组的值，对数组进行降序排列</p></li><li><p>krsort() - 根据关联数组的键，对数组进行降序排列</p></li></ul><p>数组的操作</p><p>数组的合拼</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$array1</span> =<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>);<br><br><span class="hljs-variable">$array2</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;a1&#x27;</span>=&gt;<span class="hljs-string">&#x27;php&#x27;</span>,<span class="hljs-string">&#x27;a2&#x27;</span>=&gt;<span class="hljs-string">&#x27;python&#x27;</span>,<span class="hljs-string">&#x27;a3&#x27;</span>=&gt;<span class="hljs-string">&#x27;java&#x27;</span>);<br><br><span class="hljs-variable">$array3</span> = <span class="hljs-title function_ invoke__">array_merge</span>(<span class="hljs-variable">$array1</span>,<span class="hljs-variable">$array2</span>);<br></code></pre></td></tr></table></figure><p>填加数组元素</p><p>array_push() 函数向第一个参数的数组尾部添加一个或多个元素（入栈），然后返回新数组的长度。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$array1</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>);<br><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$array1</span>);<br>下表为空 自动添加参数<br><br><span class="hljs-variable">$array1</span>[]=<span class="hljs-string">&#x27;d&#x27;</span>;<br><br>有键值的<br><br><span class="hljs-variable">$array1</span>[<span class="hljs-string">&#x27;a4&#x27;</span>]=<span class="hljs-string">&#x27;javasciprt&#x27;</span>;<br><br> <br><br>添加到指定位置<br><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$array1</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>);<br><br><span class="hljs-variable">$array2</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;x&#x27;</span>);<br><br><span class="hljs-title function_ invoke__">array_splice</span>(<span class="hljs-variable">$array1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$array2</span>); <span class="hljs-comment">// 插入到位置3且删除0个</span><br><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$array1</span>);<br><br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-title function_ invoke__">array_splice</span>(数组，位置，删除几个，增加元素）<br><br>删除某一个元素<br><br>&lt;?php<br><br><span class="hljs-variable">$array1</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>);<br><br><span class="hljs-variable">$array2</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;x&#x27;</span>);<br><br><span class="hljs-title function_ invoke__">array_splice</span>(<span class="hljs-variable">$array1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>); <br><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$array1</span>);<br><br><span class="hljs-meta">?&gt;</span><br><br> <br><br><span class="hljs-keyword">unset</span> 销毁指定的元素<br><br><span class="hljs-variable">$array1</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>);<br><br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$array1</span>[<span class="hljs-number">0</span>]);<br><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$array1</span>);<br><br> <br><br><span class="hljs-title function_ invoke__">array_pop</span>():将数组最后一个单元弹出（出栈）<br><br> <br><br>修改数组中某个元素<br><br><span class="hljs-variable">$array1</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>);<br><br><span class="hljs-variable">$array1</span>[<span class="hljs-number">0</span>]=<span class="hljs-string">&#x27;aa&#x27;</span>;<br><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$array1</span>);<br></code></pre></td></tr></table></figure><p><strong>常用的数组函数</strong></p><p>is_array 判断是否为数组</p><p>count 数组的元素数目</p><p>array_search — 在数组中搜索给定的值，如果成功则返回相应的键名</p><p>array_key_exists()在给定的 key 存在于数组中时返回 TRUE</p><p>array_unshift() 将传入的单元插入到 array 数组的开头。注意单元是作为整体被插入的，因此传入单元将保持同样的顺序。所有的数值键名将修改为从零开始重新计数，所有的文字键名保持不变</p><p>array_shift() 将array 的第一个单元移出并作为结果返回，将 array 的长度减一并将所有其它单元向前移动一位。所有的数字键名将改为从零开始计数，文字键名将不变。</p><p>array_unique() 接受 array 作为输入并返回没有重复值的新数组。注意键名保留不变。 array_unique() 先将值作为字符串排序，然后对每个值只保留第一个遇到的键名，接着忽略所有后面的键名。这并不意味着在未排序的 array 中同一个值的第一个出现的键名会被保留。</p><p>in_array — 检查数组中是否存在某个值 如果找到指定的值则返回 TRUE，否则返回 FALSE 。in_array()是区分大小写的。</p><h2 id="7-PHP-函数"><a href="#7-PHP-函数" class="headerlink" title="7.  PHP 函数"></a>7.  PHP 函数</h2><p>PHP 的真正力量来自它的函数：它拥有超过 1000 个内建的函数。</p><p>PHP 用户定义函数</p><p>除了内建的 PHP 函数，我们可以创建我们自己的函数。</p><p>函数是可以在程序中重复使用的语句块。</p><p>页面加载时函数不会立即执行。</p><p>函数只有在被调用时才会执行。</p><p>在 PHP 创建用户定义函数</p><p>用户定义的函数声明以单词 “function” 开头：</p><p>语法</p><p>function functionName() {</p><p> 被执行的代码;</p><p>}</p><p>&#x3D;&#x3D;注释：函数名能够以字母或下划线开头（而非数字）。&#x3D;&#x3D;</p><p>&#x3D;&#x3D;注释：函数名对大小写不敏感。&#x3D;&#x3D;</p><p>&#x3D;&#x3D;提示：函数名应该能够反映函数所执行的任务。&#x3D;&#x3D;</p><p>在下面的例子中，我们创建名为 “writeMsg()” 的函数。打开的花括号（{）指示函数代码的开始，而关闭的花括号（}）指示函数的结束。此函数输出 “Hello world!”。如需调用该函数，只要使用函数名即可：</p><p>实例</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>) </span>&#123;<br><br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello world!&quot;</span>;<br><br>&#125;<br><br> <br><br><span class="hljs-title function_ invoke__">sayhi</span>(); <span class="hljs-comment">// 调用函数</span><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>PHP</strong> <strong>函数参数</strong></p><p>可以通过参数向函数传递信息。参数类似变量。</p><p>参数被定义在函数名之后，括号内部。您可以添加任意多参数，只要用逗号隔开即可。</p><p>下面的例子中的函数有一个参数（$fname）。当调用 familyName() 函数时，我们同时要传递一个名字（例如 Bill），这样会输出不同的名字，但是姓氏相同：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">familyName</span>(<span class="hljs-params"><span class="hljs-variable">$fname</span></span>) </span>&#123;<br><br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$fname</span> Zhang.&lt;br&gt;&quot;</span>;<br><br>&#125;<br><br> <br><br><span class="hljs-title function_ invoke__">familyName</span>(<span class="hljs-string">&quot;Li&quot;</span>);<br><br><span class="hljs-title function_ invoke__">familyName</span>(<span class="hljs-string">&quot;Hong&quot;</span>);<br><br><span class="hljs-title function_ invoke__">familyName</span>(<span class="hljs-string">&quot;Tao&quot;</span>);<br><br><span class="hljs-title function_ invoke__">familyName</span>(<span class="hljs-string">&quot;Xiao Mei&quot;</span>);<br><br><span class="hljs-title function_ invoke__">familyName</span>(<span class="hljs-string">&quot;Jian&quot;</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>PHP 默认参数值</p><p>下面的例子展示了如何使用默认参数。如果我们调用没有参数的 setHeight() 函数，它的参数会取默认值：</p><p>实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setHeight</span>(<span class="hljs-params"><span class="hljs-variable">$minheight</span>=<span class="hljs-number">50</span></span>) </span>&#123;<br><br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;The height is : <span class="hljs-subst">$minheight</span> &lt;br&gt;&quot;</span>;<br><br>&#125;<br><br> <br><br><span class="hljs-title function_ invoke__">setHeight</span>(<span class="hljs-number">350</span>);<br><br><span class="hljs-title function_ invoke__">setHeight</span>(); <span class="hljs-comment">// 将使用默认值 50</span><br><br><span class="hljs-title function_ invoke__">setHeight</span>(<span class="hljs-number">135</span>);<br><br><span class="hljs-title function_ invoke__">setHeight</span>(<span class="hljs-number">80</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>PHP 函数 - 返回值</p><p>如需使函数返回值，请使用 return 语句：</p><p>实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params"><span class="hljs-variable">$x</span>,<span class="hljs-variable">$y</span></span>) </span>&#123;<br><br> <span class="hljs-variable">$z</span>=<span class="hljs-variable">$x</span>+<span class="hljs-variable">$y</span>;<br><br> <span class="hljs-keyword">return</span> <span class="hljs-variable">$z</span>;<br><br>&#125;<br><br> <br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;5 + 10 = &quot;</span> . <span class="hljs-title function_ invoke__">sum</span>(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>) . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;7 + 13 = &quot;</span> . <span class="hljs-title function_ invoke__">sum</span>(<span class="hljs-number">7</span>,<span class="hljs-number">13</span>) . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;2 + 4 = &quot;</span> . <span class="hljs-title function_ invoke__">sum</span>(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>匿名函数</strong></p><p>匿名函数就是没有名字的函数。</p><p>&#x3D;&#x3D;将一个匿名函数”赋值”给一个变量——此时该变量就代表该匿名函数了！&#x3D;&#x3D;</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$callfunction</span>=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-variable">$name</span>;<br><br>&#125;;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$callfunction</span>(<span class="hljs-string">&#x27;moonsec&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>回调函数</strong></p><p>回调函数是指调用函数的时候将另一个函数作为参数传递到调用的函数中，而不是传递一个普通的变量作为参数</p><p>使用回调函数是为了可以将一段自己定义的功能传到函数内部使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Speak</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span></span>)</span>&#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;He can speak &quot;</span>.<span class="hljs-variable">$a</span>;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;She can speak &quot;</span>.<span class="hljs-variable">$b</span>;<br><br>  &#125;<br><br>   <br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Speak_Test</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-string">&#x27;Speak&#x27;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;Chinese&#x27;</span>,<span class="hljs-string">&#x27;English&#x27;</span>));  <br><br>  &#125;<br><span class="hljs-comment">//这就是在调用，也可以直接用speak函数</span><br><br>   <br><br>  <span class="hljs-title function_ invoke__">Speak_Test</span>();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="8-PHP-变量作用域"><a href="#8-PHP-变量作用域" class="headerlink" title="8.  PHP 变量作用域"></a>8.  PHP 变量作用域</h2><p>在 PHP 中，可以在脚本的任意位置对变量进行声明。</p><p>变量的作用域指的是变量能够被引用&#x2F;使用的那部分脚本。</p><p>PHP 有三种不同的变量作用域：</p><ul><li><p>local（局部）</p></li><li><p>global（全局）</p></li><li><p>static（静态）</p></li></ul><p>Local 和 Global 作用域</p><p>函数之外声明的变量拥有 Global 作用域，只能在函数以外进行访问。</p><p>函数内部声明的变量拥有 LOCAL 作用域，只能在函数内部进行访问。</p><p>下面的例子测试了带有局部和全局作用域的变量：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$x</span>=<span class="hljs-number">5</span>; <span class="hljs-comment">// 全局作用域</span><br><br> <br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myTest</span>(<span class="hljs-params"></span>) </span>&#123;<br><br> <span class="hljs-variable">$y</span>=<span class="hljs-number">10</span>; <span class="hljs-comment">// 局部作用域</span><br><br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;测试函数内部的变量：&lt;/p&gt;&quot;</span>;<br><br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;变量 x 是：<span class="hljs-subst">$x</span>&quot;</span>;<br><br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;变量 y 是：<span class="hljs-subst">$y</span>&quot;</span>;<br><br>&#125; <br><br> <br><br><span class="hljs-title function_ invoke__">myTest</span>();<br><br> <br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;测试函数之外的变量：&lt;/p&gt;&quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;变量 x 是：<span class="hljs-subst">$x</span>&quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;变量 y 是：<span class="hljs-subst">$y</span>&quot;</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在上例中，有两个变量<code> $x 和 $y</code>，以及一个函数 myTest()。<code>$x 是全局变量，因为它是在函数之外声明的，而 $y</code> 是局部变量，因为它是在函数内声明的。</p><p>如果我们在 myTest() 函数内部输出两个变量的值，<code>$y 会输出在本地声明的值，但是无法 $x</code> 的值，因为它在函数之外创建。</p><p>然后，如果在 myTest() 函数之外输出两个变量的值，那么会输出 <code>$x 的值，但是不会输出 $y</code> 的值，因为它是局部变量，并且在 myTest() 内部创建。</p><p>注释：您可以在不同的函数中创建名称相同的局部变量，因为局部变量只能被在其中创建它的函数识别。</p><p>PHP global 关键词</p><p>global 关键词用于在函数内访问全局变量。</p><p>要做到这一点，请在（函数内部）变量前面使用 global 关键词：</p><p>实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$x</span>=<span class="hljs-number">5</span>;<br><br><span class="hljs-variable">$y</span>=<span class="hljs-number">10</span>;<br><br> <br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myTest</span>(<span class="hljs-params"></span>) </span>&#123;<br><br> <span class="hljs-keyword">global</span> <span class="hljs-variable">$x</span>,<span class="hljs-variable">$y</span>;<br><br> <span class="hljs-variable">$y</span>=<span class="hljs-variable">$x</span>+<span class="hljs-variable">$y</span>;<br><br>&#125;<br><br> <br><br><span class="hljs-title function_ invoke__">myTest</span>();<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$y</span>; <span class="hljs-comment">// 输出 15</span><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;PHP 同时在名为 $GLOBALS[index] 的数组中存储了所有的全局变量。下标存有变量名。这个数组在函数内也可以访问，并能够用于直接更新全局变量。&#x3D;&#x3D;</p><p>上面的例子可以这样重写：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$x</span>=<span class="hljs-number">5</span>;<br><br><span class="hljs-variable">$y</span>=<span class="hljs-number">10</span>;<br><br> <br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myTest</span>(<span class="hljs-params"></span>) </span>&#123;<br><br> <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;y&#x27;</span>]=<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;x&#x27;</span>]+<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;y&#x27;</span>];<br><br>&#125; <br><br> <br><br><span class="hljs-title function_ invoke__">myTest</span>();<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$y</span>; <span class="hljs-comment">// 输出 15</span><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>PHP static 关键词</p><p>通常，当函数完成&#x2F;执行后，会删除所有变量。不过，有时我需要不删除某个局部变量。实现这一点需要更进一步的工作。</p><p>要完成这一点，请在您首次声明变量时使用 static 关键词：</p><p>实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br> <br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myTest</span>(<span class="hljs-params"></span>) </span>&#123;<br><br> <span class="hljs-built_in">static</span> <span class="hljs-variable">$x</span>=<span class="hljs-number">0</span>;<br><br> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$x</span>;<br><br> <span class="hljs-variable">$x</span>++;<br><br>&#125;<br><br> <br><br><span class="hljs-title function_ invoke__">myTest</span>();<br><br><span class="hljs-title function_ invoke__">myTest</span>();<br><br><span class="hljs-title function_ invoke__">myTest</span>();<br><br> <br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后，每当函数被调用时，这个变量所存储的信息都是函数最后一次被调用时所包含的信息。&#x2F;&#x2F;&#x2F;</p><p>注释：该变量仍然是函数的局部变量。</p><h2 id="9-类与对象"><a href="#9-类与对象" class="headerlink" title="9.  类与对象"></a>9.  类与对象</h2><p>PHP 面向对象</p><p>在面向对象的程序设计（英语：Object-oriented programming，缩写：OOP）中，对象是一个由信息及对信息进行处理的描述所组成的整体，是对现实世界的抽象。</p><p>在现实世界里我们所面对的事情都是对象，如计算机、电视机、自行车等。</p><p>对象的主要三个特性：</p><ul><li><p>对象的行为：可以对对象施加那些操作，开灯，关灯就是行为。</p></li><li><p>对象的形态：当施加那些方法是对象如何响应，颜色，尺寸，外型。</p></li><li><p>对象的表示：对象的表示就相当于身份证，具体区分在相同的行为与状态下有什么不同。</p></li></ul><p>比如 Animal(动物) 是一个抽象类，我们可以具体到一只狗跟一只羊，而狗跟羊就是具体的对象，他们有颜色属性，可以写，可以跑等行为状态。</p><p><img src="/2022/08/09/PHP%E5%9F%BA%E7%A1%80/dog" alt="animals"></p><p><strong>面向对象内容</strong></p><p><strong>类</strong> − 定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。</p><p><strong>对象</strong> − 是类的实例。</p><p><strong>成员变量</strong> − 定义在类内部的变量。该变量的值对外是不可见的，但是可以通过<strong>成员函数访问</strong>，在类被实例化为对象后，该变量即可称为对象的属性。</p><p><strong>成员函数</strong> − 定义在类的内部，可用于访问对象的数据。</p><p><strong>继承</strong> − 继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。</p><p><strong>父类</strong> − 一个类被其他类继承，可将该类称为父类，或基类，或超类。</p><p><strong>子类</strong> − 一个类继承其他类称为子类，也可称为派生类。</p><p><strong>多态</strong> − 多态性是指相同的操作或函数、过程可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性。</p><p><strong>重载</strong> − 简单说，就是函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。</p><p><strong>抽象性</strong> − 抽象性是指将具有一致的数据结构（属性）和行为（操作）的对象抽象成类。一个类就是这样一种抽象，它反映了与应用有关的重要性质，而忽略其他一些无关内容。任何类的划分都是主观的，但必须与具体的应用有关。</p><p><strong>封装</strong> − 封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内。</p><p><strong>构造函数</strong> − 主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。</p><p><strong>析构函数</strong> − 析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数往往用来做”清理善后” 的工作（例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）。</p><p>下图中我们通过 Car 类 创建了三个对象：Mercedes, Bmw, 和 Audi。</p><p>$mercedes &#x3D; new Car ();</p><p>$bmw &#x3D; new Car ();</p><p>$audi &#x3D; new Car ();</p><p><img src="/2022/08/09/PHP%E5%9F%BA%E7%A1%80/car" alt="2"></p><p><strong>PHP</strong> <strong>类定义</strong></p><p>PHP 定义类通常语法格式如下：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">phpClass</span> </span>&#123;<br><br> <span class="hljs-keyword">var</span> <span class="hljs-variable">$var1</span>;<br><br> <span class="hljs-keyword">var</span> <span class="hljs-variable">$var2</span> = <span class="hljs-string">&quot;constant string&quot;</span>;<br><br> <br><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myfunc</span> (<span class="hljs-params"><span class="hljs-variable">$arg1</span>, <span class="hljs-variable">$arg2</span></span>) </span>&#123;<br><br>   [..]<br><br> &#125;<br><br> [..]<br><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>解析如下：</strong></p><ul><li><p>类使用 class 关键字后加上类名定义。</p></li><li><p>类名后的一对大括号({})内可以定义变量和方法。</p></li><li><p>类的变量使用 var 来声明, 变量也可以初始化值。</p></li><li><p>函数定义类似 PHP 函数的定义，但函数只能通过该类及其实例化的对象访问。</p></li></ul><p>实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Site</span> </span>&#123;<br><br> <span class="hljs-comment">/* 成员变量 */</span><br><br> <span class="hljs-keyword">var</span> <span class="hljs-variable">$url</span>;<br><br> <span class="hljs-keyword">var</span> <span class="hljs-variable">$title</span>;<br><br> <br><br> <span class="hljs-comment">/* 成员函数 */</span><br><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setUrl</span>(<span class="hljs-params"><span class="hljs-variable">$par</span></span>)</span>&#123;<br><br>   <span class="hljs-variable language_">$this</span>-&gt;url = <span class="hljs-variable">$par</span>;<br><br> &#125;<br><br> <br><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUrl</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>   <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;url . PHP_EOL;<br><br> &#125;<br><br> <br><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setTitle</span>(<span class="hljs-params"><span class="hljs-variable">$par</span></span>)</span>&#123;<br><br>   <span class="hljs-variable language_">$this</span>-&gt;title = <span class="hljs-variable">$par</span>;<br><br> &#125;<br><br> <br><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTitle</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>   <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;title . PHP_EOL;<br><br> &#125;<br><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br> <br></code></pre></td></tr></table></figure><p>变量 <strong>$this</strong> 代表自身的对象。</p><p>&#x3D;&#x3D;<strong>PHP_EOL</strong> 为换行符。&#x3D;&#x3D;</p><p><strong>PHP</strong> <strong>中创建对象</strong></p><p>类创建后，我们可以使用 <strong>new</strong> 运算符来实例化该类的对象：</p><p>$w3cschool &#x3D; new Site;</p><p>$taobao &#x3D; new Site;</p><p>$google &#x3D; new Site;</p><p>以上代码我们创建了三个对象，三个对象各自都是独立的，接下来我们来看看如何访问成员方法与成员变量。</p><p><strong>调用成员方法</strong></p><p>在实例化对象后，我们可以使用该对象调用成员方法，该对象的成员方法只能操作该对象的成员变量：</p><p>&#x2F;&#x2F; 调用成员函数，设置标题和URL</p><p>$w3cschool-&gt;setTitle( “W3Cschool教程” );</p><p>$taobao-&gt;setTitle( “淘宝” );</p><p>$google-&gt;setTitle( “Google 搜索” );</p><p>$w3cschool-&gt;setUrl( ‘<a href="http://www.w3cschool.cn&/#39;">www.w3cschool.cn&#39;</a> );</p><p>$taobao-&gt;setUrl( ‘<a href="http://www.taobao.com&/#39;">www.taobao.com&#39;</a> );</p><p>$google-&gt;setUrl( ‘<a href="http://www.google.com&/#39;">www.google.com&#39;</a> );</p><p>&#x2F;&#x2F; 调用成员函数，获取标题和URL</p><p>$w3cschool-&gt;getTitle();</p><p>$taobao-&gt;getTitle();</p><p>$google-&gt;getTitle();</p><p>$w3cschool-&gt;getUrl();</p><p>$taobao-&gt;getUrl();</p><p>$google-&gt;getUrl();</p><p>完整代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Site</span> </span>&#123;<br><br> <span class="hljs-comment">/* 成员变量 */</span><br><br>  <span class="hljs-keyword">var</span> <span class="hljs-variable">$url</span>;<br><br> <span class="hljs-keyword">var</span> <span class="hljs-variable">$title</span>;<br><br> <br><br> <span class="hljs-comment">/* 成员函数 */</span><br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setUrl</span>(<span class="hljs-params"><span class="hljs-variable">$par</span></span>)</span>&#123;<br><br>   <span class="hljs-variable language_">$this</span> -&gt;url = <span class="hljs-variable">$par</span>;<br><br> &#125;<br><br> <br><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUrl</span> (<span class="hljs-params"></span>)</span>&#123;<br><br>   <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;url . PHP_EOL ;<br><br> &#125;<br><br> <br><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setTitle</span>(<span class="hljs-params"><span class="hljs-variable">$par</span></span>)</span>&#123;<br><br>   <span class="hljs-variable language_">$this</span> -&gt;title = <span class="hljs-variable">$par</span>;<br><br> &#125;<br><br> <br><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTitle</span> (<span class="hljs-params"></span>)</span>&#123;<br><br>   <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;title . PHP_EOL ;<br><br> &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-variable">$w3cschool</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Site</span>;<br><br><span class="hljs-variable">$taobao</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Site</span>;<br><br><span class="hljs-variable">$google</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Site</span>;<br><br> <br><br><span class="hljs-comment">// 调用成员函数，设置标题和URL</span><br><br><span class="hljs-variable">$w3cschool</span>-&gt;<span class="hljs-title function_ invoke__">setTitle</span>( <span class="hljs-string">&quot;W3Cschool教程&quot;</span> );<br><br><span class="hljs-variable">$taobao</span> -&gt;<span class="hljs-title function_ invoke__">setTitle</span>( <span class="hljs-string">&quot;淘宝&quot;</span> );<br><br><span class="hljs-variable">$google</span>-&gt; <span class="hljs-title function_ invoke__">setTitle</span>( <span class="hljs-string">&quot;Google 搜索&quot;</span> );<br><br> <br><br><span class="hljs-variable">$w3cschool</span>-&gt; <span class="hljs-title function_ invoke__">setUrl</span>( <span class="hljs-string">&#x27;www.w3cschool.cn&#x27;</span> );<br><br><span class="hljs-variable">$taobao</span>-&gt;<span class="hljs-title function_ invoke__">setUrl</span> ( <span class="hljs-string">&#x27;www.taobao.com&#x27;</span> );<br><br><span class="hljs-variable">$google</span>-&gt;<span class="hljs-title function_ invoke__">setUrl</span>( <span class="hljs-string">&#x27;www.google.com&#x27;</span> );<br><br> <br><br><span class="hljs-comment">// 调用成员函数，获取标题和URL</span><br><br><span class="hljs-variable">$w3cschool</span>-&gt;<span class="hljs-title function_ invoke__">getTitle</span> ();<br><br><span class="hljs-variable">$taobao</span>-&gt;<span class="hljs-title function_ invoke__">getTitle</span>();<br><br><span class="hljs-variable">$google</span>-&gt; <span class="hljs-title function_ invoke__">getTitle</span>();<br><br> <br><br><span class="hljs-variable">$w3cschool</span>-&gt;<span class="hljs-title function_ invoke__">getUrl</span>();<br><br><span class="hljs-variable">$taobao</span> -&gt;<span class="hljs-title function_ invoke__">getUrl</span>();<br><br><span class="hljs-variable">$google</span>-&gt;<span class="hljs-title function_ invoke__">getUrl</span>();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>执行以上代码，输出结果为：</p><p>W3Cschool教程</p><p>淘宝</p><p>Google 搜索</p><p><a href="http://www.w3cschool.cn/">www.w3cschool.cn</a></p><p><a href="http://www.taobao.com/">www.taobao.com</a></p><p><a href="http://www.google.com/">www.google.com</a></p><p><strong>PHP</strong> <strong>构造函数</strong></p><p>构造函数 ，是一种特殊的方法。主要用来在创建对象时初始化对象，&#x3D;&#x3D;即为对象<strong>成员变量赋初始值</strong>，总与new运算符一起使用在创建对象的语句中。&#x3D;&#x3D;</p><p>PHP 5 允行开发者在一个类中定义一个方法作为构造函数，语法格式如下：</p><p><code>void __construct ([ mixed $args [, $... ]] )</code></p><p><code>在上面的例子中我们就可以通过构造方法来初始化 $url 和 $title 变量：</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"> <span class="hljs-variable">$par1</span>, <span class="hljs-variable">$par2</span> </span>) </span>&#123;<br><br>  <span class="hljs-variable language_">$this</span>-&gt;url = <span class="hljs-variable">$par1</span>;<br><br>  <span class="hljs-variable language_">$this</span>-&gt;title = <span class="hljs-variable">$par2</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们就不需要再调用 setTitle 和 setUrl 方法了：</p><p>$youj &#x3D; new Site(‘<a href="http://www.w3cschool.cn&/#39;">www.w3cschool.cn&#39;</a>, ‘W3Cschool教程’);</p><p>$taobao &#x3D; new Site(‘<a href="http://www.taobao.com&/#39;">www.taobao.com&#39;</a>, ‘淘宝’);</p><p>$google &#x3D; new Site(‘<a href="http://www.google.com&/#39;">www.google.com&#39;</a>, ‘Google 搜索’);</p><p>&#x2F;&#x2F; 调用成员函数，获取标题和URL</p><p>$youj-&gt;getTitle();</p><p>$taobao-&gt;getTitle();</p><p>$google-&gt;getTitle();</p><p>$youj-&gt;getUrl();</p><p>$taobao-&gt;getUrl();</p><p>$google-&gt;getUrl();</p><p><strong>析构函数</strong></p><p>析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。</p><p>PHP 5 引入了析构函数的概念，这类似于其它面向对象的语言，其语法格式如下：</p><p>void __destruct ( void )</p><p>实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDestructableClass</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>​    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;构造函数\n&quot;</span>;<br><br>​    <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-string">&quot;MyDestructableClass&quot;</span>;<br><br>  &#125;<br><br> <br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>​    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;销毁 &quot;</span> . <span class="hljs-variable language_">$this</span>-&gt;name . <span class="hljs-string">&quot;\n&quot;</span>;<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDestructableClass</span>();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>执行以上代码，输出结果为：</p><p><strong>构造函数</strong></p><p>销毁 MyDestructableClass</p><p><strong>继承</strong></p><p>继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的属性和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p><p>父类&#x3D;基类</p><p>PHP 使用关键字 extends 来继承一个类，PHP 不支持多继承，格式</p><p>class Child extends Parent {</p><p>  &#x2F;&#x2F; 代码部分</p><p>}如下：</p><p><strong>实例</strong></p><p>实例中 Child_Site 类继承了 Site 类，并扩展了功能：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><br><span class="hljs-comment">// 子类扩展站点类别</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child_Site</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Site</span> </span>&#123;<br><span class="hljs-comment">//里面也可以什么都不写</span><br>  <span class="hljs-keyword">var</span> <span class="hljs-variable">$category</span>;<br><br> <br><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setCate</span>(<span class="hljs-params"><span class="hljs-variable">$par</span></span>)</span>&#123;<br><br>        <span class="hljs-variable language_">$this</span>-&gt;category = <span class="hljs-variable">$par</span>;<br><br>    &#125;<br><br> <br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCate</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;category . PHP_EOL;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法重写</strong></p><p>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），&#x3D;&#x3D;也称为方法的重写。&#x3D;&#x3D;</p><p>实例中重写了 getUrl 与 getTitle 方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUrl</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;url . PHP_EOL;<span class="hljs-comment">//换行符</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;url;<br><br>&#125;<br><br>  <br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTitle</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;title . PHP_EOL;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;title;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>访问控制</strong></p><p>PHP 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），<strong>protected</strong>（受保护）或 <strong>private</strong>（私有）来实现的。</p><p><strong>public</strong>（公有）：公有的类成员可以在任何地方被访问。</p><p><strong>protected</strong>（受保护）：受保护的类成员则可以被其自身以及其子类和父类访问。</p><p><strong>private</strong>（私有）：&#x3D;&#x3D;私有的类成员则只能被其定义所在的类访问。&#x3D;&#x3D;</p><p><strong>属性的访问控制</strong></p><p>类属性必须定义为公有，受保护，私有之一。如果用 var 定义，则被视为公有。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> \* Define MyClass</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span></span><br><span class="hljs-class"></span><br><span class="hljs-class"></span>&#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$public</span> = <span class="hljs-string">&#x27;Public&#x27;</span>;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$protected</span> = <span class="hljs-string">&#x27;Protected&#x27;</span>;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-variable">$private</span> = <span class="hljs-string">&#x27;Private&#x27;</span>;<br><br> <br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printHello</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span><br><span class="hljs-function">  </span>&#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">public</span>;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">protected</span>;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">private</span>;<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>();<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>-&gt;<span class="hljs-keyword">public</span>; <span class="hljs-comment">// 这行能被正常执行</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>-&gt;<span class="hljs-keyword">protected</span>; <span class="hljs-comment">// 这行会产生一个致命错误</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>-&gt;<span class="hljs-keyword">private</span>; <span class="hljs-comment">// 这行也会产生一个致命错误</span><br><br><span class="hljs-variable">$obj</span>-&gt;<span class="hljs-title function_ invoke__">printHello</span>(); <span class="hljs-comment">// 输出 Public、Protected 和 Private</span><br><br> <br><br> <br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> \* Define MyClass2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MyClass</span></span><br><span class="hljs-class"></span><br><span class="hljs-class"></span>&#123;<br><br>  <span class="hljs-comment">// 可以对 public 和 protected 进行重定义，但 private 而不能</span><br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$protected</span> = <span class="hljs-string">&#x27;Protected2&#x27;</span>;<br><br> <br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printHello</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span><br><span class="hljs-function">  </span>&#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">public</span>;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">protected</span>;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">private</span>;<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-variable">$obj2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass2</span>();<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj2</span>-&gt;<span class="hljs-keyword">public</span>; <span class="hljs-comment">// 这行能被正常执行</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj2</span>-&gt;<span class="hljs-keyword">private</span>; <span class="hljs-comment">// 未定义 private</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj2</span>-&gt;<span class="hljs-keyword">protected</span>; <span class="hljs-comment">// 这行会产生一个致命错误</span><br><br><span class="hljs-variable">$obj2</span>-&gt;<span class="hljs-title function_ invoke__">printHello</span>(); <span class="hljs-comment">// 输出 Public、Protected2 和 Undefined</span><br><br> <br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>方法的访问控制</strong></p><p>类中的方法可以被定义为公有，私有或受保护。如果没有设置这些关键字，则该方公有</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> \* Define MyClass</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span></span><br><span class="hljs-class"></span><br><span class="hljs-class"></span>&#123;<br><br>  <span class="hljs-comment">// 声明一个公有的构造函数</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123; &#125;<br><br> <br><br>  <span class="hljs-comment">// 声明一个公有的方法</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyPublic</span>(<span class="hljs-params"></span>) </span>&#123; &#125;<br><br> <br><br>  <span class="hljs-comment">// 声明一个受保护的方法</span><br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyProtected</span>(<span class="hljs-params"></span>) </span>&#123; &#125;<br><br> <br><br>  <span class="hljs-comment">// 声明一个私有的方法</span><br><br>  <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyPrivate</span>(<span class="hljs-params"></span>) </span>&#123; &#125;<br><br> <br><br>  <span class="hljs-comment">// 此方法为公有</span><br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span><br><span class="hljs-function">  </span>&#123;<br><br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">MyPublic</span>();<br><br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">MyProtected</span>();<br><br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">MyPrivate</span>();<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-variable">$myclass</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>;<br><br><span class="hljs-variable">$myclass</span>-&gt;<span class="hljs-title function_ invoke__">MyPublic</span>(); <span class="hljs-comment">// 这行能被正常执行</span><br><br><span class="hljs-variable">$myclass</span>-&gt;<span class="hljs-title function_ invoke__">MyProtected</span>(); <span class="hljs-comment">// 这行会产生一个致命错误</span><br><br><span class="hljs-variable">$myclass</span>-&gt;<span class="hljs-title function_ invoke__">MyPrivate</span>(); <span class="hljs-comment">// 这行会产生一个致命错误</span><br><br><span class="hljs-variable">$myclass</span>-&gt;<span class="hljs-title function_ invoke__">Foo</span>(); <span class="hljs-comment">// 公有，受保护，私有都可以执行</span><br><br> <br><br> <br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> \* Define MyClass2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MyClass</span></span><br><span class="hljs-class"></span><br><span class="hljs-class"></span>&#123;<br><br>  <span class="hljs-comment">// 此方法为公有</span><br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo2</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span><br><span class="hljs-function">  </span>&#123;<br><br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">MyPublic</span>();<br><br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">MyProtected</span>();<br><br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">MyPrivate</span>(); <span class="hljs-comment">// 这行会产生一个致命错误</span><br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-variable">$myclass2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass2</span>;<br><br><span class="hljs-variable">$myclass2</span>-&gt;<span class="hljs-title function_ invoke__">MyPublic</span>(); <span class="hljs-comment">// 这行能被正常执行</span><br><br><span class="hljs-variable">$myclass2</span>-&gt;<span class="hljs-title function_ invoke__">Foo2</span>(); <span class="hljs-comment">// 公有的和受保护的都可执行，但私有的不行</span><br><br> <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span> </span><br><span class="hljs-class"></span><br><span class="hljs-class"></span>&#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">testPrivate</span>();<br><br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">testPublic</span>();<br><br>  &#125;<br><br> <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testPublic</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Bar::testPublic\n&quot;</span>;<br><br>  &#125;<br><br>  <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testPrivate</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Bar::testPrivate\n&quot;</span>;<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Bar</span> </span><br><span class="hljs-class"></span><br><span class="hljs-class"></span>&#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testPublic</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Foo::testPublic\n&quot;</span>;<br><br>  &#125;<br><br>  <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testPrivate</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Foo::testPrivate\n&quot;</span>;<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-variable">$myFoo</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">foo</span>();<br><br><span class="hljs-variable">$myFoo</span>-&gt;<span class="hljs-title function_ invoke__">test</span>(); <span class="hljs-comment">// Bar::testPrivate </span><br><br>        <span class="hljs-comment">// Foo::testPublic</span><br><br><span class="hljs-meta">?&gt;</span><br><br> <br></code></pre></td></tr></table></figure><p><strong>接口</strong></p><p>使用接口（interface），&#x3D;&#x3D;可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容。&#x3D;&#x3D;</p><p>接口是通过 interface 关键字来定义的&#x3D;&#x3D;，就像定义一个标准的类一样，但其中定义所有的方法都是空的。&#x3D;&#x3D;</p><p>&#x3D;&#x3D;接口中定义的所有方法都必须是公有，这是接口的特性。&#x3D;&#x3D;</p><p>要实现一个接口，使用 implements 操作符。类中必须实现接口中定义的所有方法，否则会报一个致命错误。类可以实现多个接口，用逗号来分隔多个接口的名称。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-comment">// 声明一个&#x27;iTemplate&#x27;接口</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">iTemplate</span></span><br><span class="hljs-class"></span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setVariable</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$var</span></span>)</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getHtml</span>(<span class="hljs-params"><span class="hljs-variable">$template</span></span>)</span>;<br>&#125;<br><span class="hljs-comment">// 实现接口</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Template</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">iTemplate</span></span><br><span class="hljs-class"></span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-variable">$vars</span> = <span class="hljs-keyword">array</span>();<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setVariable</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$var</span></span>)</span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-variable language_">$this</span>-&gt;vars[<span class="hljs-variable">$name</span>] = <span class="hljs-variable">$var</span>;<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getHtml</span>(<span class="hljs-params"><span class="hljs-variable">$template</span></span>)</span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable language_">$this</span>-&gt;vars <span class="hljs-keyword">as</span> <span class="hljs-variable">$name</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>      <span class="hljs-variable">$template</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;&#123;&#x27;</span> . <span class="hljs-variable">$name</span> . <span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-variable">$value</span>, <span class="hljs-variable">$template</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$template</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>常量</strong></p><p>可以把在类中始终保持不变的值定义为常量。在定义和使用常量的时候不需要使用 $ 符号。</p><p>常量的值必须是一个定值，不能是变量，类属性，数学运算的结果或函数调用。</p><p>自 PHP 5.3.0 起，可以用一个变量来动态调用类。但该变量的值不能为关键字（如 self，parent 或 static）。</p><p>实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span></span><br><span class="hljs-class"></span><br><span class="hljs-class"></span>&#123;<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">constant</span> = <span class="hljs-string">&#x27;常量值&#x27;</span>;<br><br> <br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showConstant</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">constant</span> . PHP_EOL;<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-keyword">echo</span> <span class="hljs-title class_">MyClass</span>::<span class="hljs-variable constant_">constant</span> . PHP_EOL;<br><br> <br><br><span class="hljs-variable">$classname</span> = <span class="hljs-string">&quot;MyClass&quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$classname</span>::<span class="hljs-variable constant_">constant</span> . PHP_EOL; <span class="hljs-comment">// 自 5.3.0 起</span><br><br> <br><br><span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>();<br><br><span class="hljs-variable">$class</span>-&gt;<span class="hljs-title function_ invoke__">showConstant</span>();<br><br> <br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$class</span>::<span class="hljs-variable constant_">constant</span> . PHP_EOL; <span class="hljs-comment">// 自 PHP 5.3.0 起</span><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>抽象类</strong></p><p>任何一个类，如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的。</p><p>定义为抽象的类不能被实例化。</p><p>被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现。</p><p>继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；另外，这些方法的访问控制必须和父类中一样（或者更为宽松）。例如某个抽象方法被声明为受保护的，那么子类中实现的方法就应该声明为受保护的或者公有的，而不能定义为私有的。</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractClass</span></span><br><span class="hljs-class"></span><br><span class="hljs-class"></span>&#123;<br><br> <span class="hljs-comment">// 强制要求子类定义这些方法</span><br><br>  <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getValue</span>(<span class="hljs-params"></span>)</span>;<br><br>  <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prefixValue</span>(<span class="hljs-params"><span class="hljs-variable">$prefix</span></span>)</span>;<br><br> <br><br>  <span class="hljs-comment">// 普通方法（非抽象方法）</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printOut</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">print</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getValue</span>() . PHP_EOL;<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteClass1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractClass</span></span><br><span class="hljs-class"></span><br><span class="hljs-class"></span>&#123;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getValue</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ConcreteClass1&quot;</span>;<br><br>  &#125;<br><br> <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prefixValue</span>(<span class="hljs-params"><span class="hljs-variable">$prefix</span></span>) </span>&#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$prefix&#125;</span>ConcreteClass1&quot;</span>;<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteClass2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractClass</span></span><br><span class="hljs-class"></span><br><span class="hljs-class"></span>&#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getValue</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ConcreteClass2&quot;</span>;<br><br>  &#125;<br><br> <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prefixValue</span>(<span class="hljs-params"><span class="hljs-variable">$prefix</span></span>) </span>&#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$prefix&#125;</span>ConcreteClass2&quot;</span>;<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-variable">$class1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteClass1</span>;<br><br><span class="hljs-variable">$class1</span>-&gt;<span class="hljs-title function_ invoke__">printOut</span>();<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$class1</span>-&gt;<span class="hljs-title function_ invoke__">prefixValue</span>(<span class="hljs-string">&#x27;FOO_&#x27;</span>) . PHP_EOL;<br><br> <br><br><span class="hljs-variable">$class2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteClass2</span>;<br><br><span class="hljs-variable">$class2</span>-&gt;<span class="hljs-title function_ invoke__">printOut</span>();<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$class2</span>-&gt;<span class="hljs-title function_ invoke__">prefixValue</span>(<span class="hljs-string">&#x27;FOO_&#x27;</span>) . PHP_EOL;<br><br><span class="hljs-meta">?&gt;</span><br><br>执行以上代码，输出结果为：<br><br> <br><br>ConcreteClass1<br><br>FOO_ConcreteClass1<br><br>ConcreteClass2<br><br>FOO_ConcreteClass2<br><br>此外，子类方法可以包含父类抽象方法中不存在的可选参数。例如，子类定义了一个可选参数，而父类抽象方法的声明里没有，则都是可以正常运行的。<br><br> <br><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractClass</span></span><br><span class="hljs-class"></span><br><span class="hljs-class"></span>&#123;<br><br>  <span class="hljs-comment">// 我们的抽象方法仅需要定义需要的参数</span><br><br>  <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prefixName</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>;<br><br> <br><br>&#125;<br><br> <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractClass</span></span><br><span class="hljs-class"></span><br><span class="hljs-class"></span>&#123;<br><br> <br><br>  <span class="hljs-comment">// 我们的子类可以定义父类签名中不存在的可选参数</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prefixName</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$separator</span> = <span class="hljs-string">&quot;.&quot;</span></span>) </span>&#123;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$name</span> == <span class="hljs-string">&quot;Pacman&quot;</span>) &#123;<br><br>      <span class="hljs-variable">$prefix</span> = <span class="hljs-string">&quot;Mr&quot;</span>;<br><br>​    &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$name</span> == <span class="hljs-string">&quot;Pacwoman&quot;</span>) &#123;<br><br>​      <span class="hljs-variable">$prefix</span> = <span class="hljs-string">&quot;Mrs&quot;</span>;<br><br>​    &#125; <span class="hljs-keyword">else</span> &#123;<br><br>​      <span class="hljs-variable">$prefix</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>​    &#125;<br><br>​    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$prefix&#125;</span><span class="hljs-subst">&#123;$separator&#125;</span> <span class="hljs-subst">&#123;$name&#125;</span>&quot;</span>;<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteClass</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$class</span>-&gt;<span class="hljs-title function_ invoke__">prefixName</span>(<span class="hljs-string">&quot;Pacman&quot;</span>), <span class="hljs-string">&quot;\n&quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$class</span>-&gt;<span class="hljs-title function_ invoke__">prefixName</span>(<span class="hljs-string">&quot;Pacwoman&quot;</span>), <span class="hljs-string">&quot;\n&quot;</span>;<br><br><span class="hljs-meta">?&gt;</span><br><br>输出结果为：<br><br>Mr. Pacman<br><br>Mrs. Pacwoman<br><br> <br></code></pre></td></tr></table></figure><p><strong>接口与抽象类</strong></p><ol><li>接口</li></ol><p>（1）对接口的使用是通过关键字implements</p><p>（2）接口不能定义成员变量（包括类静态变量），能定义常量</p><p>（3）子类必须实现接口定义的所有方法</p><p>（4）接口只能定义不能实现该方法</p><p>（5）接口没有构造函数</p><p>（6）接口中的方法和实现它的类默认都是public类型的</p><ol start="2"><li>抽象类</li></ol><p>（1）对抽象类的使用是通过关键字extends</p><p>（2）不能被实例化，可以定义子类必须实现的方法</p><p>（3）子类必须定义父类中的所有抽象方法，这些方法的访问控制必须和父类中一样（或者更为宽松）</p><p>（4）如一个类中有一个抽象方法，则该类必须定义为抽象类</p><p>（5）抽象类可以有构造函数</p><p>（6）抽象类中的方法可以使用private,protected,public来修饰。</p><p>（7）一个类可以同时实现多个接口，但一个类只能继承于一个抽象类。</p><p><strong>Static</strong> <strong>关键字</strong></p><p>声明类属性或方法为 static(静态)，就可以不实例化类而直接访问。</p><p>静态属性不能通过一个类已实例化的对象来访问（但静态方法可以）。</p><p>由于静态方法不需要通过对象即可调用，所以伪变量 $this 在静态方法中不可用。</p><p>静态属性不可以由对象通过 -&gt; 操作符来访问。</p><p>自 PHP 5.3.0 起，可以用一个变量来动态调用类。但该变量的值不能为关键字 self，parent 或 static。</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>&#123;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$my_static</span> = <span class="hljs-string">&#x27;foo&#x27;</span>;<br><br> <br><br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">staticValue</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable">$my_static</span>;<br><br> &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-keyword">print</span> <span class="hljs-title class_">Foo</span>::<span class="hljs-variable">$my_static</span> . PHP_EOL;<br><br><span class="hljs-variable">$foo</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>();<br><br> <br><br><span class="hljs-keyword">print</span> <span class="hljs-variable">$foo</span>-&gt;<span class="hljs-title function_ invoke__">staticValue</span>() . PHP_EOL;<br><br><span class="hljs-meta">?&gt;</span>  <br><br>执行以上程序，输出结果为：<br><br> <br><br>foo<br><br>Foo<br></code></pre></td></tr></table></figure><p><strong>Final</strong> <strong>关键字</strong></p><p>PHP 5 新增了一个 final 关键字。如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承。</p><p>以下代码执行会报错：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseClass</span> </span>&#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;BaseClass::test() called&quot;</span> . PHP_EOL;<br><br>  &#125;<br><br>  <br><br>  <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">moreTesting</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;BaseClass::moreTesting() called&quot;</span> . PHP_EOL;<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChildClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseClass</span> </span>&#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">moreTesting</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ChildClass::moreTesting() called&quot;</span> . PHP_EOL;<br><br>  &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 报错信息 Fatal error: Cannot override final method BaseClass::moreTesting()</span><br><br><span class="hljs-meta">?&gt;</span><br><br>调用父类构造方法<br><br>PHP 不会在子类的构造方法中自动的调用父类的构造方法。要执行父类的构造方法，需要在子类的构造方法中调用 <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">__construct</span>() 。<br><br> <br><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseClass</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;BaseClass 类中构造方法&quot;</span> . PHP_EOL;<br><br>  &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseClass</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">__construct</span>(); <span class="hljs-comment">// 子类构造方法不能自动调用父类的构造方法</span><br><br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;SubClass 类中构造方法&quot;</span> . PHP_EOL;<br><br>  &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OtherSubClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseClass</span> </span>&#123;<br><br>  <span class="hljs-comment">// 继承 BaseClass 的构造方法</span><br><br>&#125;<br><br> <br><br><span class="hljs-comment">// 调用 BaseClass 构造方法</span><br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseClass</span>();<br><br> <br><br><span class="hljs-comment">// 调用 BaseClass、SubClass 构造方法</span><br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubClass</span>();<br><br> <br><br><span class="hljs-comment">// 调用 BaseClass 构造方法</span><br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OtherSubClass</span>();<br><br><span class="hljs-meta">?&gt;</span><br><br>执行以上程序，输出结果为：<br><br> <br><br>BaseClass 类中构造方法<br><br>BaseClass 类中构造方法<br><br>SubClass 类中构造方法<br><br>BaseClass 类中构造方法<br><br> <br></code></pre></td></tr></table></figure><h2 id="10-PHP超级全局变量"><a href="#10-PHP超级全局变量" class="headerlink" title="10.     PHP超级全局变量"></a>10.     PHP超级全局变量</h2><p>PHP超级全局变量列表：</p><ul><li><p>$GLOBALS　　一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</p></li><li><p>$_SERVER　　一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组</p></li><li><p>$_REQUEST　　用于收集HTML表单提交的数据。</p></li></ul><p>它可以获取 cookie get post </p><ul><li><p>$_POST　　广泛应用于收集表单数据，在HTML form标签的指定该属性：”method&#x3D;”post”。</p></li><li><p>$_GET　　广泛应用于收集表单数据，在HTML form标签的指定该属性：”method&#x3D;”get”。</p></li></ul><p>Array []</p><ul><li><p>$_FILES　　</p></li><li><p>$_ENV　　</p></li><li><p>$_COOKIE　　</p></li><li><p>$_SESSION</p></li></ul> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><br><span class="hljs-comment">// php预定义方法</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;y&#x27;</span>];<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>];<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SERVER_NAME&#x27;</span>];<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_HOST&#x27;</span>];<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="11-PHP-Include-文件"><a href="#11-PHP-Include-文件" class="headerlink" title="11.     PHP Include 文件"></a>11.     PHP Include 文件</h2><p>服务器端包含 (SSI) 用于创建可在多个页面重复使用的函数、页眉、页脚或元素。</p><p>include （或 require）语句会获取指定文件中存在的所有文本&#x2F;代码&#x2F;标记，并复制到使用 include 语句的文件中。</p><p>包含文件很有用，如果您需要在网站的多张页面上引用相同的 PHP、HTML 或文本的话。</p><p>PHP include 和 require 语句</p><p>通过 include 或 require 语句，可以将 PHP 文件的内容插入另一个 PHP 文件（在服务器执行它之前）。</p><p>include 和 require 语句是相同的，除了错误处理方面：</p><p>require 会生成致命错误（E_COMPILE_ERROR）并停止脚本</p><p>include 只生成警告（E_WARNING），并且脚本会继续</p><p>因此，如果您希望继续执行，并向用户输出结果，即使包含文件已丢失，那么请使用 include。否则，在框架、CMS 或者复杂的 PHP 应用程序编程中，请始终使用 require 向执行流引用关键文件。这有助于提高应用程序的安全性和完整性，在某个关键文件意外丢失的情况下。</p><p>包含文件省去了大量的工作。这意味着您可以为所有页面创建标准页头、页脚或者菜单文件。然后，在页头需要更新时，您只需更新这个页头包含文件即可。</p><p>语法</p><p>include ‘filename’;</p><p>或</p><p>require ‘filename’;</p><h2 id="12-PHP-文件处理"><a href="#12-PHP-文件处理" class="headerlink" title="12.     PHP 文件处理"></a>12.     PHP 文件处理</h2><h3 id="12-1-PHP-操作文件"><a href="#12-1-PHP-操作文件" class="headerlink" title="12.1. PHP 操作文件"></a>12.1. PHP 操作文件</h3><p>PHP 拥有的多种函数可供创建、读取、上传以及编辑文件。</p><p>注意：请谨慎操作文件！</p><p>当您操作文件时必须非常小心。如果您操作失误，可能会造成非常严重的破坏。常见的错误是：</p><p>编辑错误的文件</p><p>被垃圾数据填满硬盘</p><p>意外删除文件内容</p><p>PHP readfile() 函数</p><p>readfile() 函数读取文件，并把它写入输出缓冲。</p><p>假设我们有一个名为 “webdictionary.txt” 的文本文件，存放在服务器上，就像这样：</p><p>AJAX &#x3D; Asynchronous JavaScript and XML</p><p>CSS &#x3D; Cascading Style Sheets</p><p>HTML &#x3D; Hyper Text Markup Language</p><p>PHP &#x3D; PHP Hypertext Preprocessor</p><p>SQL &#x3D; Structured Query Language</p><p>SVG &#x3D; Scalable Vector Graphics</p><p>XML &#x3D; EXtensible Markup Language</p><p>读取此文件并写到输出流的 PHP 代码如下（如读取成功则 readfile() 函数返回字节数）：</p><p>实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-string">&quot;webdictionary.txt&quot;</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="12-2-PHP-文件打开-x2F-读取-x2F-关闭"><a href="#12-2-PHP-文件打开-x2F-读取-x2F-关闭" class="headerlink" title="12.2. PHP 文件打开&#x2F;读取&#x2F;关闭"></a>12.2. PHP 文件打开&#x2F;读取&#x2F;关闭</h3><p>在本节中，我们向您讲解如何在服务器上打开、读取以及关闭文件。</p><p>PHP Open File - fopen()</p><p>打开文件的更好的方法是通过 fopen() 函数。此函数为您提供比 readfile() 函数更多的选项。</p><p>在课程中，我们将使用文本文件 “webdictionary.txt”：</p><p>AJAX &#x3D; Asynchronous JavaScript and XML</p><p>CSS &#x3D; Cascading Style Sheets</p><p>HTML &#x3D; Hyper Text Markup Language</p><p>PHP &#x3D; PHP Hypertext Preprocessor</p><p>SQL &#x3D; Structured Query Language</p><p>SVG &#x3D; Scalable Vector Graphics</p><p>XML &#x3D; EXtensible Markup Language</p><p>fopen() 的第一个参数包含被打开的文件名，第二个参数规定打开文件的模式。如果 fopen() 函数未能打开指定的文件，下面的例子会生成一段消息：</p><p>实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;webdictionary.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Unable to open file!&quot;</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-string">&quot;webdictionary.txt&quot;</span>));<br><br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>提示：我们接下来将学习 fread() 以及 fclose() 函数。</p><p>文件会以如下模式之一打开：</p><p><img src="/2022/08/09/PHP%E5%9F%BA%E7%A1%80/%E8%AF%BB%E5%86%99" alt="1"></p><p>PHP 读取文件 - fread()</p><p>fread() 函数读取打开的文件。</p><p>fread() 的第一个参数包含待读取文件的文件名，第二个参数规定待读取的最大字节数。</p><p>如下 PHP 代码把 “webdictionary.txt” 文件读至结尾：</p><p>fread($myfile,filesize(“webdictionary.txt”));</p><p>PHP 关闭文件 - fclose()</p><p>fclose() 函数用于关闭打开的文件。</p><p>注释：用完文件后把它们全部关闭是一个良好的编程习惯。您并不想打开的文件占用您的服务器资源。</p><p>fclose() 需要待关闭文件的名称（或者存有文件名的变量）：</p><?php$myfile = fopen("webdictionary.txt", "r");// some code to be executed....fclose($myfile);?><p>PHP 读取单行文件 - fgets()</p><p>fgets() 函数用于从文件读取单行。</p><p>下例输出 “webdictionary.txt” 文件的首行：</p><p>实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;webdictionary.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Unable to open file!&quot;</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$myfile</span>);<br><br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>运行实例</p><p>注释：调用 fgets() 函数之后，文件指针会移动到下一行。</p><p>PHP 检查 End-Of-File - feof()</p><p>feof() 函数检查是否已到达 “end-of-file” (EOF)。</p><p>feof() 对于遍历未知长度的数据很有用。</p><p>feof() 函数检查是否已到达文件末尾(EOF)</p><p>下例逐行读取 “webdictionary.txt” 文件，直到 end-of-file：</p><p>实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;webdictionary.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Unable to open file!&quot;</span>);<br><br><span class="hljs-comment">// 输出单行直到 end-of-file</span><br><br><span class="hljs-keyword">while</span>(!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$myfile</span>)) &#123;<br><br> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$myfile</span>) . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br>&#125;<br><br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>运行实例</p><p>PHP 读取单字符 - fgetc()</p><p>fgetc() 函数用于从文件中读取单个字符。</p><p>下例逐字符读取 “webdictionary.txt” 文件，直到 end-of-file：</p><p>实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;webdictionary.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Unable to open file!&quot;</span>);<br><br><span class="hljs-comment">// 输出单字符直到 end-of-file</span><br><br><span class="hljs-keyword">while</span>(!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$myfile</span>)) &#123;<br><br> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgetc</span>(<span class="hljs-variable">$myfile</span>);<br><br>&#125;<br><br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>运行实例</p><p>注释：在调用 fgetc() 函数之后，文件指针会移动到下一个字符。</p><p>在本节中，我们将为您讲解如何在服务器上创建并写入文件。</p><p>PHP 创建文件 - fopen()</p><p>fopen() 函数也用于创建文件。也许有点混乱，但是在 PHP 中，创建文件所用的函数与打开文件的相同。</p><p>如果您用 fopen() 打开并不存在的文件，此函数会创建文件，假定文件被打开为写入（w）或增加（a）。</p><p>下面的例子创建名为 “testfile.txt” 的新文件。此文件将被创建于 PHP 代码所在的相同目录中：</p><p>实例</p><p>$myfile &#x3D; fopen(“testfile.txt”, “w”)</p><p>PHP 文件权限</p><p>如果您试图运行这段代码时发生错误，请检查您是否有向硬盘写入信息的 PHP 文件访问权限。</p><p>PHP 写入文件 - fwrite()</p><p>fwrite() 函数用于写入文件。</p><p>fwrite() 的第一个参数包含要写入的文件的文件名，第二个参数是被写的字符串。</p><p>下面的例子把姓名写入名为 “newfile.txt” 的新文件中：</p><p>实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;newfile.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Unable to open file!&quot;</span>);<br><br><span class="hljs-variable">$txt</span> = <span class="hljs-string">&quot;Bill Gates\n&quot;</span>;<br><br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>, <span class="hljs-variable">$txt</span>);<br><br><span class="hljs-variable">$txt</span> = <span class="hljs-string">&quot;Steve Jobs\n&quot;</span>;<br><br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>, <span class="hljs-variable">$txt</span>);<br><br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>请注意，我们向文件 “newfile.txt” 写了两次。在每次我们向文件写入时，在我们发送的字符串 $txt 中，第一次包含 “Bill Gates”，第二次包含 “Steve Jobs”。在写入完成后，我们使用 fclose() 函数来关闭文件。</p><p>如果我们打开 “newfile.txt” 文件，它应该是这样的：</p><p>Bill Gates</p><p>Steve Jobs</p><p>PHP 覆盖（Overwriting）</p><p>如果现在 “newfile.txt” 包含了一些数据，我们可以展示在写入已有文件时发生的的事情。所有已存在的数据会被擦除并以一个新文件开始。</p><p>在下面的例子中，我们打开一个已存在的文件 “newfile.txt”，并向其中写入了一些新数据：</p><p>实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;newfile.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Unable to open file!&quot;</span>);<br><br><span class="hljs-variable">$txt</span> = <span class="hljs-string">&quot;Mickey Mouse\n&quot;</span>;<br><br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>, <span class="hljs-variable">$txt</span>);<br><br><span class="hljs-variable">$txt</span> = <span class="hljs-string">&quot;Minnie Mouse\n&quot;</span>;<br><br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>, <span class="hljs-variable">$txt</span>);<br><br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>如果现在我们打开这个 “newfile.txt” 文件，Bill 和 Steve 都已消失，只剩下我们刚写入的数据：</p><p>Mickey Mouse</p><p>Minnie Mouse</p><h3 id="12-3-文件的-复制-删除-重名"><a href="#12-3-文件的-复制-删除-重名" class="headerlink" title="12.3. 文件的 复制 删除 重名"></a>12.3. 文件的 复制 删除 重名</h3><p>php文件重命名：函数rename()。</p><p>php文件复制：函数copy();</p><p>php文件删除：函数unlink();</p><h3 id="12-4-文件的判断"><a href="#12-4-文件的判断" class="headerlink" title="12.4. 文件的判断"></a>12.4. 文件的判断</h3><p>file_exists() 判断文件是否存在</p><p>is_file() 是否为文件。</p><h2 id="13-PHP获取文件属性"><a href="#13-PHP获取文件属性" class="headerlink" title="13.     PHP获取文件属性"></a>13.     PHP获取文件属性</h2><p>当我们在程序中操作文件时，可能会使用到文件的一些常见属性，比如文件的大小、类型、修改时间、访问时间以及权限等等。PHP 中提供了非常全面的用来获取这些属性的内置函数，如下表所示。</p><p><img src="/2022/08/09/PHP%E5%9F%BA%E7%A1%80/php%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0" alt="3"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;test.txt&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$file</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;文件不存在，程序退出！&#x27;</span>);<br> <br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>.<span class="hljs-string">&#x27; 文件大小是：&#x27;</span>.<span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$file</span>).<span class="hljs-string">&#x27; 个字节&lt;br&gt;&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_readable</span>(<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>.<span class="hljs-string">&#x27; 文件是可读的。&lt;br&gt;&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>.<span class="hljs-string">&#x27; 文件是不可读的。&lt;br&gt;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_writable</span>(<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>.<span class="hljs-string">&#x27; 文件是可写的。&lt;br&gt;&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>.<span class="hljs-string">&#x27; 文件是不可写的。&lt;br&gt;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_executable</span>(<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>.<span class="hljs-string">&#x27; 文件是可执行的。&lt;br&gt;&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>.<span class="hljs-string">&#x27; 文件是不可执行的。&lt;br&gt;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;文件的创建时间是：&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;Y-m-d H:i:s&#x27;</span>,<span class="hljs-title function_ invoke__">filectime</span>(<span class="hljs-variable">$file</span>)).<span class="hljs-string">&#x27;。&lt;br&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;文件的修改时间是：&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;Y-m-d H:i:s&#x27;</span>,<span class="hljs-title function_ invoke__">filemtime</span>(<span class="hljs-variable">$file</span>)).<span class="hljs-string">&#x27;。&lt;br&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;文件上次的访问时间是：&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;Y-m-d H:i:s&#x27;</span>,<span class="hljs-title function_ invoke__">fileatime</span>(<span class="hljs-variable">$file</span>)).<span class="hljs-string">&#x27;。&lt;br&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="14-PHP目录操作"><a href="#14-PHP目录操作" class="headerlink" title="14.     PHP目录操作"></a>14.     PHP目录操作</h2><p>目录操作</p><p>新建目录：mkdir(路径，权限，递归创建)</p><p>删除目录：rmdir()</p><p>移动（改名）：rename()</p><p>获取目录内容：</p><p>&#x2F;&#x2F;打开目录</p><p>目录句柄 &#x3D; opendir()</p><p>&#x2F;&#x2F;读取目录</p><p>文件名 &#x3D; readdir(目录句柄)</p><p>依次读取文件名，同时向下移动文件句柄指针，读取不到则返回false</p><p>&#x2F;&#x2F;关闭目录</p><p>closedir()</p><p>当前目录. 上级目录用..</p><p>递归读取目录内容：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">//递归遍历目录</span><br><br><span class="hljs-variable">$dirfile</span>=<span class="hljs-string">&quot;c:/&quot;</span>;<br><br> <br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tree</span>(<span class="hljs-params"><span class="hljs-variable">$dirfile</span></span>)</span>&#123;<br><br>  <span class="hljs-variable">$dir</span> = <span class="hljs-title function_ invoke__">opendir</span>(<span class="hljs-variable">$dirfile</span>);<br><br>  <span class="hljs-keyword">while</span> ((<span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">readdir</span>(<span class="hljs-variable">$dir</span>)) !== <span class="hljs-literal">false</span>)<br><br>  &#123;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$dirfile</span><span class="hljs-subst">&#123;$file&#125;</span>&quot;</span>) &amp;&amp; (<span class="hljs-variable">$file</span> !=<span class="hljs-string">&quot;.&quot;</span>) &amp;&amp; (<span class="hljs-variable">$file</span> !=<span class="hljs-string">&quot;..&quot;</span>))&#123;<br><br>      <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_readable</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$dirfile</span><span class="hljs-subst">&#123;$file&#125;</span>&quot;</span>))&#123;<br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;目录 <span class="hljs-subst">$dirfile</span><span class="hljs-subst">&#123;$file&#125;</span> &lt;/br&gt;&quot;</span>;<br><br>        <span class="hljs-title function_ invoke__">tree</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$dirfile</span><span class="hljs-subst">&#123;$file&#125;</span>&quot;</span>);<br><br>      &#125;<span class="hljs-keyword">else</span>&#123;<br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;目录 <span class="hljs-subst">$dirfile</span><span class="hljs-subst">&#123;$file&#125;</span> 不可访问&lt;/br&gt;&quot;</span>;<br><br>      &#125;<br><br> <br><br>    &#125;<br><br>    <span class="hljs-keyword">else</span>&#123;<br><br>      <span class="hljs-keyword">if</span>( (<span class="hljs-variable">$file</span> !=<span class="hljs-string">&quot;.&quot;</span>) &amp;&amp; (<span class="hljs-variable">$file</span> !=<span class="hljs-string">&quot;..&quot;</span>))&#123;<br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;文件 <span class="hljs-subst">$dirfile</span>/<span class="hljs-subst">&#123;$file&#125;</span> &lt;/br&gt;&quot;</span>;<br><br>      &#125;<br><br> <br><br>    &#125;<br><br>  &#125;<br><br>  <span class="hljs-title function_ invoke__">closedir</span>(<span class="hljs-variable">$dir</span>);<br><br>&#125;<br><br> <br><br><span class="hljs-title function_ invoke__">tree</span>(<span class="hljs-variable">$dirfile</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="15-命名空间"><a href="#15-命名空间" class="headerlink" title="15.     命名空间"></a>15.     命名空间</h2><p><strong>PHP</strong> <strong>命名空间可以解决以下两类问题：</strong></p><p>1.用户编写的代码与PHP内部的类&#x2F;函数&#x2F;常量或第三方类&#x2F;函数&#x2F;常量之间的名字冲突。</p><p>2.为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，以提高源代码的可读性。</p><p>命名空间（可以理解为创建文件夹）</p><p>定义：命名空间namespace，是指人为的将内存进行分隔，让不同内存区域的同名结构共存，从而解决在大型项目中可能出现的重名结构的问题</p><p>语法：namespace 空间名</p><p>作用：不同的空间可以有同名的结构，如：类</p><p>空间元素：函数，常量，类，不包括变量！！</p><p>子空间（子文件夹）</p><p>定义：命名空间内部再划分一个命名空间，让每个小空间独立起来</p><p>语法:</p><p>​     namespace 空间名</p><p>​     namespace 空间名\子空间</p><p>命名空间访问 （url）</p><p><strong>非限定名称访问</strong>：直接访问空间元素的名字（只访问自己命名空间的元素）</p><p><strong>限定名称访问</strong>：使用自己当前的子空间名字+ \ + 元素名字</p><p><strong>完全限定名称访问</strong>：\ + 全局空间 + \ + 元素名字</p><p>注：任何空间元素访问，只针对函数，类，常量</p><p>全局空间（C盘）</p><p>如果定义了命名空间，非限定名称的寻找系统常量的方式：</p><p>首先：在自己的空间内找</p><p>然后：如果找不到元素</p><p>​    系统常量–&gt;进入全局空间寻找</p><p>​    系统类 –&gt; 不会自动进入全局空间寻找，而是会报错</p><p>命名空间的引入</p><p>1.空间引入方式：use关键字</p><p>​    1. 引入类：use 空间名\类名</p><p>​    2. 引入函数：use function 空间名\函数名</p><p>​    3. 引入常量：use const 空间名\常量名</p><p>2.当引入元素时重名，通过 as 来起别名</p><p>  use 空间名\类名 as 别名</p><p>3.引入多个元素</p><p>​    use 空间名{</p><p>​        类名，</p><p>​        function 函数名，</p><p>​        const 常量</p><p>​    }     </p><p>\4. 引入空间</p><p>  use 空间名 </p><h2 id="16-正则表达式"><a href="#16-正则表达式" class="headerlink" title="16.     正则表达式"></a>16.     正则表达式</h2><p><strong>正则表达式简介</strong></p><p>正则表达式是用于描述字符排列和匹配模式的一种语法规则。它主要用于字符串的模式分割、匹配、查找及替换操作。到目前为止，我们前面所用过的精确（文本）匹配也是一种正则表达式。</p><p>在PHP中，正则表达式一般是由正规字符和一些特殊字符（类似于通配符）联合构成的一个文本模式的程序性描述。</p><p>正则表达式较重要和较有用的角色是验证用户数据的有效性检查。PHP中，正则表达式有三个作用：</p><p> 匹配，也常常用于从字符串中析取信息。</p><p> 用新文本代替匹配文本。</p><p> 将一个字符串拆分为一组更小的信息块。</p><p><strong>正则表达式的基本语法</strong></p><p>PCRE库函数中，正则匹配模式使用分隔符与元字符组成，分隔符可以是非数字、非反斜线、非空格的任意字符。经常使用的分隔符是正斜线(&#x2F;)、hash符号(#) 以及取反符号(~)</p><p>元字符是用于构造规则表达式的具有特殊含义的字符。如果要在正则表达式中包含元字符本身，必须在其前加上”\”进行转义 </p><p>​                                    </p><p>元字符         说明</p><p>*               0次、1次或多次匹配其前的原子</p><p>+               1次或多次匹配其前的原子</p><p>?               0次或1次匹配其前的原子</p><p>|               匹配两个或多个选择</p><p>^               匹配字符串串首的原子</p><p>$               匹配字符串串尾的原子</p><p>[]              匹配方括号中的任一原子</p><p>[^]          匹配除方括号中的原子外的任何字符</p><p>{m}         表示其前原子恰好出现m次</p><p>{m,n}          表示其前原子至少出现m次，至少出现n次(n&gt;m)</p><p>{m,}           表示其前原子出现不少于m次</p><p>()              整体表示一个原子</p><p>.               匹配除换行之外的任何一个字符</p><p><strong>边界限制</strong></p><p>在某些情况下，需要对匹配范围进行限定，以获得更准确的匹配结果。“^”和“$”分别指定字符串的开始和结束。</p><p>例如，在字符串“Tom and Jerry chased each other in the house until tom’s uncel come in”中</p><p>元字符“^” 置于字符串的开始确保模式匹配出现在字符串首端；</p><p>^Tom   </p><p>元字符“$” 置于字符串的结束，确保模式匹配出现字符串尾端。</p><p>in$ </p><p>如果不加边界限制元字符，将获得更多的匹配结果。</p><p>^Tom$精确匹配     Tom模糊匹配</p><p><strong>重复匹配</strong></p><p>正则表达式中有一些用于重复匹配某些原子的元字符：“?”、“*”、“+”。他们主要的不同是重复匹配的次数不同。</p><p>元字符“?”:表示0次或1次匹配紧接在其前的原子。</p><p>例如：colou?r匹配“colour”或“color”。</p><p>元字符“*”:表示0次、1次或多次匹配紧接在其前的原子。</p><p>例如：zo*可以匹配z、zoo</p><p><code>&lt;[A-Za-z][A-Za-z0-9]*&gt;可以匹</code>配“<P>”、“<hl>”或“<Body>”等HTML标签，并且不严格的控制大小写。</Body></hl></P></p><p>元字符“+”:表示1次或多次匹配紧接在其前的原子。</p><p>例如：go+gle匹配“gogle”、“google”或“gooogle”等中间含有多个o的字符串。</p><p><code>例子十六进制数字，匹配表达式是0?[ xX][0-9a-fA-F]+,可以匹配“0x9B3C”或者“X800”等。</code></p><p>元字符 “.”</p><p><code>元字符“.”匹配除换行符外任何一个字符，相当于[^\n](Unix系统)或[^\r\n](windows系统)。</code></p><p>例如：pr.y可以匹配的字符串“prey”、“pray”或“pr%y”等。</p><p>通常可以使用“.*”组合来匹配除换行符外的任何字符。在一些书籍中也称其为“全匹配符” 或 “单含匹配符”。</p><p>例如：</p><p>^a.*z$表示可以匹配字母“a”开头，字母“z”结束的任意不包括换行符的字符串。</p><p>.+也可以完成类似的匹配功能所不同的是其至少匹配一个字符。</p><p>^a.+z$将不匹配字符串“az”。</p><p>重复匹配</p><p>元字符“{}”准确地指定原子重复的次数，指定所匹配的原子出现的次数。</p><p>“{m}”表示其前原子恰好出现m次；</p><p>“{m，n}”表示其前原子至少出现m次，至多出现n次；</p><p>“{m，}”表示其前原子出现不少于m次。</p><p>例如：</p><p>zo{1,3}m只能匹配字符串“zom”、“zoom”、或“zooom”。</p><p>zo{3}m只能匹配字符串“zooom”</p><p>zo{3，}m可以匹配以 “z” 开头，“m”结束，中间至少为3个“o”的字符串。</p><p>bo{0,1}u可以匹配字符串“bought a butter” 中的“bou”和“bu”,等价于bo?u。</p><p>原子表 －方括号表达式</p><p>原子表”[]”中存放一组原子，彼此地位平等，且仅匹配其中的一个原子。如果想匹配一个 ”a” 或 ”e” 使用 [ae]。</p><p>例如: Pr[ae]y 匹配 ”Pray” 或者 ”Prey ”。</p><p>原子表 ”[^]” 或者称为排除原子表，匹配除表内原子外的任意一个字符。</p><p><code>例如：p[^u]匹配“part”中的“pa”，但无法匹配“computer”中的“pu”因为“u”在匹配中被排除。</code></p><p>原子表“[-]”用于连接一组按ASCII码顺序排列的原子，简化书写。 </p><p>例如：x[0123456789]可以写成x[0-9],用来匹配一个由 “x” 字母与一个数字组成的字符串。</p><p>例如：</p><p>[a-zA-Z]匹配所有大小写字母</p><p><code>^[a-z][0-9]$匹配比如“z2”、 “t6” 、“g7”</code></p><p><code>0[xX][0-9a-fA-F]匹配一个简单的十六进制数字，如“0x9”。</code></p><p>[^0-9a-zA-Z_]匹配除英文字母、数字和下划线以外任何一个字符，其等价于\W。 </p><p>模式选择符 </p><p>元字符“|”又称模式选择符。在正则表达式中匹配两个或更多的选择之一。</p><p>例如：在字符串“There are many apples and pears.”中，apple|pear在第一次运行时匹配“apple”；再次运行时匹配“ pear”。也可以继续增加选项，如：   apple|pear|banana|lemon</p><p>POSIX风格预定义的正则表达式的字符类：</p><p>   [[:alnum:]]     字母和数字字符</p><p>   [[:alpha:]]       大小写字母</p><p>   [[:lower:]]      小写字母</p><p>   [[:upper:]]      大写字母</p><p>   [[:digit:]]       数字0-9</p><p>   [[:xdigit:]]      十六进制数字</p><p>   [[:punct:]]      标点符号，包括上档键!@</p><p>   [[:blank:]]      TAB制表符和空格</p><p>   [[:space:]]      任何空白字符,换行,回车符</p><p>   [[:cntrl:]]       控制字符（TAB，退格）</p><p>模式单元 </p><p>元字符“（）”将其中的正则表达式变为原子（或称模式单元）使用。与数学表达式中的括号类似，“（）”可以做一个单元被单独使用。</p><p>例如：</p><p>(Dog)+匹配的“Dog”、“DogDog”、“DogDogDog”……..,因为紧接着“+”前的原子是元字符“（）”括起来的字符串“Dog”。</p><p>You (very)+ old匹配“You very old”、 “You very very old”</p><p>Hello (world|earth)匹配“Hello world”、“Hello earth”</p><p>一个模式单元中的表达式将被优先匹配或运算</p><p><strong>特殊字符</strong></p><p>所谓特殊字符，就是一些有特殊含义的字符，如上面说的”*.txt”中的*，简单的说就是表示任何字符串的意思。如果要查找文件名中有＊的文件，则需要对＊进行转义，即在其前加一个\。ls *.txt。正则表达式有以下特殊字符。</p><img src="/2022/08/09/PHP%E5%9F%BA%E7%A1%80/php字符" alt="1" style="zoom:80%;"> <p>模式匹配的顺序</p><p>在使用正则表达式时，需要注意匹配的顺序。通常，正则表达式按照由左至右的顺序依次匹配。</p><p>模式匹配的顺序（从高到低）</p><p>​    顺序   元字符     说明</p><p>   1     （）          模式单元 </p><p>   2     ？* +{}   重复匹配</p><p>   3      ^$       边界限制</p><p>   4       |        模式选择</p><p><strong>元字符表</strong></p><p>字符   描述</p><p>\   将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\’ 匹配 “\” 而 “(” 则匹配 “(”。</p><p>^   匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</p><p><code>$   匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$</code> 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</p><p>*   匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</p><p>+   匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</p><p>?   匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 中的”do” 。? 等价于 {0,1}。</p><p>{n} n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</p><p>{n,} n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</p><p>{n,m}  m 和 n 均为非负整数，其中n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</p><p>?   当 该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</p><p>.   匹配除 “\n” 之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用象 ‘[.\n]’ 的模式。</p><p>(pattern) 匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘′或‘’。</p><p>(?:pattern)  匹 配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。</p><p>(?&#x3D;pattern)  正 向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，’Windows (?&#x3D;95|98|NT|2000)’ 能匹配 “Windows 2000″ 中的 “Windows” ，但不能匹配 “Windows 3.1″ 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</p><p>(?!pattern)  负 向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如’Windows (?!95|98|NT|2000)’ 能匹配 “Windows 3.1″ 中的 “Windows”，但不能匹配 “Windows 2000″ 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</p><p>x|y 匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</p><p>[xyz]   字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</p><p><code>[^xyz]  负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p&#39;。</code></p><p>[a-z]   字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</p><p><code>[^a-z]   负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</code></p><p>\b  匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</p><p>\B  匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</p><p>\cx 匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</p><p>\d  匹配一个数字字符。等价于 [0-9]。</p><p><code>\D  匹配一个非数字字符。等价于 [^0-9]。</code></p><p>\f   匹配一个换页符。等价于 \x0c 和 \cL。</p><p>\n  匹配一个换行符。等价于 \x0a 和 \cJ。</p><p>\r   匹配一个回车符。等价于 \x0d 和 \cM。</p><p>\s  匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</p><p><code>\S  匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</code></p><p>\t   匹配一个制表符。等价于 \x09 和 \cI。</p><p>\v  匹配一个垂直制表符。等价于 \x0b 和 \cK。</p><p>\w  匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。</p><p><code>\W 匹配任何非单词字符包括下划线。等价于 ‘[^A-Za-z0-9_]’。</code></p><p>\xn 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41′ 匹配 “A”。’\x041′ 则等价于 ‘\x04′ &amp; “1″。正则表达式中可以使用 ASCII 编码。.</p><p>\num   匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1′ 匹配两个连续的相同字符。</p><p>\n  标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</p><p>\nm 标 识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</p><p>\nml    如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</p><p>\un 匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</p><p>例子 匹配32位md5</p><p>&#x2F;^[a-z0-9]{32}$&#x2F;</p><h2 id="17-php与mysql"><a href="#17-php与mysql" class="headerlink" title="17.     php与mysql"></a>17.     php与mysql</h2><p><code>https://www.w3cschool.cn/php/php-mysql-select.html</code></p><p>PHP 连接 MySQL</p><p>在 PHP 使用 MySQL 数据库前，你需要先将它们连接。</p><p>PHP 5 及以上版本建议使用以下方式连接 MySQL :</p><p>MySQLi extension (“i” 意为 improved)</p><p>PDO (PHP Data Objects)</p><p>在 PHP 早起版本中我们使用 MySQL 扩展。但该  扩展在 2012 年开始不建议使用。</p><p>我是该用 MySQLi ，还是 PDO?</p><p>如果你需要一个简短的回答，即 “你习惯哪个就用哪个”。</p><p>MySQLi 和 PDO 有它们自己的优势：</p><p>PDO 应用在 12 种不同数据库中， MySQLi 只针对 MySQL 数据库。</p><p>所以，如果你的项目需要在多种数据库中切换，建议使用 PDO ，这样你只需要修改连接字符串和部分查询语句即可。使用 MySQLi, 如果不同数据库，你需要重新所有代码，包括查询。</p><p>两者都是面向对象, 但 MySQLi 还提供了 API 接口。</p><p>两者都支持预处理语句。 预处理语句可以防止 SQL 注入，对于 web 项目的安全性是非常重要的。</p><p>MySQLi 和 PDO 连接 MySQL 实例</p><p>在本章节及接下来的章节中，我们会使用以下三种方式来演示 PHP 操作 MySQL:</p><p>MySQLi (面向对象)</p><p>MySQLi (面向过程)</p><p>PDO</p><p>MySQLi Installation</p><p>Linux 和 Windows: 在 php5 mysql 包安装时 MySQLi 扩展多事情况下是自动安装的。</p><p><code>安装详细信息，请查看： http://php.net/manual/en/mysqli.installation.php</code></p><p>PDO 安装</p><p><code>For 安装详细信息，请查看： http://php.net/manual/en/pdo.installation.php</code></p><p>连接 MySQL</p><p>在我们访问 MySQL 数据库前，我们需要先连接到数据库服务器：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;username&quot;</span>;<br><br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;password&quot;</span>;<br><span class="hljs-comment">// 创建连接</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br><span class="hljs-comment">// 检测连接</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$conn</span>-&gt;connect_error) &#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connection failed: &quot;</span> . <span class="hljs-variable">$conn</span>-&gt;connect_error);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Connected successfully&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br><br> <br><br>面向过程<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;username&quot;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;password&quot;</span>;<br><br> <br><br><span class="hljs-comment">// 创建连接</span><br><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br><span class="hljs-comment">// 检测连接</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$conn</span>) &#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connection failed: &quot;</span> . <span class="hljs-title function_ invoke__">mysqli_connect_error</span>());<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Connected successfully&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br>    <br>PDO<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;username&quot;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;password&quot;</span>;<br><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-string">&quot;mysql:host=<span class="hljs-subst">$servername</span>;dbname=myDB&quot;</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Connected successfully&quot;</span>;<br>  &#125;<br><br><span class="hljs-keyword">catch</span>(PDOException <span class="hljs-variable">$e</span>)<br><br>  &#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();<br><br>  &#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>关闭连接</p><p>连接在脚本执行完后会自动关闭。你也可以使用以下代码来关闭连接：</p><p>实例 (MySQLi - 面向对象)</p><p>$conn-&gt;close();</p><p>实例 (MySQLi - 面向过程)</p><p>mysqli_close($conn);</p><p>实例 (PDO)</p><p>$conn &#x3D; null;</p><p>现在，你已经知道如何将 MySQL 数据库连接到 PHP 了，接下来，你应该了解 PHP 是如何创建数据库的！</p><p>PHP 创建 MySQL 表</p><p>在 PHP 中创建完数据库之后，我们需要在数据库中创建一个或者多个的数据表。</p><p>一个数据表有一个唯一名称，并有行和列组成。</p><p>使用 MySQLi 和 PDO 创建 MySQL 表</p><p>CREATE TABLE 语句用于创建 MySQL 表。</p><p>创建表前，我们需要使用 use myDB 来选择要操作的数据库：</p><p>use myDB;</p><p>我们将创建一个名为 “MyGuests” 的表，有 5 个列： “id”, “firstname”, “lastname”, “email” 和 “reg_date”:</p><p>CREATE TABLE MyGuests (</p><p>id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,</p><p>firstname VARCHAR(30) NOT NULL,</p><p>lastname VARCHAR(30) NOT NULL,</p><p>email VARCHAR(50),</p><p>reg_date TIMESTAMP</p><p>)</p><p>上表中的注意事项:</p><p>数据类型指定列可以存储什么类型的数据。完整的数据类型请参考我们的 数据类型参考手册。</p><p>在设置了数据类型后，你可以为每个列指定其他选项的属性：</p><p>NOT NULL - 每一行都必须含有值（不能为空），null 值是不允许的。</p><p>DEFAULT value - 设置默认值</p><p>UNSIGNED - 使用无符号数值类型，0 及正数</p><p>AUTO INCREMENT - 设置 MySQL 字段的值在新增记录时每次自动增长 1</p><p>PRIMARY KEY - 设置数据表中每条记录的唯一标识。 通常列的 PRIMARY KEY 设置为 ID 数值，与AUTO_INCREMENT 一起使用。</p><p>每个表都应该有一个主键(本列为 “id” 列)，主键必须包含唯一的值。</p><p>以下实例展示了如何在 PHP 中创建表：</p><p>实例 (MySQLi - 面向对象)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;username&quot;</span>;<br><br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;password&quot;</span>;<br><br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;myDB&quot;</span>;<br><br> <br><br><span class="hljs-comment">// 创建连接</span><br><br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);<br><br><span class="hljs-comment">// 检测连接</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$conn</span>-&gt;connect_error) &#123;<br><br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connection failed: &quot;</span> . <span class="hljs-variable">$conn</span>-&gt;connect_error);<br><br>&#125;<br><br> <br><br><span class="hljs-comment">// sql to create table</span><br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;CREATE TABLE MyGuests (</span><br><span class="hljs-string"></span><br><span class="hljs-string">id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,</span><br><span class="hljs-string"></span><br><span class="hljs-string">firstname VARCHAR(30) NOT NULL,</span><br><span class="hljs-string"></span><br><span class="hljs-string">lastname VARCHAR(30) NOT NULL,</span><br><span class="hljs-string"></span><br><span class="hljs-string">email VARCHAR(50),</span><br><span class="hljs-string"></span><br><span class="hljs-string">reg_date TIMESTAMP</span><br><span class="hljs-string"></span><br><span class="hljs-string">)&quot;</span>;<br><br> <br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>) === <span class="hljs-literal">TRUE</span>) &#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Table MyGuests created successfully&quot;</span>;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Error creating table: &quot;</span> . <span class="hljs-variable">$conn</span>-&gt;error;<br><br>&#125;<br><br> <br><br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br><br><span class="hljs-meta">?&gt;</span><br><br> <br><br> <br><br> <br><br>实例 (MySQLi - 面向过程)<br><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;username&quot;</span>;<br><br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;password&quot;</span>;<br><br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;myDB&quot;</span>;<br><br> <br><br><span class="hljs-comment">// 创建连接</span><br><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);<br><br><span class="hljs-comment">// 检测连接</span><br><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$conn</span>) &#123;<br><br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connection failed: &quot;</span> . <span class="hljs-title function_ invoke__">mysqli_connect_error</span>());<br><br>&#125;<br><br> <br><br><span class="hljs-comment">// sql to create table</span><br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;CREATE TABLE MyGuests (</span><br><span class="hljs-string"></span><br><span class="hljs-string">id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,</span><br><span class="hljs-string"></span><br><span class="hljs-string">firstname VARCHAR(30) NOT NULL,</span><br><span class="hljs-string"></span><br><span class="hljs-string">lastname VARCHAR(30) NOT NULL,</span><br><span class="hljs-string"></span><br><span class="hljs-string">email VARCHAR(50),</span><br><span class="hljs-string"></span><br><span class="hljs-string">reg_date TIMESTAMP</span><br><span class="hljs-string"></span><br><span class="hljs-string">)&quot;</span>;<br><br> <br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$sql</span>)) &#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Table MyGuests created successfully&quot;</span>;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Error creating table: &quot;</span> . <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$conn</span>);<br><br>&#125;<br><br> <br><br><span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$conn</span>);<br><br><span class="hljs-meta">?&gt;</span><br><br> <br><br> <br><br> <br><br>实例 (PDO)<br><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;username&quot;</span>;<br><br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;password&quot;</span>;<br><br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;myDBPDO&quot;</span>;<br><br> <br><br><span class="hljs-keyword">try</span> &#123;<br><br>  <span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-string">&quot;mysql:host=<span class="hljs-subst">$servername</span>;dbname=<span class="hljs-subst">$dbname</span>&quot;</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br><br>  <span class="hljs-comment">// set the PDO error mode to exception</span><br><br>  <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">setAttribute</span>(PDO::<span class="hljs-variable constant_">ATTR_ERRMODE</span>, PDO::<span class="hljs-variable constant_">ERRMODE_EXCEPTION</span>);<br><br> <br><br>  <span class="hljs-comment">// sql to create table</span><br><br>  <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;CREATE TABLE MyGuests (</span><br><span class="hljs-string"></span><br><span class="hljs-string">  id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,</span><br><span class="hljs-string"></span><br><span class="hljs-string">  firstname VARCHAR(30) NOT NULL,</span><br><span class="hljs-string"></span><br><span class="hljs-string">  lastname VARCHAR(30) NOT NULL,</span><br><span class="hljs-string"></span><br><span class="hljs-string">  email VARCHAR(50),</span><br><span class="hljs-string"></span><br><span class="hljs-string">  reg_date TIMESTAMP</span><br><span class="hljs-string"></span><br><span class="hljs-string">  )&quot;</span>;<br><br> <br><br>  <span class="hljs-comment">// use exec() because no results are returned</span><br><br>  <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$sql</span>);<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Table MyGuests created successfully&quot;</span>;<br><br>  &#125;<br><br><span class="hljs-keyword">catch</span>(PDOException <span class="hljs-variable">$e</span>)<br><br>  &#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span> . <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();<br><br>  &#125;<br><br> <br><br><span class="hljs-variable">$conn</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>现在，你的 MySQL 数据库已经创建好，并且有了需要的表格，但是这还不够，因为数据表中还没有数据，此时表还只是个架子，所以，我们需要继续完善数据表，为它插入一些数据！</p><p>使用 MySQLi 和 PDO 向 MySQL 插入数据</p><p>在创建完数据库和表后，我们可以向表中添加数据。</p><p>以下为一些语法规则：</p><p>PHP 中 SQL 查询语句必须使用引号</p><p>在 SQL 查询语句中的字符串值必须加引号</p><p>数值的值不需要引号</p><p>NULL 值不需要引号</p><p>INSERT INTO 语句通常用于向 MySQL 表添加新的记录：  </p><p>INSERT INTO table_name (column1, column2, column3,…)    </p><p>VALUES (value1, value2, value3,…)</p><p>学习更多关于 SQL 知识，请查看我们的 SQL 教程。</p><p>在前面的几个章节中我们已经创建了表 “MyGuests”，表字段有: “id”, “firstname”, “lastname”, “email” 和 “reg_date”。 现在，让我们开始向表填充数据。</p><p>Note   注意： 如果列设置 AUTO_INCREMENT (如 “id” 列) 或 TIMESTAMP (如 “reg_date” 列),，我们就不需要在 SQL 查询语句中指定值； MySQL 会自动为该列添加值。</p><p>以下实例向 “MyGuests” 表添加了新的记录:</p><p>实例 (MySQLi - 面向对象)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;username&quot;</span>;<br><br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;password&quot;</span>;<br><br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;myDB&quot;</span>;<br><br> <br><br><span class="hljs-comment">// 创建连接</span><br><br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);<br><br><span class="hljs-comment">// 检测连接</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$conn</span>-&gt;connect_error) &#123;<br><br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connection failed: &quot;</span> . <span class="hljs-variable">$conn</span>-&gt;connect_error);<br><br>&#125;<br><br> <br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO MyGuests (firstname, lastname, email)</span><br><span class="hljs-string"></span><br><span class="hljs-string">VALUES (&#x27;John&#x27;, &#x27;Doe&#x27;, &#x27;john@example.com&#x27;)&quot;</span>;<br><br> <br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>) === <span class="hljs-literal">TRUE</span>) &#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;New record created successfully&quot;</span>;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Error: &quot;</span> . <span class="hljs-variable">$sql</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span> . <span class="hljs-variable">$conn</span>-&gt;error;<br><br>&#125;<br><br> <br><br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br><br><span class="hljs-meta">?&gt;</span><br><br> <br><br> <br><br>实例 (MySQLi - 面向过程)<br><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;username&quot;</span>;<br><br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;password&quot;</span>;<br><br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;myDB&quot;</span>;<br><br> <br><br><span class="hljs-comment">// 创建连接</span><br><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);<br><br><span class="hljs-comment">// 检测连接</span><br><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$conn</span>) &#123;<br><br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connection failed: &quot;</span> . <span class="hljs-title function_ invoke__">mysqli_connect_error</span>());<br><br>&#125;<br><br> <br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO MyGuests (firstname, lastname, email)</span><br><span class="hljs-string"></span><br><span class="hljs-string">VALUES (&#x27;John&#x27;, &#x27;Doe&#x27;, &#x27;john@example.com&#x27;)&quot;</span>;<br><br> <br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$sql</span>)) &#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;New record created successfully&quot;</span>;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Error: &quot;</span> . <span class="hljs-variable">$sql</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span> . <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$conn</span>);<br><br>&#125;<br><br> <br><br><span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$conn</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>实例 (PDO)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;username&quot;</span>;<br><br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;password&quot;</span>;<br><br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;myDBPDO&quot;</span>;<br><br> <br><br><span class="hljs-keyword">try</span> &#123;<br><br>  <span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-string">&quot;mysql:host=<span class="hljs-subst">$servername</span>;dbname=<span class="hljs-subst">$dbname</span>&quot;</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br><br>  <span class="hljs-comment">// set the PDO error mode to exception</span><br><br>  <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">setAttribute</span>(PDO::<span class="hljs-variable constant_">ATTR_ERRMODE</span>, PDO::<span class="hljs-variable constant_">ERRMODE_EXCEPTION</span>);<br><br>  <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO MyGuests (firstname, lastname, email)</span><br><span class="hljs-string"></span><br><span class="hljs-string">  VALUES (&#x27;John&#x27;, &#x27;Doe&#x27;, &#x27;john@example.com&#x27;)&quot;</span>;<br><br>  <span class="hljs-comment">// use exec() because no results are returned</span><br><br>  <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$sql</span>);<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;New record created successfully&quot;</span>;<br><br>  &#125;<br><br><span class="hljs-keyword">catch</span>(PDOException <span class="hljs-variable">$e</span>)<br><br>  &#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span> . <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();<br><br>  &#125;<br><br> <br><br><span class="hljs-variable">$conn</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>其实，你还可以在 PHP 的 MySQL 数据库中插入多条数据，这将在下面的一节内容中提及。</p><p>PHP MySQL 插入多条数据</p><p>一般情况下，INSERT 语句只能向 MySQL 数据库添加一条语句，而本文将介绍如何使用函数批量的向数据表插入多条数据。</p><p>使用 MySQLi 和 PDO 向 MySQL 插入多条数据</p><p>mysqli_multi_query() 函数可用来执行多条SQL语句。</p><p>以下实例向 “MyGuests” 表添加了三条新的记录：</p><p>实例 (MySQLi - 面向对象)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;username&quot;</span>;<br><br><span class="hljs-variable">$password</span> =<br><br><span class="hljs-string">&quot;password&quot;</span>;<br><br><span class="hljs-variable">$dbname</span> =<br><br><span class="hljs-string">&quot;myDB&quot;</span>;<br><br> <br><br><span class="hljs-comment">// 创建链接</span><br><br><span class="hljs-variable">$conn</span> =<br><br><span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);<br><br> <br><br><span class="hljs-comment">// 检查链接</span><br><br> <br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$conn</span>-&gt;connect_error) &#123;<br><br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connection failed: &quot;</span> . <span class="hljs-variable">$conn</span>-&gt;connect_error);<br><br>&#125;<br><br> <br><br> <br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO</span><br><span class="hljs-string"></span><br><span class="hljs-string">MyGuests (firstname, lastname, email)</span><br><span class="hljs-string"></span><br><span class="hljs-string"> </span><br><span class="hljs-string"></span><br><span class="hljs-string">VALUES (&#x27;John&#x27;, &#x27;Doe&#x27;, &#x27;john@example.com&#x27;);&quot;</span>;<br><br> <br><br><span class="hljs-variable">$sql</span> .= <span class="hljs-string">&quot;INSERT INTO</span><br><span class="hljs-string"></span><br><span class="hljs-string">MyGuests (firstname, lastname, email)</span><br><span class="hljs-string"></span><br><span class="hljs-string"> </span><br><span class="hljs-string"></span><br><span class="hljs-string">VALUES (&#x27;Mary&#x27;, &#x27;Moe&#x27;, &#x27;mary@example.com&#x27;);&quot;</span>;<br><br> <br><br><span class="hljs-variable">$sql</span> .= <span class="hljs-string">&quot;INSERT INTO</span><br><span class="hljs-string"></span><br><span class="hljs-string">MyGuests (firstname, lastname, email)</span><br><span class="hljs-string"></span><br><span class="hljs-string"> </span><br><span class="hljs-string"></span><br><span class="hljs-string">VALUES (&#x27;Julie&#x27;, &#x27;Dooley&#x27;, &#x27;julie@example.com&#x27;)&quot;</span>;<br><br> <br><br> <br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">multi_query</span>(<span class="hljs-variable">$sql</span>) === <span class="hljs-literal">TRUE</span>) &#123;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;New</span><br><span class="hljs-string"></span><br><span class="hljs-string">records created successfully&quot;</span>;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br><span class="hljs-keyword">echo</span><br><br><span class="hljs-string">&quot;Error: &quot;</span> . <span class="hljs-variable">$sql</span> . <span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> . <span class="hljs-variable">$conn</span>-&gt;error;<br><br>&#125;<br><br> <br><br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br><br><span class="hljs-meta">?&gt;</span><br><br> <br><br> <br><br> <br><br>Note   请注意，每个SQL语句必须用分号隔开。<br><br> <br></code></pre></td></tr></table></figure><p>实例 (MySQLi - 面向过程)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;username&quot;</span>;<br><br><span class="hljs-variable">$password</span> =<br><br><span class="hljs-string">&quot;password&quot;</span>;<br><br><span class="hljs-variable">$dbname</span> =<br><br><span class="hljs-string">&quot;myDB&quot;</span>;<br><br> <br><br><span class="hljs-comment">// 创建链接</span><br><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>,<br><br><span class="hljs-variable">$dbname</span>);<br><br> <br><br><span class="hljs-comment">// 检查链接</span><br><br> <br><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$conn</span>) &#123;<br><br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connection</span><br><span class="hljs-string"></span><br><span class="hljs-string">failed: &quot;</span> . <span class="hljs-title function_ invoke__">mysqli_connect_error</span>());<br><br>&#125;<br><br> <br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO</span><br><span class="hljs-string"></span><br><span class="hljs-string">MyGuests (firstname, lastname, email)</span><br><span class="hljs-string"></span><br><span class="hljs-string"> </span><br><span class="hljs-string"></span><br><span class="hljs-string">VALUES (&#x27;John&#x27;, &#x27;Doe&#x27;, &#x27;john@example.com&#x27;);&quot;</span>;<br><br> <br><br><span class="hljs-variable">$sql</span> .= <span class="hljs-string">&quot;INSERT INTO</span><br><span class="hljs-string"></span><br><span class="hljs-string">MyGuests (firstname, lastname, email)</span><br><span class="hljs-string"></span><br><span class="hljs-string"> </span><br><span class="hljs-string"></span><br><span class="hljs-string">VALUES (&#x27;Mary&#x27;, &#x27;Moe&#x27;, &#x27;mary@example.com&#x27;);&quot;</span>;<br><br> <br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO</span><br><span class="hljs-string"></span><br><span class="hljs-string">MyGuests (firstname, lastname, email)</span><br><span class="hljs-string"></span><br><span class="hljs-string"> </span><br><span class="hljs-string"></span><br><span class="hljs-string">VALUES (&#x27;Julie&#x27;, &#x27;Dooley&#x27;, &#x27;julie@example.com&#x27;)&quot;</span>;<br><br> <br><br> <br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_multi_query</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$sql</span>)) &#123;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;New</span><br><span class="hljs-string"></span><br><span class="hljs-string">records</span><br><span class="hljs-string"></span><br><span class="hljs-string">created successfully&quot;</span>;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Error: &quot;</span><br><br> <span class="hljs-variable">$sql</span>  <span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>  <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$conn</span>);<br><br>&#125;<br><br> <br><br><span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$conn</span>);<br><br><span class="hljs-meta">?&gt;</span><br><br> <br></code></pre></td></tr></table></figure><p>实例 (PDO)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;username&quot;</span>;<br><br> <br><br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;password&quot;</span>;<br><br><span class="hljs-variable">$dbname</span> =<br><br><span class="hljs-string">&quot;myDBPDO&quot;</span>;<br><br> <br><br><span class="hljs-keyword">try</span> &#123;<br><br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-string">&quot;mysql:host=<span class="hljs-subst">$servername</span>;dbname=<span class="hljs-subst">$dbname</span>&quot;</span>,<br><br><span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br><br> <br><br><span class="hljs-comment">// set the PDO error mode to exception</span><br><br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">setAttribute</span>(PDO::<span class="hljs-variable constant_">ATTR_ERRMODE</span>,<br><br>PDO::<span class="hljs-variable constant_">ERRMODE_EXCEPTION</span>);<br><br> <br><br><span class="hljs-comment">// 开始事务</span><br><br> <br><br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">beginTransaction</span>();<br><br><span class="hljs-comment">// SQL 语句</span><br><br> <br><br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;INSERT INTO MyGuests (firstname, lastname, email)</span><br><span class="hljs-string"></span><br><span class="hljs-string"> </span><br><span class="hljs-string"></span><br><span class="hljs-string">VALUES (&#x27;John&#x27;, &#x27;Doe&#x27;, &#x27;john@example.com&#x27;)&quot;</span>);<br><br> <br><br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;INSERT INTO MyGuests (firstname, lastname, email)</span><br><span class="hljs-string"></span><br><span class="hljs-string"> </span><br><span class="hljs-string"></span><br><span class="hljs-string">VALUES (&#x27;Mary&#x27;, &#x27;Moe&#x27;, &#x27;mary@example.com&#x27;)&quot;</span>);<br><br> <br><br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;INSERT INTO MyGuests (firstname, lastname, email)</span><br><span class="hljs-string"></span><br><span class="hljs-string"> </span><br><span class="hljs-string"></span><br><span class="hljs-string">VALUES (&#x27;Julie&#x27;, &#x27;Dooley&#x27;, &#x27;julie@example.com&#x27;)&quot;</span>);<br><br> <br><br> <br><br><span class="hljs-comment">// commit the transaction</span><br><br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">commit</span>();<br><br> <br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;New records created successfully&quot;</span>;<br><br>&#125;<br><br><span class="hljs-keyword">catch</span>(PDOException <span class="hljs-variable">$e</span>)<br><br>&#123;<br><br> <br><br><span class="hljs-comment">// roll back the transaction if something failed</span><br><br> <br><br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">rollback</span>();<br><br> <br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span> . <span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>  <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();<br><br>&#125;<br><br> <br><br> <br><br><span class="hljs-variable">$conn</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-meta">?&gt;</span><br><br> <br></code></pre></td></tr></table></figure><p>使用预处理语句</p><p>mysqli 扩展提供了第二种方式用于插入语句。</p><p>我们可以预处理语句及绑定参数。</p><p>mysql 扩展可以不带数据发送语句或查询到mysql数据库。 你可以向列关联或 “绑定” 变量。</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">Example</span> (MySQLi 使用预处理语句)<br><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;username&quot;</span>;<br><br><span class="hljs-variable">$password</span> =<br><br><span class="hljs-string">&quot;password&quot;</span>;<br><br><span class="hljs-variable">$dbname</span> =<br><br><span class="hljs-string">&quot;myDB&quot;</span>;<br><br> <br><br><span class="hljs-comment">// Create connection</span><br><br><span class="hljs-variable">$conn</span> =<br><br><span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);<br><br> <br><br><span class="hljs-comment">// Check connection</span><br><br> <br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$conn</span>-&gt;connect_error) &#123;<br><br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connection failed: &quot;</span> . <span class="hljs-variable">$conn</span>-&gt;connect_error);<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO</span><br><span class="hljs-string"></span><br><span class="hljs-string">MyGuests (firstname, lastname, email) VALUES(?, ?, ?)&quot;</span>;<br><br> <br><br><span class="hljs-comment">// 为 mysqli_stmt_prepare() 初始化</span><br><br>statement 对象<br><br><span class="hljs-variable">$stmt</span> =<br><br><span class="hljs-title function_ invoke__">mysqli_stmt_init</span>(<span class="hljs-variable">$conn</span>);<br><br> <br><br><span class="hljs-comment">//预处理语句</span><br><br> <br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_stmt_prepare</span>(<span class="hljs-variable">$stmt</span>, <span class="hljs-variable">$sql</span>)) &#123;<br><br> <br><br><span class="hljs-comment">// 绑定参数</span><br><br> <br><br><span class="hljs-title function_ invoke__">mysqli_stmt_bind_param</span>(<span class="hljs-variable">$stmt</span>, <span class="hljs-string">&#x27;sss&#x27;</span>, <span class="hljs-variable">$firstname</span>, <span class="hljs-variable">$lastname</span>, <span class="hljs-variable">$email</span>);<br><br> <br><br> <br><br><span class="hljs-comment">// 设置参数并执行</span><br><br> <br><br><span class="hljs-variable">$firstname</span> = <span class="hljs-string">&#x27;John&#x27;</span>;<br><br><span class="hljs-variable">$lastname</span><br><br>= <span class="hljs-string">&#x27;Doe&#x27;</span>;<br><br><span class="hljs-variable">$email</span> =<br><br><span class="hljs-string">&#x27;john@example.com&#x27;</span>;<br><br> <br><br><span class="hljs-title function_ invoke__">mysqli_stmt_execute</span>(<span class="hljs-variable">$stmt</span>);<br><br> <br><br> <br><br><span class="hljs-variable">$firstname</span> = <span class="hljs-string">&#x27;Mary&#x27;</span>;<br><br><span class="hljs-variable">$lastname</span><br><br>= <span class="hljs-string">&#x27;Moe&#x27;</span>;<br><br><span class="hljs-variable">$email</span> =<br><br><span class="hljs-string">&#x27;mary@example.com&#x27;</span>;<br><br> <br><br><span class="hljs-title function_ invoke__">mysqli_stmt_execute</span>(<span class="hljs-variable">$stmt</span>);<br><br> <br><br> <br><br><span class="hljs-variable">$firstname</span> = <span class="hljs-string">&#x27;Julie&#x27;</span>;<br><br> <br><br><span class="hljs-variable">$lastname</span> = <span class="hljs-string">&#x27;Dooley&#x27;</span>;<br><br><span class="hljs-variable">$email</span> =<br><br><span class="hljs-string">&#x27;julie@example.com&#x27;</span>;<br><br> <br><br><span class="hljs-title function_ invoke__">mysqli_stmt_execute</span>(<span class="hljs-variable">$stmt</span>);<br><br>&#125;<br><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br> <br></code></pre></td></tr></table></figure><p>我们可以看到以上实例中使用模块化来处理问题。我们可以通过创建代码块实现更简单的读取和管理。</p><p>注意参数的绑定。让我们看下 mysqli_stmt_bind_param() 中的代码：</p><p><code>mysqli_stmt_bind_param($stmt, &#39;sss&#39;, $firstname, $lastname, $email);</code></p><p>该函数绑定参数查询并将参数传递给数据库。第二个参数是 “sss” 。以下列表展示了参数的类型。 s 字符告诉 mysql 参数是字符串。</p><p>可以是以下四种参数：</p><p>i - integer</p><p>d - double</p><p>s - string</p><p>b - BLOB</p><p>每个参数必须指定类型，来保证数据的安全性。通过类型的判断可以减少SQL注入漏洞带来的风险。</p><p>PHP MySQL 预处理语句</p><p>MySQL 从4.1版本开始提供了一种名为预处理语句（prepared statement）的机制。</p><p>MySQL 预处理语句不仅大大减少了需要传输的数据量，还提高了命令的处理效率。</p><p>预处理语句对于防止 MySQL 注入是非常有用的。</p><p>预处理语句及绑定参数</p><p>预处理语句用于执行多个相同的 SQL 语句，并且执行效率更高。</p><p>预处理语句的工作原理如下：</p><p>预处理：创建 SQL 语句模板并发送到数据库。预留的值使用参数 “?” 标记 。例如：INSERT INTO MyGuests (firstname, lastname, email) VALUES(?, ?, ?)</p><p>数据库解析，编译，对SQL语句模板执行查询优化，并存储结果不输出</p><p>执行：最后，将应用绑定的值传递给参数（”?” 标记），数据库执行语句。应用可以多次执行语句，如果参数的值不一样。</p><p>相比于直接执行SQL语句，预处理语句有两个主要优点：</p><p>预处理语句大大减少了分析时间，只做了一次查询（虽然语句多次执行）</p><p>绑定参数减少了服务器带宽，你只需要发送查询的参数，而不是整个语句</p><p>预处理语句针对SQL注入是非常有用的，因为 参数值发送后使用不同的协议，保证了数据的合法性。</p><p>MySQLi 预处理语句</p><p>以下实例在 MySQLi 中使用了预处理语句，并绑定了相应的参数:</p><p>实例 (MySQLi 使用预处理语句)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;username&quot;</span>;<br><br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;password&quot;</span>;<br><br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;myDB&quot;</span>;<br><br> <br><br><span class="hljs-comment">// 创建连接</span><br><br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);<br><br> <br><br><span class="hljs-comment">// 检测连接</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$conn</span>-&gt;connect_error) &#123;<br><br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connection failed: &quot;</span> . <span class="hljs-variable">$conn</span>-&gt;connect_error);<br><br>&#125;<br><br> <br><br><span class="hljs-comment">// prepare and bind</span><br><br><span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&quot;INSERT INTO MyGuests (firstname, lastname, email) VALUES(?, ?, ?)&quot;</span>);<br><br><span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&quot;sss&quot;</span>, <span class="hljs-variable">$firstname</span>, <span class="hljs-variable">$lastname</span>, <span class="hljs-variable">$email</span>);<br><br> <br><br><span class="hljs-comment">// 设置参数并执行</span><br><br><span class="hljs-variable">$firstname</span> = <span class="hljs-string">&quot;John&quot;</span>;<br><br><span class="hljs-variable">$lastname</span> = <span class="hljs-string">&quot;Doe&quot;</span>;<br><br><span class="hljs-variable">$email</span> = <span class="hljs-string">&quot;john@example.com&quot;</span>;<br><br><span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br><br> <br><br><span class="hljs-variable">$firstname</span> = <span class="hljs-string">&quot;Mary&quot;</span>;<br><br><span class="hljs-variable">$lastname</span> = <span class="hljs-string">&quot;Moe&quot;</span>;<br><br><span class="hljs-variable">$email</span> = <span class="hljs-string">&quot;mary@example.com&quot;</span>;<br><br><span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br><br> <br><br><span class="hljs-variable">$firstname</span> = <span class="hljs-string">&quot;Julie&quot;</span>;<br><br><span class="hljs-variable">$lastname</span> = <span class="hljs-string">&quot;Dooley&quot;</span>;<br><br><span class="hljs-variable">$email</span> = <span class="hljs-string">&quot;julie@example.com&quot;</span>;<br><br><span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br><br> <br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;New records created successfully&quot;</span>;<br><br> <br><br><span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br><br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>解析以下实例的每行代码:</p><p>“INSERT INTO MyGuests (firstname, lastname, email) VALUES(?, ?, ?)”</p><p>在 SQL 语句中，我们使用了问号 (?)，在此我们可以将问号替换为整型，字符串，双精度浮点型和布尔值。</p><p>接下来，让我们来看下 bind_param() 函数：</p><p><code>$stmt-&gt;bind_param(&quot;sss&quot;, $firstname, $lastname, $email);</code></p><p>该函数绑定了 SQL 的参数，且告诉数据库参数的值。 “sss” 参数列处理其余参数的数据类型。s 字符告诉数据库该参数为字符串。</p><p>参数有以下四种类型:</p><p>i - integer（整型）</p><p>d - double（双精度浮点型）</p><p>s - string（字符串）</p><p>b - BLOB（布尔值）</p><p>每个参数都需要指定类型。</p><p>通过告诉数据库参数的数据类型，可以降低 SQL 注入的风险。</p><p>Note   注意： 如果你想插入其他数据（用户输入），对数据的验证是非常重要的。</p><p>PDO 中的预处理语句</p><p>以下实例我们在 PDO 中使用了预处理语句并绑定参数:</p><p>实例 (PDO 使用预处理语句)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;username&quot;</span>;<br><br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;password&quot;</span>;<br><br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;myDBPDO&quot;</span>;<br><br> <br><br><span class="hljs-keyword">try</span> &#123;<br><br>  <span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-string">&quot;mysql:host=<span class="hljs-subst">$servername</span>;dbname=<span class="hljs-subst">$dbname</span>&quot;</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br><br>  <span class="hljs-comment">// 设置 PDO 错误模式为异常</span><br><br>  <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">setAttribute</span>(PDO::<span class="hljs-variable constant_">ATTR_ERRMODE</span>, PDO::<span class="hljs-variable constant_">ERRMODE_EXCEPTION</span>);<br><br> <br><br>  <span class="hljs-comment">// 预处理 SQL 并绑定参数</span><br><br>  <span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&quot;INSERT INTO MyGuests (firstname, lastname, email)</span><br><span class="hljs-string"></span><br><span class="hljs-string">  VALUES (:firstname, :lastname, :email)&quot;</span>);<br><br>  <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>(<span class="hljs-string">&#x27;:firstname&#x27;</span>, <span class="hljs-variable">$firstname</span>);<br><br>  <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>(<span class="hljs-string">&#x27;:lastname&#x27;</span>, <span class="hljs-variable">$lastname</span>);<br><br>  <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>(<span class="hljs-string">&#x27;:email&#x27;</span>, <span class="hljs-variable">$email</span>);<br><br> <br><br>  <span class="hljs-comment">// 插入行</span><br><br>  <span class="hljs-variable">$firstname</span> = <span class="hljs-string">&quot;John&quot;</span>;<br><br>  <span class="hljs-variable">$lastname</span> = <span class="hljs-string">&quot;Doe&quot;</span>;<br><br>  <span class="hljs-variable">$email</span> = <span class="hljs-string">&quot;john@example.com&quot;</span>;<br><br>  <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br><br> <br><br>  <span class="hljs-comment">// 插入其他行</span><br><br>  <span class="hljs-variable">$firstname</span> = <span class="hljs-string">&quot;Mary&quot;</span>;<br><br>  <span class="hljs-variable">$lastname</span> = <span class="hljs-string">&quot;Moe&quot;</span>;<br><br>  <span class="hljs-variable">$email</span> = <span class="hljs-string">&quot;mary@example.com&quot;</span>;<br><br>  <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br><br> <br><br>  <span class="hljs-comment">// 插入其他行</span><br><br>  <span class="hljs-variable">$firstname</span> = <span class="hljs-string">&quot;Julie&quot;</span>;<br><br>  <span class="hljs-variable">$lastname</span> = <span class="hljs-string">&quot;Dooley&quot;</span>;<br><br>  <span class="hljs-variable">$email</span> = <span class="hljs-string">&quot;julie@example.com&quot;</span>;<br><br>  <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br><br> <br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;New records created successfully&quot;</span>;<br><br>  &#125;<br><br><span class="hljs-keyword">catch</span>(PDOException <span class="hljs-variable">$e</span>)<br><br>  &#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span> . <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();<br><br>  &#125;<br><br><span class="hljs-variable">$conn</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>PHP MySQL 读取数据</p><p>当 PHP 连接到 MySQL 数据库后，需要向数据库读取数据？那么怎么读取呢？一起来看看。</p><p>从 MySQL 数据库读取数据</p><p>SELECT 语句用于从数据表中读取数据:</p><p>SELECT column_name(s) FROM table_name</p><p>我们可以使用 * 号来读取所有数据表中的字段：</p><p>SELECT * FROM table_name</p><p>如需学习更多关于 SQL 的知识，请访问我们的 SQL 教程。</p><p>以下实例中我们从表 MyGuests 读取了 id, firstname 和 lastname 列的数据并显示在页面上：</p><p>实例 (MySQLi - 面向对象)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;username&quot;</span>;<br><br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;password&quot;</span>;<br><br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;myDB&quot;</span>;<br><br> <br><br><span class="hljs-comment">// 创建连接</span><br><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);<br><br><span class="hljs-comment">// 检测连接</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$conn</span>-&gt;connect_error) &#123;<br><br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connection failed: &quot;</span> . <span class="hljs-variable">$conn</span>-&gt;connect_error);<br><br>&#125;<br><br> <br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT id, firstname, lastname FROM MyGuests&quot;</span>;<br><br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br><br> <br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>-&gt;num_rows &gt; <span class="hljs-number">0</span>) &#123;<br><br>  <span class="hljs-comment">// 输出每行数据</span><br><br>  <span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch_assoc</span>()) &#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;id: &quot;</span>. <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;id&quot;</span>]. <span class="hljs-string">&quot; - Name: &quot;</span>. <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;firstname&quot;</span>]. <span class="hljs-string">&quot; &quot;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;lastname&quot;</span>]. <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br>  &#125;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;0 results&quot;</span>;<br><br>&#125;<br><br> <br><br> <br><br><span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$conn</span>);<br><br><span class="hljs-meta">?&gt;</span><br><br> <br><br> <br><br>以下实例读取了 MyGuests 表的所有记录并显示在 HTML 表格中：<br><br> <br><br>实例 (PDO)<br><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;table style=&#x27;border: solid 1px black;&#x27;&gt;&quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;th&gt;Id&lt;/th&gt;&lt;th&gt;Firstname&lt;/th&gt;&lt;th&gt;Lastname&lt;/th&gt;&lt;th&gt;Email&lt;/th&gt;&lt;th&gt;Reg date&lt;/th&gt;&lt;/tr&gt;&quot;</span>;<br><br> <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TableRows</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RecursiveIteratorIterator</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$it</span></span>) </span>&#123;<br><br>    <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">__construct</span>(<span class="hljs-variable">$it</span>, <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">LEAVES_ONLY</span>);<br><br>  &#125;<br><br> <br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">current</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;td style=&#x27;width: 150px; border: 1px solid black;&#x27;&gt;&quot;</span> . <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">current</span>(). <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>;<br><br>  &#125;<br><br> <br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">beginChildren</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>;<br><br>  &#125;<br><br> <br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">endChildren</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span> . <span class="hljs-string">&quot;\n&quot;</span>;<br><br>  &#125;<br><br>&#125;<br><br> <br><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;username&quot;</span>;<br><br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;password&quot;</span>;<br><br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;myDBPDO&quot;</span>;<br><br> <br><br><span class="hljs-keyword">try</span> &#123;<br><br>  <span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-string">&quot;mysql:host=<span class="hljs-subst">$servername</span>;dbname=<span class="hljs-subst">$dbname</span>&quot;</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br><br>  <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">setAttribute</span>(PDO::<span class="hljs-variable constant_">ATTR_ERRMODE</span>, PDO::<span class="hljs-variable constant_">ERRMODE_EXCEPTION</span>);<br><br>  <span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&quot;SELECT * FROM MyGuests&quot;</span>);<br><br>  <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br><br> <br><br>  <span class="hljs-comment">// 设置结果集为关联数组</span><br><br>  <span class="hljs-variable">$result</span> = <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">setFetchMode</span>(PDO::<span class="hljs-variable constant_">FETCH_ASSOC</span>);<br><br> <br><br>  <span class="hljs-keyword">foreach</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TableRows</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RecursiveArrayIterator</span>(<span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">fetchAll</span>())) <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span>=&gt;<span class="hljs-variable">$v</span>) &#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$v</span>;<br><br>  &#125;<br><br>  <span class="hljs-variable">$dsn</span> = <span class="hljs-literal">null</span>;<br><br>  &#125;<br><br><span class="hljs-keyword">catch</span>(PDOException <span class="hljs-variable">$e</span>)<br><br>  &#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Error: &quot;</span> . <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();<br><br>  &#125;<br><br><span class="hljs-variable">$conn</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/table&gt;&quot;</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>PHP MySQL Where 子句</p><p>通过上一节的内容，你已经可以使用 MySQL 的 SELECT 命令从数据表中获取数据，本节我们可以用 WHERE 命令来筛选出满足条件的结果。</p><p>WHERE 子句用于过滤记录。</p><p>WHERE 子句</p><p>WHERE 子句用于提取满足指定标准的的记录。</p><p>语法</p><p>SELECT column_name(s)</p><p> FROM table_name</p><p> WHERE column_name operator value</p><p>如需学习更多关于 SQL 的知识，请访问我们的 SQL 教程。</p><p>为了让 PHP 执行上面的语句，我们必须使用 mysqli_query() 函数。该函数用于向 MySQL 连接发送查询或命令。</p><p>实例</p><p>下面的实例将从 “Persons” 表中选取所有 FirstName&#x3D;’Peter’ 的行：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br> <span class="hljs-variable">$con</span>=<span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&quot;example.com&quot;</span>,<span class="hljs-string">&quot;peter&quot;</span>,<span class="hljs-string">&quot;abc123&quot;</span>,<span class="hljs-string">&quot;my_db&quot;</span>);<br><br> <span class="hljs-comment">// Check connection</span><br><br> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_connect_errno</span>())<br><br> &#123;<br><br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Failed to connect to MySQL: &quot;</span> . <span class="hljs-title function_ invoke__">mysqli_connect_error</span>();<br><br> &#125;<br><br> <br><br> <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-string">&quot;SELECT * FROM Persons</span><br><span class="hljs-string"></span><br><span class="hljs-string"> WHERE FirstName=&#x27;Peter&#x27;&quot;</span>);<br><br> <br><br> <span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(<span class="hljs-variable">$result</span>))<br><br> &#123;<br><br> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;FirstName&#x27;</span>] . <span class="hljs-string">&quot; &quot;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;LastName&#x27;</span>];<br><br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br> &#125;<br><br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>以上代码将输出：</p><p>Peter Griffin</p><p>在下一节内容中，我们会讲解如何对筛选出来的记录进行排序。</p><p>PHP MySQL Order By 关键词</p><p>你可以对 MySQL 数据库中的记录集进行排序，具体请阅读本节内容。</p><p>ORDER BY 关键词用于对记录集中的数据进行排序。</p><p>ORDER BY 关键词</p><p>ORDER BY 关键词用于对记录集中的数据进行排序。</p><p>ORDER BY 关键词默认对记录进行升序排序。</p><p>如果你想降序排序，请使用 DESC 关键字。</p><p>语法</p><p>SELECT column_name(s)</p><p>​    </p><p>FROM table_name</p><p>​    </p><p>ORDER BY column_name(s) ASC|DESC</p><p>如需学习更多关于 SQL 的知识，请访问我们的 SQL 教程。</p><p>实例</p><p>下面的实例选取 “Persons” 表中存储的所有数据，并根据 “Age” 列对结果进行排序：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br> <span class="hljs-variable">$con</span>=<span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&quot;example.com&quot;</span>,<span class="hljs-string">&quot;peter&quot;</span>,<span class="hljs-string">&quot;abc123&quot;</span>,<span class="hljs-string">&quot;my_db&quot;</span>);<br><br> <span class="hljs-comment">// Check connection</span><br><br> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_connect_errno</span>())<br><br> &#123;<br><br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Failed to connect to MySQL: &quot;</span> . <span class="hljs-title function_ invoke__">mysqli_connect_error</span>();<br><br> &#125;<br><br> <br><br> <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-string">&quot;SELECT * FROM Persons ORDER BY age&quot;</span>);<br><br> <br><br> <span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(<span class="hljs-variable">$result</span>))<br><br> &#123;<br><br> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;FirstName&#x27;</span>];<br><br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot; &quot;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;LastName&#x27;</span>];<br><br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot; &quot;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;Age&#x27;</span>];<br><br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br> &#125;<br><br> <br><br> <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$con</span>);<br><br> <span class="hljs-meta">?&gt;</span><br><br>以上结果将输出：<br><br> <br><br> <br><br>  <br><br>Glenn Quagmire <span class="hljs-number">33</span><br><br>    <br><br>Peter Griffin <span class="hljs-number">35</span><br><br> <br></code></pre></td></tr></table></figure><p>根据两列进行排序</p><p>可以根据多个列进行排序。当按照多个列进行排序时，只有第一列的值相同时才使用第二列：</p><p>SELECT column_name(s)</p><p>FROM table_name</p><p>ORDER BY column1, column2</p><p>PHP MySQL Update</p><p>对于 MySQL 数据库中的数据你可以根据需要进行更新！</p><p>UPDATE 语句用于中修改数据库表中的数据。</p><p>更新数据库中的数据</p><p>UPDATE 语句用于更新数据库表中已存在的记录。</p><p>语法</p><p>UPDATE table_name</p><p> SET column1&#x3D;value, column2&#x3D;value2,…</p><p> WHERE some_column&#x3D;some_value</p><p>注释：请注意 UPDATE 语法中的 WHERE 子句。WHERE 子句规定了哪些记录需要更新。如果您想省去 WHERE 子句，所有的记录都会被更新！</p><p>如需学习更多关于 SQL 的知识，请访问我们的 SQL 教程。</p><p>为了让 PHP 执行上面的语句，我们必须使用 mysqli_query() 函数。该函数用于向 MySQL 连接发送查询或命令。</p><p>实例</p><p>在本教程的前面章节中，我们创建了一个名为 “Persons” 的表，如下所示：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php">FirstName  LastName  Age<br><br>Peter   Griffin  <span class="hljs-number">35</span><br><br>Glenn  Quagmire   <span class="hljs-number">33</span><br><br>下面的例子更新 <span class="hljs-string">&quot;Persons&quot;</span> 表的一些数据：<br><br> <br><br><span class="hljs-meta">&lt;?php</span><br><br> <span class="hljs-variable">$con</span>=<span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&quot;example.com&quot;</span>,<span class="hljs-string">&quot;peter&quot;</span>,<span class="hljs-string">&quot;abc123&quot;</span>,<span class="hljs-string">&quot;my_db&quot;</span>);<br><br> <span class="hljs-comment">// Check connection</span><br><br> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_connect_errno</span>())<br><br> &#123;<br><br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Failed to connect to MySQL: &quot;</span> . <span class="hljs-title function_ invoke__">mysqli_connect_error</span>();<br><br> &#125;<br><br> <br><br> <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-string">&quot;UPDATE Persons SET Age=36</span><br><span class="hljs-string"></span><br><span class="hljs-string"> WHERE FirstName=&#x27;Peter&#x27; AND LastName=&#x27;Griffin&#x27;&quot;</span>);<br><br> <br><br> <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$con</span>);<br><br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在这次更新后，”Persons” 表如下所示：</p><p>FirstName  LastName  Age</p><p>Peter   Griffin  36</p><p>Glenn  Quagmire   33</p><p>PHP MySQL Delete</p><p>如果你不再需要 MySQL 数据库中的某条记录了，那么你也可以根据需要将其删除！</p><p>DELETE 语句用于从数据库表中删除行。</p><p>删除数据库中的数据</p><p>DELETE FROM 语句用于从数据库表中删除记录。</p><p>语法</p><p>DELETE FROM table_name</p><p> WHERE some_column &#x3D; some_value</p><p>注释：请注意 DELETE 语法中的 WHERE 子句。WHERE 子句规定了哪些记录需要删除。如果您想省去 WHERE 子句，所有的记录都会被删除！</p><p>如需学习更多关于 SQL 的知识，请访问我们的 SQL 教程。</p><p>为了让 PHP 执行上面的语句，我们必须使用 mysqli_query() 函数。该函数用于向 MySQL 连接发送查询或命令。</p><p>实例</p><p>请看下面的 “Persons” 表：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php">FirstName  LastName  Age<br><br>Peter   Griffin  <span class="hljs-number">35</span><br><br>Glenn  Quagmire   <span class="hljs-number">33</span><br><br>下面的实例删除 <span class="hljs-string">&quot;Persons&quot;</span> 表中所有 LastName=<span class="hljs-string">&#x27;Griffin&#x27;</span> 的记录：<br><br> <br><br><span class="hljs-meta">&lt;?php</span><br><br> <span class="hljs-variable">$con</span>=<span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&quot;example.com&quot;</span>,<span class="hljs-string">&quot;peter&quot;</span>,<span class="hljs-string">&quot;abc123&quot;</span>,<span class="hljs-string">&quot;my_db&quot;</span>);<br><br> <span class="hljs-comment">// Check connection</span><br><br> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_connect_errno</span>())<br><br> &#123;<br><br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Failed to connect to MySQL: &quot;</span> . <span class="hljs-title function_ invoke__">mysqli_connect_error</span>();<br><br> &#125;<br><br> <br><br> <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-string">&quot;DELETE FROM Persons WHERE LastName=&#x27;Griffin&#x27;&quot;</span>);<br><br> <br><br> <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$con</span>);<br><br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在这次删除后，”Persons” 表如下所示：</p><p>FirstName  LastName  Age</p><p>Glenn  Quagmire   33</p><p>在下一节内容中，你将学习到如何连接到数据源！</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML的一些简单语法</title>
    <link href="/2022/08/09/HTML%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/08/09/HTML%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="HTML的一些简单语法"><a href="#HTML的一些简单语法" class="headerlink" title="HTML的一些简单语法"></a>HTML的一些简单语法</h2><h3 id="1、简单的HTML页面架构"><a href="#1、简单的HTML页面架构" class="headerlink" title="1、简单的HTML页面架构"></a>1、简单的HTML页面架构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="2、常见的标签"><a href="#2、常见的标签" class="headerlink" title="2、常见的标签"></a>2、常见的标签</h3><h4 id="2-1-meta标签"><a href="#2-1-meta标签" class="headerlink" title="2.1 meta标签"></a>2.1 meta标签</h4><p> ’<meta>‘元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。</p><p>设置网站关键字    meta name&#x3D;”keywords” content&#x3D;”网络安全，WEB渗透，数据安全，渗透测试，安全培训” &#x2F;&gt;</p><link>标签定义文档与外部资源的关系。<p>’<script>‘ 用来引入js文件</p><p>注释</p><!--这是一段注释。注释不会在浏览器中显示。--><p>这是一段普通的段落。</p><h4 id="2-2-标题标签"><a href="#2-2-标题标签" class="headerlink" title="2.2 标题标签"></a>2.2 标题标签</h4><p>由大到小</p><h1>h1</h1><h2>h2</h2><h3>h3</h3><h4>h4</h4><h5>h5</h5><h6>6</h6><p></br> 换行标签</p><p>’<hr>‘换行线标签</p><h4 id="2-3文本属性"><a href="#2-3文本属性" class="headerlink" title="2.3文本属性"></a>2.3文本属性</h4><p><strong>加粗</strong></p><p><b></b>加粗</p><p><i></i>斜体</p><p><u></u> 下划线</p><p><sup></sup>上标</p><p><sub></sub>下标</p><p><del></del> 删除线</p><p><font></font> 规定字体属性</p><p>​    size 字体的大小</p><p>​    color 字体颜色</p><p>代码样式原样输出</p><p><code>&lt;pre&gt; &lt;/pre&gt;</code></p><h4 id="2-4-form表单"><a href="#2-4-form表单" class="headerlink" title="2.4 form表单"></a>2.4 form表单</h4><p>form表单 规定当提交表单时向何处发送表单数据</p><p>method 提交的方法有 get、post</p><p>规定在发送表单数据之前如何对其进行编码。</p><p>enctype 属性可能的值</p><p>​        application/x-www-form-urlencoded</p><p>​        multipart/form-data</p><p>​        text/plain</p><p>input标签</p><p>name：同样是表示的该文本输入框名称。</p><p>size：输入框的长度大小。</p><p>maxlength：输入框中允许输入字符的最大数。</p><p>value：输入框中的默认值</p><p>readonly：表示该框中只能显示，不能添加修改。</p><p>input的类型</p><p>type=password 密码输入框</p><p>type=file 文件上传</p><p>type=hidden 隐藏域</p><p>button 按钮</p><p>checkbox 复选框</p><p>radio 单选框</p><p>type=submit 提交按钮</p><p>type=reset  重置按钮</p><h4 id="2-5-a标签、img标签、table标签"><a href="#2-5-a标签、img标签、table标签" class="headerlink" title="2.5 a标签、img标签、table标签"></a>2.5 a标签、img标签、table标签</h4><p>a标签的作用：就是用于控制界面与页面之间的跳转</p><p>默认就是self</p><p>self：用于在当前选项卡中跳转，也就是不新建页面跳转</p><p>_blank ：用于在新的选项卡中跳转，也就是新建页面跳转</p><p><code> &lt;a href=&quot;http://www.baidu.com&quot; target=&quot;self&quot;&gt;百度&lt;/a&gt;</code></p><p><code> &lt;a href=&quot;http://www.baidu.com&quot; target=&quot;_blank&quot;&gt;百度&lt;/a&gt;</code></p><p>_blank  在新窗口中打开被链接文档。</p><p>_self   默认。在相同的框架中打开被链接文档。</p><p>_parent 在父框架集中打开被链接文档。</p><p>_top    在整个窗口中打开被链接文档。</p><h4 id="锚文本"><a href="#锚文本" class="headerlink" title="锚文本"></a>锚文本</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#2&quot;</span>&gt;</span>锚点<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>锚点<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.php.cn/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;转到PHP主页&quot;</span>&gt;</span>php<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-7IMG标签"><a href="#2-7IMG标签" class="headerlink" title="2.7IMG标签"></a>2.7IMG标签</h4><p>img 元素向网页中嵌入一幅图像。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/i/eg_tulip.jpg&quot;</span>  <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;上海鲜花港 - 郁金香&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>alt 规定图像的替代文本。</p><p>src 规定显示图像的url</p><p>width 规定图片的高度</p><p>height 规定图片的宽度</p><h4 id="2-8-table-表格"><a href="#2-8-table-表格" class="headerlink" title="2.8 table 表格"></a>2.8 table 表格</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>我的标题<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span>表格带标题<br>border 边框<br>width 宽度<br>height 高度<br>colspan 行<br>rowspan 竖<br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>行<span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>表格<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>cellpadding 单元边与内容的空白<br>cellspacing 单元格的空白<br><br></code></pre></td></tr></table></figure><h4 id="2-9-列表"><a href="#2-9-列表" class="headerlink" title="2.9 列表"></a>2.9 列表</h4><p>总共有三种列表</p><p><strong>1、无序列表</strong></p><p>无序列表是一个项目的列表，此列项目使用粗体圆点（典型的小黑圆圈）进行标记。</p><p>无序列表使用 <ul> 标签，每个列表项始于 <li> 标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>2、有序列表</strong></p><p>同样，有序列表也是一列项目，列表项目使用数字进行标记。 有序列表始于 <ol> 标签，每个列表项始于 <li> 标签。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第一个列表项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第二个列表项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第三个列表项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>3、自定义列表</strong></p><p>  自定义列表不仅仅是一列项目，而是项目及其注释的组合。</p><p>自定义列表以 <dl> 标签开始。每个自定义列表项以 <dt> 开始。每个自定义列表项的定义以 <dd> 开始。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>黑热饮<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>白冷饮<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-10-框架的使用"><a href="#2-10-框架的使用" class="headerlink" title="2.10 框架的使用"></a>2.10 框架的使用</h4><p>frameset 元素可定义一个框架集。它被用来组织多个窗口（框架）。每个框架存有独立的文档。在其最简单的应用中，frameset 元素仅仅会规定在框架集中存在多少列或多少行。您必须使用 cols 或 rows 属性。</p><p>frameset 在一个页面中设置一个或多个框架 不能嵌套在body标签里</p><p>iframe 是在html页面内嵌入框架 框架内可以连接另一个页面</p><p>frameset 不能在body内使用</p><p>frame 一般都是在frameset中使用</p><p>cols 定义框架集中列的数目和尺寸</p><p>rows 定义框架集中行的数目和尺寸</p><p>scrolling  滚动条</p><p>auto 在需要的情况下出现滚动条（默认值）。</p><p>yes 始终显示滚动条（即使不需要）。</p><p>no  从不显示滚动条（即使需要）</p><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">frameset</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;50%,50%&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;no&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://www.sogou.com&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">frameset</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></script></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DIV CSS基础</title>
    <link href="/2022/08/09/DIV%20CSS%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/08/09/DIV%20CSS%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="WEB安全-DIV-CSS基础"><a href="#WEB安全-DIV-CSS基础" class="headerlink" title="WEB安全 DIV CSS基础"></a>WEB安全 DIV CSS基础</h2><h3 id="1、DIV和CSS简介"><a href="#1、DIV和CSS简介" class="headerlink" title="1、DIV和CSS简介"></a>1、DIV和CSS简介</h3><p>css 层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。</p><p>CSS 能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式，拥有对网页对象和模型样式编辑的能力。</p><p>DIV是html的一个标签 css是一个样式表</p><h3 id="2、样式表类型"><a href="#2、样式表类型" class="headerlink" title="2、样式表类型"></a>2、样式表类型</h3><h4 id="2-1-嵌入样式表"><a href="#2-1-嵌入样式表" class="headerlink" title="2.1 嵌入样式表"></a>2.1 嵌入样式表</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;!DOCTYPE <span class="hljs-selector-tag">html</span>&gt;<br>&lt;<span class="hljs-selector-tag">html</span>&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-<span class="hljs-number">8</span>&quot;&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;style&gt;<br><span class="hljs-selector-class">.demo1</span>&#123;<br><span class="hljs-attribute">color</span>: red;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background</span>: blue;<br>&#125;<br><br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;demo1&quot;&gt;<br>demo1<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br>&lt;/<span class="hljs-selector-tag">html</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="2-2-外部样式"><a href="#2-2-外部样式" class="headerlink" title="2.2 外部样式"></a>2.2 外部样式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/style<span class="hljs-selector-class">.css</span>&quot;/&gt;<br><span class="hljs-keyword">@import</span> url<br>@import url(<span class="hljs-string">&quot;g.css&quot;</span>);<br><span class="hljs-selector-class">.demo1</span>&#123;<br><span class="hljs-attribute">color</span>: red;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-内联样式"><a href="#2-3-内联样式" class="headerlink" title="2.3 内联样式"></a>2.3 内联样式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span> style=&quot;<span class="hljs-attribute">color</span>: blue;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>; <span class="hljs-attribute">background</span>: black;&quot;&gt;demo2&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="3、注释"><a href="#3、注释" class="headerlink" title="3、注释"></a>3、注释</h3><p>&#x2F;* *&#x2F; 注释内容</p><h3 id="4、样式选择器"><a href="#4、样式选择器" class="headerlink" title="4、样式选择器"></a>4、样式选择器</h3><p>元素选择器</p><p>最常见的 CSS 选择器是元素选择器。换句话说，文档的元素就是最基本的选择器。如果设置 HTML 的样式，选择器通常将是某个 HTML 元素，比如 p、h1、em、a，甚至可以是 html 本身：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span> &#123;<span class="hljs-attribute">color</span>:black;&#125;<br><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">color</span>:blue;&#125;<br><span class="hljs-selector-tag">h2</span> &#123;<span class="hljs-attribute">color</span>:silver;&#125;<br></code></pre></td></tr></table></figure><p>ID选择器</p><p>首先，ID 选择器前面有一个 # 号 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">*<span class="hljs-selector-id">#intro</span> &#123;<span class="hljs-attribute">font-weight</span>:bold;&#125;<br><span class="hljs-selector-id">#intro</span> &#123;<span class="hljs-attribute">font-weight</span>:bold;&#125;<br></code></pre></td></tr></table></figure><p>与类选择器一样，ID 选择器中可以忽略通配选择器,所以上下两个是一样的。</p><p>第二个区别是 ID 选择器不引用 class 属性的值，毫无疑问，它要引用 id 属性中的值。</p><p>以下是一个实际 ID 选择器的例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">p</span> id=&quot;intro&quot;&gt;This is <span class="hljs-selector-tag">a</span> paragraph of introduction.&lt;/<span class="hljs-selector-tag">p</span>&gt;<br></code></pre></td></tr></table></figure><p>class 选择器</p><p>就是类选择器</p><p>.类名{属性:值}</p><p>子选择器</p><p>如果您不希望选择任意的后代元素，而是希望缩小范围，只选择某个元素的子元素，请使用子元素选择器（Child selector）。</p><p>例如，如果您希望选择只作为 h1 元素子元素的 strong 元素，可以这样写：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &gt; <span class="hljs-selector-tag">strong</span> &#123;<span class="hljs-attribute">color</span>:red;&#125;<br></code></pre></td></tr></table></figure><p>这个规则会把第一个 h1 下面的两个 strong 元素变为红色，但是第二个 h1 中的 strong 不受影响：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">h1</span>&gt;This is &lt;<span class="hljs-selector-tag">strong</span>&gt;very&lt;/<span class="hljs-selector-tag">strong</span>&gt; &lt;<span class="hljs-selector-tag">strong</span>&gt;very&lt;/<span class="hljs-selector-tag">strong</span>&gt; important.&lt;/<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;<span class="hljs-selector-tag">h1</span>&gt;This is &lt;<span class="hljs-selector-tag">em</span>&gt;really &lt;<span class="hljs-selector-tag">strong</span>&gt;very&lt;/<span class="hljs-selector-tag">strong</span>&gt;&lt;/<span class="hljs-selector-tag">em</span>&gt; important.&lt;/<span class="hljs-selector-tag">h1</span>&gt;<br></code></pre></td></tr></table></figure><p>属性选择器</p><p>元素[属性]{}</p><p>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">*<span class="hljs-selector-attr">[title]</span> &#123;<span class="hljs-attribute">color</span>:red;&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[href]</span> &#123;<span class="hljs-attribute">color</span>:red;&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[href]</span><span class="hljs-selector-attr">[title]</span> &#123;<span class="hljs-attribute">color</span>:red;&#125;<br><span class="hljs-selector-tag">img</span><span class="hljs-selector-attr">[alt]</span> &#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> solid red;&#125;<br>planet<span class="hljs-selector-attr">[moons]</span> &#123;<span class="hljs-attribute">color</span>:red;&#125;<br></code></pre></td></tr></table></figure><p>通配符选择器</p><p>*{属性:值}</p><p>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;!DOCTYPE <span class="hljs-selector-tag">html</span>&gt;<br>&lt;<span class="hljs-selector-tag">html</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;utf-<span class="hljs-number">8</span>&quot;&gt;<br>        &lt;title&gt;通配符选择器（理解）&lt;/title&gt;<br>        &lt;base target=&quot;_self&quot;&gt;<br>        &lt;style&gt;<br>*&#123;<br><span class="hljs-attribute">color</span>: red;<br>&#125;<br>&lt;/style&gt;<br>    &lt;/head&gt;<br>    &lt;<span class="hljs-selector-tag">body</span>&gt;<br>&lt;<span class="hljs-selector-tag">h1</span>&gt;我是标题&lt;/<span class="hljs-selector-tag">h1</span>&gt;<br>        &lt;<span class="hljs-selector-tag">p</span>&gt;我是段落&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>       &lt;<span class="hljs-selector-tag">a</span> href=&quot;#&quot;&gt;我是超链接&lt;/<span class="hljs-selector-tag">a</span>&gt;<br>    &lt;/<span class="hljs-selector-tag">body</span>&gt;<br>&lt;/<span class="hljs-selector-tag">html</span>&gt;<br></code></pre></td></tr></table></figure><p>群组选择器</p><p>常常，我们的<a href="http://www.manongjc.com/css/css_tutorial.html">CSS</a> 样式中会有好几个地方需要使用到相同的设定时，一个一个分开写会是一件满累人的工作，重覆性太高且显得冗长，更不好管理….在CSS 语法的基本设定中，就可以把这几个相同设定的选择器合并在一起，原本可能是写了7<del>8 行相同的语法，合在一起后就只要短短的一小行，怎么看都让人心旷神怡啊</del></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;!DOCTYPE <span class="hljs-selector-tag">html</span>&gt; <br>&lt;<span class="hljs-selector-tag">html</span> xmlns=&quot;http://www.w3.org/<span class="hljs-number">1999</span>/xhtml<span class="hljs-string">&quot;&gt;</span><br><span class="hljs-string">&lt;head&gt;</span><br><span class="hljs-string">    &lt;title&gt;&lt;/title&gt;</span><br><span class="hljs-string">    &lt;style type=&quot;</span>text/css<span class="hljs-string">&quot;&gt;</span><br><span class="hljs-string">        h3,div,p,span&#123;color:red;&#125;</span><br><span class="hljs-string">    &lt;/style&gt;</span><br><span class="hljs-string">&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">    &lt;h3&gt;码农教程&lt;/h3&gt;</span><br><span class="hljs-string">    &lt;div&gt;php教程&lt;/div&gt;</span><br><span class="hljs-string">    &lt;p&gt;java教程&lt;/p&gt;</span><br><span class="hljs-string">    &lt;span&gt;css教程&lt;/span&gt;</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5、背景"><a href="#5、背景" class="headerlink" title="5、背景"></a>5、背景</h3><p>background-color   规定要使用的背景颜色。</p><p>background-position    规定背景图像的位置。    </p><p>background-size     规定背景图片的尺寸。    </p><p>background-repeat  规定如何重复背景图像。  </p><p>background-origin  规定背景图片的定位区域。    </p><p>background-clip     规定背景的绘制区域。    </p><p>repeat  默认。背景图像将在垂直方向和水平方向重复。</p><p>repeat-x 背景图像将在水平方向重复。</p><p>repeat-y 背景图像将在垂直方向重复。</p><p>no-repeat   背景图像将仅显示一次。</p><p>inherit  规定应该从父元素继承 background-repeat 属性的设置。</p><p>background-attachment  规定背景图像是否固定或者随着页面的其余部分滚动。   </p><p>background-image  规定要使用的背景图像。</p><p>inherit  规定应该从父元素继承 background 属性的设置。  </p><p>left top</p><p>left center</p><p>left bottom</p><p>right top</p><p>right center</p><p>right bottom</p><p>center top</p><p>center center</p><p>center bottom</p><p><strong>简写</strong></p><p>background: url(images&#x2F;bg.gif) no-repeat top right</p><p>背景图片的滚动</p><p>背景图片是否随着内容的滚动而滚动由background-attachment设置</p><p>background-attachment:fixed; 固定，不随内容的滚动而滚动</p><p>background-attachment:scroll; 滚动，随内容的滚动而滚动</p><h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><p>边框颜色 border-color:#000</p><p>边框宽度 border-width:1px;</p><p>border-left 设置左边框，一般单独设置左边框样式使用</p><p>border-right 设置右边框，一般单独设置右边框样式使用</p><p>border-top 设置上边框，一般单独设置上边框样式使用</p><p>border-bottom 设置下边框，一般单独设置下边框样式使用,有时可将下边框样式作为css下划线效果应用。</p><p>边框样式值如下：</p><p>none : 　无边框。与任何指定的border-width值无关</p><p>hidden : 　隐藏边框。IE不支持</p><p>dotted : 　在MAC平台上IE4+与WINDOWS和UNIX平台上IE5.5+为点线。否则为实线（常用）</p><p>dashed : 　在MAC平台上IE4+与WINDOWS和UNIX平台上IE5.5+为虚线。否则为实线（常用）</p><p>solid : 　实线边框（常用）</p><p>double : 　双线边框。两条单线与其间隔的和等于指定的border-width值</p><p>上 右 下左</p><p>groove : 　根据border-color的值画3D凹槽</p><p>ridge : 　根据border-color的值画菱形边框</p><p>inset : 　根据border-color的值画3D凹边</p><p>outset : 　根据border-color的值画3D凸边</p><p>上 右 下左</p><p>简写</p><p>border:5px solid red;</p><h3 id="7-文字属性"><a href="#7-文字属性" class="headerlink" title="7.文字属性"></a>7.文字属性</h3><p>color:red; 文字颜色 #ffeeees</p><p>font-size:12px; 文字大小</p><p>font-weight:bolds 文字粗细(bold&#x2F;normal)</p><p>font-family:”宋体”文字字体</p><p>font-variant:small-caps小写字母以大写字母显示 </p><h3 id="8-文本属性"><a href="#8-文本属性" class="headerlink" title="8.文本属性"></a>8.文本属性</h3><p>text-align:center; 文本对齐(right&#x2F;left&#x2F;center)</p><p>line-height:10px; 行间距(可通过它实现文本的垂直居中)</p><p>text-indent:20px; 首行缩进</p><p>text-decoration:none;</p><p>文本线(none&#x2F;underline&#x2F;overline&#x2F;line-through) underline&#x2F;overline&#x2F;line-through; 定义文本上的下划线&#x2F;上划线&#x2F;中划线</p><p>letter-spacing: 字间距</p><h3 id="9-列表"><a href="#9-列表" class="headerlink" title="9.列表"></a>9.列表</h3><p>list-style-type   设置列表项标记的类型。参阅：list-style-type 中可能的值。</p><p>list-style-position   设置在何处放置列表项标记。参阅：list-style-position 中可能的值。</p><p>list-style-image 使用图像来替换列表项的标记。参阅：list-style-image 中可能的值。</p><p>inherit  规定应该从父元素继承 list-style 属性的值</p><p>取值:disc | circle | square | decimal | decimal-leading-zero | lower-roman | upper-roman | lower-greek | lower-latin | upper-latin | armenian | georgian | lower-alpha </p><p>| upper-alpha | none | inherit</p><p>​    disc: 点</p><p>​    circle: 圆圈</p><p>​    square: 正方形</p><p>​    decimal: 数字</p><p>​    decimal-leading-zero: 十进制数，不足两位的补齐前导0，例如: 01, 02, 03, …, 98, 99</p><p>​    lower-roman: 小写罗马文字，例如: i, ii, iii, iv, v, …</p><p>​    upper-roman: 大写罗马文字，例如: I, II, III, IV, V, …</p><p>​    lower-greek: 小写希腊字母，例如: α(alpha), β(beta), γ(gamma), …</p><p>​    lower-latin: 小写拉丁文，例如: a, b, c, … z</p><p>​    upper-latin: 大写拉丁文，例如: A, B, C, … Z</p><p>​    armenian: 亚美尼亚数字</p><p>​    georgian: 乔治亚数字，例如: an, ban, gan, …, he, tan, in, in-an, …</p><p>​    lower-alpha: 小写拉丁文，例如: a, b, c, … z</p><p>​    upper-alpha: 大写拉丁文，例如: A, B, C, … Z</p><p>​    none: 无(取消所有的list样式)</p><p>​    inherit:继承</p><p>list-style-position</p><p>inside</p><p>列表项目标记放置在文本以内，且环绕文本根据标记对齐。</p><p>outside</p><p>默认值。保持标记位于文本的左侧。列表项目标记放置在文本以外，且环绕文本不根据标记对齐。</p><p><strong>简写</strong></p><p>list-style:square inside url(‘&#x2F;i&#x2F;arrow.gif’);</p><h3 id="10、超链接"><a href="#10、超链接" class="headerlink" title="10、超链接"></a>10、超链接</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span>&#123;<span class="hljs-attribute">text-decoration</span>: none;&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#FF0000</span>;&#125; <span class="hljs-comment">/* 未访问的链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#00FF00</span>;&#125; <span class="hljs-comment">/* 已访问的链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#FF00FF</span>;&#125; <span class="hljs-comment">/* 鼠标划过链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#0000FF</span>;&#125; <span class="hljs-comment">/* 已选中的链接 */</span><br></code></pre></td></tr></table></figure><p>后面的颜色是进行完操作后的颜色</p><h3 id="11、盒子模型"><a href="#11、盒子模型" class="headerlink" title="11、盒子模型"></a>11、盒子模型</h3><p>盒子模型的组成部分</p><p>外边距（margin）、边框（border）、内边距（padding）、内容（content）四个属性</p><p>自身的身高 width height </p><p>内边距 padding </p><p>盒子边框 border</p><p>与其他盒子的距离 margin 外边距</p><h3 id="12、Border-边框"><a href="#12、Border-边框" class="headerlink" title="12、Border 边框"></a>12、Border 边框</h3><p>常见的写法 border:1px solid #foo;</p><p>单独属性:</p><p>border-widh:</p><p>border-style:</p><p>dotted 点状虚线</p><p>dashed（虚线）</p><p>solid（实线）</p><p>double（双实线）</p><p>border-color(颜色)</p><h4 id="marin-padding"><a href="#marin-padding" class="headerlink" title="marin padding"></a>marin padding</h4><p>padding:内边距</p><p>值：像素&#x2F;厘米等长度单位、百分比</p><p>padding:10px; 上下左右</p><p>padding:10px 10px; 上下 左右</p><p>padding:10px 10px 10px; 上 左右 下</p><p>padding:10px 10px 10px 10px; 上 右 下 左（设置4个点–&gt;顺时针方向）</p><p>单独属性</p><p>padding-top:</p><p>padding-right:</p><p>padding-bottom:</p><p>padding-left:</p><p>当设置内边距的时候会把盒子撑大，为了保持盒子原来的大小，应该高度和宽度进行减小，根据width和height减小</p><p>margin 外边距</p><p>值：与padding相同</p><p>单独属性：与padding相同</p><p>外边距合并：两个盒子同时设置了外边距，会进行一个外边距合并</p><p>margin</p><p>margin:10px 上下左右都会腾出10px出来</p><p>margin:0px auto; 居中</p><h3 id="13、float-脱离文档流浮动"><a href="#13、float-脱离文档流浮动" class="headerlink" title="13、float 脱离文档流浮动"></a>13、float 脱离文档流浮动</h3><p>left 元素向左浮动。  right 元素向右浮动</p><p>清除浮动  clear: both;   left      right</p><h3 id="14、块级元素、行内元素"><a href="#14、块级元素、行内元素" class="headerlink" title="14、块级元素、行内元素"></a>14、块级元素、行内元素</h3><p><strong>块级元素：</strong></p><p>他会独占一行，在默认情况下，其宽度自动填满其父元素的宽度；</p><p>块级元素可以设置width、height属性；</p><p>块级元素即使设置了宽度也是独占一行，块级元素可以设置margin、padding属性；</p><p><strong>行内元素：</strong></p><p>行内元素不会独占一行，相邻的行内元素会排列在同一行里，直到行排不下，就自动换行，其宽度随内容而变化；</p><p>行内元素的width、height属性则无效；</p><p>行内元素的margin、padding属性很奇怪，水平方向的padding-left、padding-rigtht、margin-left、padding-right都会产生边距效果，但是竖直方向的padding-top、padding-bottom、margin-top、margin-bottom却不产生边距效果。</p><p><strong>行内元素转换</strong></p><p>display:none; 不显示</p><p>display:block;变成块级元素</p><p>display:inline; 变成行内元素</p><p>display:inline-block;以块级元素样式展示，以行级元素样式排列</p><p><strong>块级元素(block element****）</strong></p><p>address 地址</p><p>center 举中对齐块</p><p>div- 常用块级容易</p><p>dl 定义列表</p><p>form 交互表单 （只能用来容纳其它块元素）</p><p>h标签</p><p>hr 水平分隔线</p><p>ol 无需列表</p><p>ul有序列表</p><p>p 段落</p><p>pre 格式化文本</p><p><strong>行内元素：</strong></p><p>a - 锚点</p><p>b - 粗体(不推荐)</p><p>br- 换行</p><p>code - 计算机代码(在引用源码的时候需要)</p><p>em - 强调</p><p>i - 斜体</p><p>img - 图片（特殊的内联元素，同时是内联替换元素，替换元素可以设置宽高）</p><p>当图片和DIV在一起时，图片周围会出现margin现象，即元素不重合贴在一起，为了解决这个问题，设置img的css为{margin：0；display：block；border：0px}</p><p>input - 输入框</p><p>label - 表格标签</p><p>select - 项目选择</p><p>strong - 粗体强调</p><p>textarea - 多行文本输入框</p><p>u - 下划线</p><p>var - 定义变量</p><p>替换元素有如下：（和img一样的设置方法）</p><p><img>、<input>、<textarea>、</textarea><select>、<obiect></obiect></select></p><p>都是替换元素，这些元素都没有实际的内容</p><h3 id="15-溢出"><a href="#15-溢出" class="headerlink" title="15.溢出"></a>15.溢出</h3><p>overflow 属性规定当内容溢出元素框时发生的事情。</p><p>visible  默认值。内容不会被修剪，会呈现在元素框之外。</p><p>hidden  内容会被修剪，并且其余内容是不可见的。</p><p>scroll   内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</p><p>auto 如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</p><p>inherit  规定应该从父元素继承 overflow 属性的值。</p><h3 id="16-定位"><a href="#16-定位" class="headerlink" title="16.定位"></a>16.定位</h3><p>position</p><p>static静态定位（不对它的位置进行改变，在哪里就在那里）</p><p>默认值。没有定位，元素出现在正常的流中（忽略 top,bottom, left, right 或者z-index 声明）。</p><p>fixed固定定位（参照物–<strong>浏览器窗口</strong>）—做 弹窗广告用到</p><p>生成固定定位的元素，相对于浏览器窗口进行定位。 元素的位置通过 “left”, “top”, “right”以及 “bottom”属性进行规定。</p><p>relative（相对定位 ）（<strong>参照物以他本身</strong>）</p><p>生成相对定位的元素，相对于其正常位置进行定位。</p><p>absolute（绝对定位）(除了static都可以，找到参照物–&gt;与它最近的已经有定位的<strong>父元素</strong>进行定位)</p><p>生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。</p><p>元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定</p><p>z-index</p><p>z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。</p><p>&#x3D;&#x3D;定位的基本思想: 它允许你定义元素框相对于其正常位置应该出现的位置，或者相对于父元素、另一个元素甚至浏览器窗口本身的位置。&#x3D;&#x3D;</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DIV CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript基础</title>
    <link href="/2022/08/09/JavaScript%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/08/09/JavaScript%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>JavaScript是目前web开发中不可缺少的脚本语言，&#x3D;&#x3D;js不需要编译即可运行，运行在客户端，需要通过浏览器来解析执行JavaScript代码。&#x3D;&#x3D;</p><p>诞生于1995年，当时的主要目的是验证表单的数据是否合法。</p><p>JavaScript本来应该叫Livescript，但是在发布前夕，想搭上当时超热的java顺风车，临时把名字改为了JavaScript。（也就是说js跟java没有关系，当时只是想借助java的名气）。</p><p>javaScript 被用来改进设计、验证表单、检测浏览器、创建cookies，等等。JavaScript 是因特网上最流行的脚本语言，并且可在所有主要的浏览器中运行，比如： Internet Explorer、 Maxthon、Mozilla、Firefox、Netscape、Chrome和 Opera等。</p><p>常用 &#x3D;&#x3D;（1） 修改html及css代码&#x3D;&#x3D; （2）验证表单</p><hr><h3 id="1-嵌入方法"><a href="#1-嵌入方法" class="headerlink" title="1.嵌入方法"></a>1.嵌入方法</h3><h4 id="1-1-内嵌式"><a href="#1-1-内嵌式" class="headerlink" title="1.1 内嵌式"></a>1.1 内嵌式</h4><p>理论上js可以写在任何第一个地方 但是一般写在head标签里或者 body下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;application/javascript&quot;</span>&gt;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;内嵌式&quot;</span>);<br>&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;内嵌式&quot;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="1-2-外链式"><a href="#1-2-外链式" class="headerlink" title="1.2 外链式"></a>1.2 外链式</h4><p>首先新建一个文件类型为.js的文件，然后在该文件中写js语句，通过script标签对引入到html页面中。</p><p><code> &lt;script src=&quot;js文件路径地址&quot;&gt;这里不能写js语句&lt;/script&gt;</code></p><h4 id="1-3-行内式"><a href="#1-3-行内式" class="headerlink" title="1.3 行内式"></a>1.3 行内式</h4><p>直接书写在标签身上，是一个简写的事件，所以又称之为事件属性。   onclick单击事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;点我呀!&quot;</span> onclick=<span class="hljs-string">&quot;alert(&#x27;暗月渗透测试培训&#x27;);&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;恭喜你,加入暗月渗透测试培训&#x27;);&quot;</span>&gt;</span>点我呀!<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="2-语句"><a href="#2-语句" class="headerlink" title="2.语句"></a>2.语句</h3><p>1.在编程语言中，这些编程指令被称为语句。</p><p>JavaScript 程序就是一系列的编程语句。</p><p>注释：在 HTML 中，JavaScript 程序由 web 浏览器执行。</p><p>2.JavaScript 语句由以下构成：</p><p>值、运算符、表达式、关键词和注释。</p><p>&#x3D;&#x3D;3.用分号（;）分隔JavaScript语句。&#x3D;&#x3D;</p><h3 id="3-注释"><a href="#3-注释" class="headerlink" title="3.注释"></a>3.注释</h3><p>单行注释：     &#x2F;&#x2F;   注释语句       快捷键ctrl+&#x2F;</p><p>多行注释：     &#x2F;* 注释语句 *&#x2F;  快捷键ctrl+shift+&#x2F;  </p><p>&#x3D;&#x3D;注意：多行注释相互不能嵌套使用，只能在多行注释里面使用单行注释！&#x3D;&#x3D;</p><h3 id="4-变量"><a href="#4-变量" class="headerlink" title="4.变量"></a>4.变量</h3><p>变量是用于存储信息的”容器” </p><p>&#x3D;&#x3D;javascript单双引号没区别&#x3D;&#x3D;</p><p>var a&#x3D;’moonsec’;</p><h3 id="5-JavaScript-保留关键字"><a href="#5-JavaScript-保留关键字" class="headerlink" title="5.JavaScript 保留关键字"></a>5.JavaScript 保留关键字</h3><p>Javascript 的保留关键字不可以用作变量、标签或者函数名。有些保留关键字是作为 Javascript 以后扩展使用。</p><img src="/2022/08/09/JavaScript%E5%9F%BA%E7%A1%80/clip_image002.png" alt="js1" style="zoom:70%;"><h3 id="6-JavaScript-作用域"><a href="#6-JavaScript-作用域" class="headerlink" title="6.JavaScript 作用域"></a>6.JavaScript 作用域</h3><h4 id="6-1-Javascript-局部变量"><a href="#6-1-Javascript-局部变量" class="headerlink" title="6.1 Javascript 局部变量"></a>6.1 Javascript 局部变量</h4><p>局部作用域 变量在函数内声明，变量为局部作用域。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> carName = <span class="hljs-string">&quot;Volvo&quot;</span>;<br>    <span class="hljs-comment">// 函数内可调用 carName 变量</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-2-JavaScript-全局变量"><a href="#6-2-JavaScript-全局变量" class="headerlink" title="6.2 JavaScript 全局变量"></a>6.2 JavaScript 全局变量</h4><p>变量在函数外定义，即为全局变量。</p><p>全局变量有 全局作用域: 网页中所有脚本和函数均可使用。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> carName = <span class="hljs-string">&quot; Volvo&quot;</span>;<br><span class="hljs-comment">// 此处可调用 carName 变量</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 函数内可调用 carName 变量</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-数据类型"><a href="#7-数据类型" class="headerlink" title="7.数据类型"></a>7.数据类型</h3><p>数值型：number（凡是数字都是数值型，不区分整数和小数）</p><p>字符串：string（凡是引号包裹起来的内容全部都是字符串）</p><p>布尔：boolean（true、false）</p><p>对象类型：object（特殊取值null）</p><p>未定义型：undefined</p><p>对象类型 数组 字典</p><h4 id="7-1-判断类型"><a href="#7-1-判断类型" class="headerlink" title="7.1 判断类型"></a>7.1 判断类型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;iamstring.&quot;</span>;<br><span class="hljs-keyword">var</span> b = <span class="hljs-number">222</span>;<br><span class="hljs-keyword">var</span> c= [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-keyword">var</span> e = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-number">111</span>);&#125;;<br><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=<span class="hljs-string">&quot;22&quot;</span>;&#125;;　<br><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> a)  ------------&gt; string<br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> b)  ------------&gt; number<br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> c)  ------------&gt; object<br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> d)  ------------&gt; object<br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> e)  ------------&gt; <span class="hljs-keyword">function</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-params"><span class="hljs-keyword">typeof</span> f</span>)  ------------&gt; <span class="hljs-keyword">function</span><br></code></pre></td></tr></table></figure><h4 id="7-2-数字类型"><a href="#7-2-数字类型" class="headerlink" title="7.2 数字类型"></a>7.2 数字类型</h4><p>只有一种数字类型，数字 可以是小数 ，也可以的整数以0开头 默认使用8进制来表示我的这个数字 ，以0x开头 默认使用16进制来表述我的这个数字  如果以-开头 默认以负数  如果我带有e：以科学计数法来解析我的这个数字</p><p>parseInt(..)  将某值转换成数字，不成功则NaN</p><p>parseFloat(..) 将某值转换成浮点数，不成功则NaN</p><p>特殊值：</p><p>NaN，非数字。可使用 isNaN(num) 来判断。</p><p>Infinity，无穷大。可使用 isFinite(num) 来判断。</p><h4 id="7-3-字符串型"><a href="#7-3-字符串型" class="headerlink" title="7.3 字符串型"></a>7.3 字符串型</h4><p>字符串是存储字符的变量，用来表示文本的数据类型，程序中的字符串是包含单引号&#x2F;双引号的，由单引号来界定我双引号中包含的字符串 </p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js">obj.<span class="hljs-property">length</span>              长度<br><br>obj.<span class="hljs-title function_">trim</span>()              移除空白<br><br>obj.<span class="hljs-title function_">trimLeft</span>()<br><br>obj.<span class="hljs-property">trimRight</span>)<br><br>obj.<span class="hljs-title function_">charAt</span>(n)            返回字符串中的第n个字符<br><br>obj.<span class="hljs-title function_">concat</span>(value, ...)        拼接<br><br>obj.<span class="hljs-title function_">indexOf</span>(substring,start)     子序列位置<br><br>obj.<span class="hljs-title function_">lastIndexOf</span>(substring,start)   子序列位置<br><br>obj.<span class="hljs-title function_">substring</span>(<span class="hljs-keyword">from</span>, to)       根据索引获取子序列<br><br>obj.<span class="hljs-title function_">slice</span>(  , end)        切片<br><br>obj.<span class="hljs-title function_">toLowerCase</span>()          大写<br><br>obj.<span class="hljs-title function_">toUpperCase</span>()          小写<br><br>obj.<span class="hljs-title function_">split</span>(delimiter, limit)     分割<br><br>obj.<span class="hljs-title function_">search</span>(regexp)          从头开始匹配，返回匹配成功的第一个位置(g无效)<br><br>obj.<span class="hljs-title function_">match</span>(regexp)          全局搜索，如果正则中有g表示找到全部，否则只找到第一个。<br><br>obj.<span class="hljs-title function_">replace</span>(regexp, replacement)   替换，正则中有g则替换所有，否则只替换第一个匹配项，<br><br>​                   $数字：匹配的第n个组内容；<br><br>​                   $&amp;：当前匹配的内容；<br><br>​                   $<span class="hljs-string">`：位于匹配子串左侧的文本；</span><br><span class="hljs-string"></span><br><span class="hljs-string">​                   $&#x27;：位于匹配子串右侧的文本</span><br><span class="hljs-string"></span><br><span class="hljs-string">​                   $$：直接量$符号</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h4 id="7-4布尔类型-boolean"><a href="#7-4布尔类型-boolean" class="headerlink" title="7.4布尔类型(boolean)"></a>7.4布尔类型(boolean)</h4><p>一般是用在流程控制语句中，字符串和数字类型都是无穷多个，然而我们的布尔数据类型只有两个：true 和 false</p><p>这两个个值一般用于说明某个事物是真或者假</p><p>&#x3D;&#x3D;js一般用布尔类型来比较所得到的结果&#x3D;&#x3D;</p><p>布尔类型仅包含真假，</p><p>&#x3D;&#x3D;   比较值相等     !&#x3D;    不等于    &#x3D;&#x3D;&#x3D;  比较值和类型相等</p><p>!&#x3D;&#x3D;&#x3D; 不等于     ||    或        &amp;&amp;   且</p><h4 id="7-5-null"><a href="#7-5-null" class="headerlink" title="7.5 null"></a>7.5 null</h4><p>null</p><p>关键字null是一个特殊的值，它表示变量为空值，用来定义空的或者是不存在的引用。</p><p>如果试图去引用一个没有定义的值，就会返回一个null。</p><p>这里注意一点：null并不等于”” 或者0</p><h4 id="7-6-undefined-未定义"><a href="#7-6-undefined-未定义" class="headerlink" title="7.6 undefined(未定义)"></a>7.6 undefined(未定义)</h4><p>这个值表示变量不含有值，没有定义的值，或者被定义了一个不存在的属性值</p><p>！null和undefined区别：</p><p>null它表示一个变量被赋予一个空值，而undefined是表示变量还没有被赋值</p><h4 id="7-7-数组"><a href="#7-7-数组" class="headerlink" title="7.7 数组"></a>7.7 数组</h4><ul><li><p>1、数组内可以存放任意数据类型的数据（本质上它也是对象）</p></li><li><p>2、数组元素不赋值的情况下 值为undefined</p></li><li><p>3、如果数组打印的时候，元素不赋值””</p></li><li><p>4、访问数组范围之外的元素，不会出现越界的问题，undefined</p></li><li><p>5、定义数组大小，照样可以添加更多元素</p></li></ul><h5 id="7-7-1-定义数组的方法"><a href="#7-7-1-定义数组的方法" class="headerlink" title="7.7.1 定义数组的方法"></a>7.7.1 定义数组的方法</h5><p>1、var arr&#x3D;[]&#x2F;&#x2F;定义一个空数组</p><p>2、var arr&#x3D;[10,20,{“name”:”tomy”,”age”:19},0.1,”string”,true,[“aaa”,”bbb”]]&#x2F;&#x2F;定义的同时赋值</p><p>3、var arr&#x3D;new Array();&#x2F;&#x2F;定义一个空数组</p><p>4、var arr &#x3D; new Array(10,20,{“name”:”tomy”,”age”:19},0.1,”string”,true,[“aaa”,”bbb”])&#x2F;&#x2F;定义的同时赋值</p><p>5、var arr&#x3D;new Array(10)&#x2F;&#x2F;定义一个长度为10的数组</p><h5 id="7-7-2-数组的操作"><a href="#7-7-2-数组的操作" class="headerlink" title="7.7.2 数组的操作"></a>7.7.2 数组的操作</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">obj.<span class="hljs-property">length</span>          数组的大小<br>obj.<span class="hljs-title function_">push</span>(ele)       尾部追加元素<br>obj.<span class="hljs-title function_">pop</span>()           尾部获取一个元素<br>obj.<span class="hljs-title function_">unshift</span>(ele)    头部插入元素<br>obj.<span class="hljs-title function_">shift</span>()         头部移除元素<br>obj.<span class="hljs-title function_">splice</span>(start, deleteCount, value, ...)  插入、删除或替换数组的元素<br>                    obj.<span class="hljs-title function_">splice</span>(n,<span class="hljs-number">0</span>,val) 指定位置插入元素<br>                    obj.<span class="hljs-title function_">splice</span>(n,<span class="hljs-number">1</span>,val) 指定位置替换元素<br>                    obj.<span class="hljs-title function_">splice</span>(n,<span class="hljs-number">1</span>)     指定位置删除元素<br>obj.<span class="hljs-title function_">slice</span>( )        切片<br>obj.<span class="hljs-title function_">reverse</span>( )      反转<br>obj.<span class="hljs-title function_">join</span>(sep)       将数组元素连接起来以构建一个字符串<br>obj.<span class="hljs-title function_">concat</span>(val,..)  连接数组<br>obj.<span class="hljs-title function_">sort</span>( )         对数组元素进行排序<br></code></pre></td></tr></table></figure><h3 id="8-函数"><a href="#8-函数" class="headerlink" title="8.函数"></a>8.函数</h3><p>JavaScript 函数语法</p><p>JavaScript 函数通过 function 关键词进行定义，其后是函数名和括号 ()。</p><p>函数名可包含字母、数字、下划线和美元符号（规则与变量名相同）。</p><p>圆括号可包括由逗号分隔的参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> x = <span class="hljs-title function_">myFunction</span>(<span class="hljs-number">7</span>, <span class="hljs-number">8</span>);        <span class="hljs-comment">// 调用函数，返回值被赋值给 x</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">return</span> a * b;                <span class="hljs-comment">// 函数返回 a 和 b 的乘积</span><br>&#125;<br></code></pre></td></tr></table></figure><p>普通函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">arg</span>)&#123;<br><span class="hljs-keyword">return</span> arg+<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> result = <span class="hljs-title function_">func</span>(<span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<span class="hljs-keyword">var</span> result = <span class="hljs-title function_">func</span>(<span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br></code></pre></td></tr></table></figure><p>匿名函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>);<br>&#125;,<span class="hljs-number">500</span>)<br></code></pre></td></tr></table></figure><p>自执行函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span>(<span class="hljs-params">arg</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg);<br>&#125;)(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h3 id="9-字典"><a href="#9-字典" class="headerlink" title="9.字典"></a>9.字典</h3><p>字典 是一种以键-值对形式存储数据的数据结构</p><p><code>var dict = &#123;&#39;k1&#39;:&quot;moonsec&quot;,&#39;k2&#39;:&#39;moon&#39;,&#39;age&#39;:18&#125;;</code></p><p>输出字典元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> dict)&#123;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dict[item]);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>获取指定元素</p><p>dict[‘age’] 获取key为age的元素</p><p>赋值</p><p><code>dict[&#39;age&#39;]=10</code></p><p>删除元素</p><p><code>delete dict[&#39;one&#39;];</code></p><p><code>delete dict.age;</code></p><h3 id="10-js-的序列化和反序列化"><a href="#10-js-的序列化和反序列化" class="headerlink" title="10.js 的序列化和反序列化"></a>10.js 的序列化和反序列化</h3><p>Json与字符串的转换   把对象转为字符串    JSON.stringify()</p><p>把字符串转为数组   newli &#x3D; JSON.parse()</p><p><strong>序列化</strong> 即js中的Object转化为字符串</p><p>使用toJSONString</p><p><code>var last=obj.toJSONString(); //将JSON对象转化为JSON字符 </code></p><p>使用stringify</p><p><code>var last=JSON.stringify(obj); //将JSON对象转化为JSON字符</code></p><p><strong>反序列化</strong>  即js中JSON字符串转化为Object</p><h3 id="11-转义"><a href="#11-转义" class="headerlink" title="11.转义"></a>11.转义</h3><p>就是网站的网址大部分是URL编码的，所以我们要进行转义</p><ul><li><p>decodeURI( )          URl中未转义的字符</p></li><li><p>decodeURIComponent( )  URI组件中的未转义字符</p></li><li><p>encodeURI( )          URI中的转义字符</p></li><li><p>encodeURIComponent( )  转义URI组件中的字符</p></li><li><p>escape( )             对字符串转义</p></li><li><p>&#x3D;&#x3D;unescape( )           给转义字符串解码&#x3D;&#x3D;</p></li><li><p>URIError             由URl的编码和解码方法抛出</p></li></ul><h3 id="12-eval"><a href="#12-eval" class="headerlink" title="12.eval"></a>12.eval</h3><p>&#x3D;&#x3D;eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。&#x3D;&#x3D;</p><h3 id="13-时间"><a href="#13-时间" class="headerlink" title="13.时间"></a>13.时间</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Date</span> 对象<br><span class="hljs-keyword">var</span> myDate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();  <br>myDate.<span class="hljs-title function_">getYear</span>(); <span class="hljs-comment">//获取当前年份(2位)  </span><br>myDate.<span class="hljs-title function_">getFullYear</span>(); <span class="hljs-comment">//获取完整的年份(4位,1970-????)  </span><br>myDate.<span class="hljs-title function_">getMonth</span>(); <span class="hljs-comment">//获取当前月份(0-11,0代表1月) 所以获取当前月份是 myDate.getMonth()+1;   </span><br>myDate.<span class="hljs-title function_">getDate</span>(); <span class="hljs-comment">//获取当前日(1-31)  </span><br>myDate.<span class="hljs-title function_">getDay</span>(); <span class="hljs-comment">//获取当前星期X(0-6,0代表星期天)  </span><br>myDate.<span class="hljs-title function_">getTime</span>(); <span class="hljs-comment">//获取当前时间(从1970.1.1开始的毫秒数)  </span><br>myDate.<span class="hljs-title function_">getHours</span>(); <span class="hljs-comment">//获取当前小时数(0-23)  </span><br>myDate.<span class="hljs-title function_">getMinutes</span>(); <span class="hljs-comment">//获取当前分钟数(0-59)  </span><br>myDate.<span class="hljs-title function_">getSeconds</span>(); <span class="hljs-comment">//获取当前秒数(0-59)  </span><br>myDate.<span class="hljs-title function_">getMilliseconds</span>(); <span class="hljs-comment">//获取当前毫秒数(0-999)  </span><br>myDate.<span class="hljs-title function_">toLocaleDateString</span>(); <span class="hljs-comment">//获取当前日期  </span><br><span class="hljs-keyword">var</span> mytime = myDate.<span class="hljs-title function_">toLocaleTimeString</span>(); <span class="hljs-comment">//获取当前时间  </span><br>myDate.<span class="hljs-title function_">toLocaleString</span>( ); <span class="hljs-comment">//获取日期与时间  </span><br>加一天 <br><span class="hljs-keyword">var</span> dateTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();  <br>dateTime=dateTime.<span class="hljs-title function_">setDate</span>(dateTime.<span class="hljs-title function_">getDate</span>()+<span class="hljs-number">1</span>);<br>dateTime=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(dateTime);<br>dateTime=dateTime.<span class="hljs-title function_">setDate</span>(dateTime.<span class="hljs-title function_">getDate</span>()+<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h3 id="14-面向对象"><a href="#14-面向对象" class="headerlink" title="14.面向对象"></a>14.面向对象</h3><p>JavaScript是一种基于原型的语言，它没类的声明语句，比如C+ +或Java中用的。这有时会对习惯使用有类申明语句语言的程序员产生困扰。相反，JavaScript可用方法作类。定义一个类跟定义一个函数一样简单。在下面的例子中，我们定义了一个新类Person。</p><p>第一种方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>     <span class="hljs-comment">//构造函数里面的方法和属性</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span>);<br>     &#125;;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">setName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) &#123;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span> = name;<br>     &#125;;<br> &#125;<br> <br> <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;张三&quot;</span>);<br> p.<span class="hljs-title function_">getName</span>();  <span class="hljs-comment">// 张三</span><br> p.<span class="hljs-title function_">setName</span>(<span class="hljs-string">&quot;李四&quot;</span>);<br> p.<span class="hljs-title function_">getName</span>();  <span class="hljs-comment">// 李四</span><br></code></pre></td></tr></table></figure><p>对于上述代码需要注意： &#x3D;&#x3D;Person充当的构造函数   this代指对象  创建对象时需要使用 new&#x3D;&#x3D;</p><p>第二种方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义类class Person &#123;</span><br>     <span class="hljs-comment">//类的构造函数，实例化的时候执行，new的时候执行</span><br>     <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span> = name;<br>     &#125;<br>     <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span>);<br>     &#125;<br>     <span class="hljs-title function_">setName</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span> = name<br>    &#125;<br>&#125;<br> <span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Preson</span>(<span class="hljs-string">&#x27;张三&#x27;</span>)<br> p.<span class="hljs-title function_">getName</span>();  <span class="hljs-comment">// 张三</span><br> p.<span class="hljs-title function_">setName</span>(<span class="hljs-string">&#x27;李四&#x27;</span>);<br> p.<span class="hljs-title function_">getName</span>();  <span class="hljs-comment">// 李四</span><br></code></pre></td></tr></table></figure><h3 id="15-原型"><a href="#15-原型" class="headerlink" title="15.原型"></a>15.原型</h3><p>我们所创建的每一个函数，解析器都会向函数中添加一个属性prototype</p><p>这个属性对应着一个对象，这个对象就是我们所谓的原型对象</p><p>如果函数作为普通函数调用时 prototype没有任何作用</p><p>当函数以构造函数调用时，它所创建的对象中都会有一个隐含的的属性</p><p>指向该构造函数的原型 我们可以通过__proto__来访问该属性</p><p>我们可以将对象中公有的内容，统一设置到原型对象中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Persion</span>(<span class="hljs-params">username,age</span>)&#123;<br>&#125;<br><span class="hljs-comment">//console.log(Persion.prototype);</span><br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Persion</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p.<span class="hljs-property">__proto__</span> == <span class="hljs-title class_">Persion</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><br><br>定义原型变量和原型变量<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Persion</span>(<span class="hljs-params">username,age</span>)&#123;<br><br>&#125;<br><span class="hljs-comment">//console.log(Persion.prototype);</span><br><span class="hljs-title class_">Persion</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">a</span> = <span class="hljs-string">&#x27;女&#x27;</span>;<br><span class="hljs-title class_">Persion</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">Sayname</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Persion</span>.<span class="hljs-property">name</span>;<br>&#125;<br><span class="hljs-keyword">var</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Persion</span>(<span class="hljs-string">&#x27;moonsec&#x27;</span>);<br><span class="hljs-keyword">var</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Persion</span>();<br><span class="hljs-title function_">alert</span>(p1.<span class="hljs-title class_">Sayname</span>());<br></code></pre></td></tr></table></figure><h3 id="16-运算符"><a href="#16-运算符" class="headerlink" title="16.运算符"></a>16.运算符</h3><p>用于执行程序代码运算，会针对一个以上操作数来进行</p><h4 id="16-1-算术运算符"><a href="#16-1-算术运算符" class="headerlink" title="16.1 算术运算符"></a>16.1 算术运算符</h4><p>+  -  *  &#x2F;  % ++ –</p><p>“+”可用作字符串的拼接</p><h4 id="16-2-比较运算符"><a href="#16-2-比较运算符" class="headerlink" title="16.2 比较运算符"></a>16.2 比较运算符</h4><p>&lt;      &gt;     &#x3D;&#x3D;     ！&#x3D;      &lt;&#x3D;      &gt;&#x3D;</p><blockquote><p>&#x3D;&#x3D;&#x3D; 全等于：将数值以及数据类型一并比较</p></blockquote><blockquote><p>！&#x3D;&#x3D;不全等于：将数值以及数据类型一并比较</p></blockquote><h4 id="16-3-赋值运算器"><a href="#16-3-赋值运算器" class="headerlink" title="16.3 赋值运算器"></a>16.3 赋值运算器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">=<br>+= <br>-=<br>*=<br>/=<br>%=<br>a=a+<span class="hljs-number">2</span>;==&gt;a+=<span class="hljs-number">2</span><br>a=a-<span class="hljs-number">2</span>;==&gt;a-=<span class="hljs-number">2</span><br>a=a*<span class="hljs-number">2</span>;==&gt;a*=<span class="hljs-number">2</span><br>a=a/<span class="hljs-number">2</span>;==&gt;a/=<span class="hljs-number">2</span><br>a=a%<span class="hljs-number">2</span>;==&gt;a%=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="16-4-逻辑运算符"><a href="#16-4-逻辑运算符" class="headerlink" title="16.4 逻辑运算符"></a>16.4 逻辑运算符</h4><blockquote><p>&amp;&amp; 全真为真     || 一个为真就是真      ！ 取反</p></blockquote><h3 id="17-流程控制语句"><a href="#17-流程控制语句" class="headerlink" title="17.流程控制语句"></a>17.流程控制语句</h3><h4 id="17-1-if语句"><a href="#17-1-if语句" class="headerlink" title="17.1 if语句"></a>17.1 if语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(条件)&#123;<br>函数体<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="17-2-if-else-语句"><a href="#17-2-if-else-语句" class="headerlink" title="17.2 if else 语句"></a>17.2 if else 语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(条件)&#123;<br>函数体<span class="hljs-number">1</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>函数体<span class="hljs-number">2</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="17-3-if……else-语句"><a href="#17-3-if……else-语句" class="headerlink" title="17.3 if……else 语句"></a>17.3 if……else 语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(条件<span class="hljs-number">1</span>)&#123;<br><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(条件<span class="hljs-number">2</span>)&#123;<br><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(条件n)&#123;<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="17-4-switch-语句：多分支语句"><a href="#17-4-switch-语句：多分支语句" class="headerlink" title="17.4 switch 语句：多分支语句"></a>17.4 switch 语句：多分支语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">switch</span>(表达式) &#123;<br>     <span class="hljs-keyword">case</span> <span class="hljs-attr">n</span>:<br>        代码块<br>        <span class="hljs-keyword">break</span>;<br>     <span class="hljs-keyword">case</span> <span class="hljs-attr">n</span>:<br>        代码块<br>        <span class="hljs-keyword">break</span>;<br>     <span class="hljs-attr">default</span>:<br>        默认代码块<br>&#125; <br><br><span class="hljs-keyword">switch</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getDay</span>()) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>        text = <span class="hljs-string">&quot;今天是周六&quot;</span>;<br>        <span class="hljs-keyword">break</span>; <br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>        text = <span class="hljs-string">&quot;今天是周日&quot;</span>;<br>        <span class="hljs-keyword">break</span>; <br>    <span class="hljs-attr">default</span>: <br>        text = <span class="hljs-string">&quot;期待周末~&quot;</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h4 id="17-5while循环结构"><a href="#17-5while循环结构" class="headerlink" title="17.5while循环结构"></a>17.5while循环结构</h4><p>while循环：先判断条件 当条件成立 再执行</p><p>while(循环成立条件){</p><p>….</p><p>}</p><h4 id="17-6-do……while-循环"><a href="#17-6-do……while-循环" class="headerlink" title="17.6 do……while 循环"></a>17.6 do……while 循环</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">do</span>...<span class="hljs-keyword">while</span>循环:不论条件成不成立 先执行一遍 再判断<br><span class="hljs-keyword">do</span>&#123;<br>.....<br>&#125;<span class="hljs-keyword">while</span>(循环成立条件)<br></code></pre></td></tr></table></figure><h4 id="17-7-for循环"><a href="#17-7-for循环" class="headerlink" title="17.7 for循环"></a>17.7 for循环</h4><h4 id="17-8-for-in-循环"><a href="#17-8-for-in-循环" class="headerlink" title="17.8  for in 循环"></a>17.8  for in 循环</h4><p>continue：</p><p>跳过当前循环，直接进入循环的下一个步骤</p><p>break:</p><p>结束循环</p><h3 id="18-JS操作DOM"><a href="#18-JS操作DOM" class="headerlink" title="18.JS操作DOM"></a>18.JS操作DOM</h3><h4 id="18-1-什么是DOM？"><a href="#18-1-什么是DOM？" class="headerlink" title="18.1 什么是DOM？"></a>18.1 什么是DOM？</h4><p>DOM（document object model）文档对象模型，是针对HTML和XML的一个API（应用程序接口）。DOM给我们描述了一个具有层次化特点的节点树，允许开发人员增删改查页面的某些部分。</p><p><img src="/2022/08/09/JavaScript%E5%9F%BA%E7%A1%80/DOM" alt="pic_htmltree"></p><ul><li><blockquote><p>JavaScript 能够改变页面中的所有 HTML 元素</p></blockquote></li><li><blockquote><p>JavaScript 能够改变页面中的所有 HTML 属性</p></blockquote></li><li><blockquote><p>JavaScript 能够改变页面中的所有 CSS 样式</p></blockquote></li><li><blockquote><p>JavaScript 能够对页面中的所有事件做出反应</p></blockquote></li></ul><h4 id="18-2-DOM查找元素"><a href="#18-2-DOM查找元素" class="headerlink" title="18.2 DOM查找元素"></a>18.2 DOM查找元素</h4><p>document获取节点的基本方法</p><p>document.getElementById(‘id’); &#x2F;&#x2F;&#x3D;&#x3D;通过id来获取元素&#x3D;&#x3D;,返回指定的唯一元素。</p><p>document.getElementsByName(“name”); &#x2F;&#x2F;&#x3D;&#x3D;通过name来获取元素&#x3D;&#x3D;，返回name&#x3D;’name’的集合。</p><p>.document.getElementsByClassName(“classname”) &#x2F;&#x2F;&#x3D;&#x3D;用classname来获取元素&#x3D;&#x3D;，返回的是一个class&#x3D;”classname”的集合(不兼容IE8及以下)。</p><p>document.getElementsByTagName(‘div’); &#x2F;&#x2F;&#x3D;&#x3D;用元素的标签获取元素&#x3D;&#x3D;，返回所有标签&#x3D;“div”的集合。</p><h5 id="18-2-1-查找"><a href="#18-2-1-查找" class="headerlink" title="18.2.1 查找"></a>18.2.1 查找</h5><p>直接查找   var obj &#x3D; document.getElementById(‘id’);</p><p>间接查找</p><p>文件内容操作</p><p>innerText 仅文本</p><p>innerHTML 全内容</p><p>value</p><p>input value 获取当前的值</p><p>select 获取选中的value的值 document.getElementById(‘s1’).selectedIndex&#x3D;1</p><p>Textarea 获取value的值</p><h5 id="18-2-2-操作"><a href="#18-2-2-操作" class="headerlink" title="18.2.2 操作"></a>18.2.2 操作</h5><p>样式操作</p><p>className 列出样式 字符串</p><p>classList 列出样式 返回数组</p><p>classList.add 增加样式</p><p>classList.remove 删除样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;c1 c2&#x27;</span> styple=<span class="hljs-string">&#x27;font-size:16px&#x27;</span>&gt;&lt;/div&gt;<br>obj.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span>=<span class="hljs-string">&#x27;16px&#x27;</span>;<br></code></pre></td></tr></table></figure><p>属性操作</p><p>获取属性   getAttribute()</p><p>增加设置一个属性 、添加属性   setAttribute(‘xxx’,’alexe’)</p><p>删除属性  removeAttribute(value)</p><p>创建标签 并添加到html中     </p><p>第一种方式 字符串方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">insertAdjacentHTML</span>()<br><br>&lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;+&quot;</span> onclick=<span class="hljs-string">&quot;add();&quot;</span>/&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> tag=<span class="hljs-string">&quot;&lt;p&gt;&lt;input type=&#x27;text&#x27;&gt;&lt;/p&gt;&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;div1&#x27;</span>).<span class="hljs-title function_">insertAdjacentHTML</span>(<span class="hljs-string">&#x27;beforeEnd&#x27;</span>,tag);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>有四种值可用：</p><ul><li><p>beforeBegin: 插入到标签开始前</p></li><li><p>afterBegin:插入到标签开始标记之后</p></li><li><p>beforeEnd:插入到标签结束标记前</p></li><li><p>afterEnd:插入到标签结束标记后</p></li></ul><p>第二种方式 对象的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-property">createElement</span><br>&lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;+&quot;</span> onclick=<span class="hljs-string">&quot;add2();&quot;</span>/&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> tag=<span class="hljs-string">&quot;&lt;p&gt;&lt;input type=&#x27;text&#x27;&gt;&lt;/p&gt;&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;div1&#x27;</span>).<span class="hljs-title function_">insertAdjacentHTML</span>(<span class="hljs-string">&#x27;beforeEnd&#x27;</span>,tag);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add2</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> tag =<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;input&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">tag.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;type&#x27;</span>,<span class="hljs-string">&#x27;text&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">tag.<span class="hljs-property">style</span>.<span class="hljs-property">color</span>=<span class="hljs-string">&#x27;red&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> p =<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;p&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">p.<span class="hljs-title function_">appendChild</span>(tag)<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;div1&#x27;</span>).<span class="hljs-title function_">appendChild</span>(p);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>appendChild 在节点后面增加一个子节点</span><br></code></pre></td></tr></table></figure><p>提交表单</p><p>任何标签都可以通过dom提交</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;id&#x27;</span>).<span class="hljs-title function_">submit</span>()<br>&lt;form id=<span class="hljs-string">&#x27;f1&#x27;</span> action=<span class="hljs-string">&quot;https://www.moonsec.com/&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;botton&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;Sub();&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;Sub();&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>&lt;/form&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Sub</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;f1&#x27;</span>).<span class="hljs-title function_">submit</span>();</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>其他</p><p>console.log 终端输出</p><p>alert 弹出框</p><p>confirm 确认框 标题 true false</p><p>url和刷新</p><p>location.href 获取url</p><p>location.href &#x3D;’url’ 重定向</p><p>location.reload() 重新加载</p><p>定时器</p><p>setInterval()</p><p>clearInterval()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input id=<span class="hljs-string">&quot;i1&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> /&gt;<br>&lt;input type=&quot;button&quot; value=&quot;停止&quot; onclick=&quot;stop();&quot;&gt;<br>&lt;script&gt;<br>function setTime()&#123;<br>var tag = new Date();<br>document.getElementById(&#x27;i1&#x27;).value=tag;<br>&#125;<br>var obj=setInterval(&#x27;setTime()&#x27;,&#x27;500&#x27;);<br>function stop()&#123;<br>clearInterval(obj);<br>&#125;<br></code></pre></td></tr></table></figure><p>只执行一次</p><p>setTimeout()</p><p>clearTimeout()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;status&quot;</span>&gt;&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;删除&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;Delele();&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Delele</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;status&#x27;</span>).<span class="hljs-property">innerText</span>=<span class="hljs-string">&quot;已删除&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;status&#x27;</span>).<span class="hljs-property">innerText</span>=<span class="hljs-string">&quot;&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,<span class="hljs-number">5000</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>事件</p><p>绑定事件两种方式</p><p>a.直接标签绑定 直接标签绑定 onclick&#x3D;’’</p><p>b.先获取dom对象，然后进行绑定</p><p>document.getElementById(‘xxx’).onclick()</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kali常用命令</title>
    <link href="/2022/08/09/kali%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/08/09/kali%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="kali的常用命令"><a href="#kali的常用命令" class="headerlink" title="kali的常用命令"></a>kali的常用命令</h1><h2 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h2><blockquote><p>passwd 修改密码</p><p>passwd root 修改root用户密码</p></blockquote><p>date 显示系统日期</p><p>&#x3D;&#x3D;sudo 后面加命令 就可以调用管理权限&#x3D;&#x3D;</p><p>apt-get update 更新软件列表</p><p>这个命令，会访问源列表里的每个网址，并读取软件列表，然后保存在本地电脑。我们在新立得软件包管理器里看到的软件列表，都是通过update命令更新的。</p><p>apt-get upgrade 更新软件</p><p>这个命令，会把本地已安装的软件，与刚下载的软件列表里对应软件进行对比，如果发现已安装的软件版本太低，就会提示你更新。如果你的软件都是最新版本，会提示： 升级了 0 个软件包，新安装了 0 个软件包，要卸载 0 个软件包，有 0 个软件包未被升级。</p><p>apt-get dist-upgrade 更新软件  </p><p>apt-get upgrade 与 apt-get dist-upgrade 的区别</p><p>upgrade:系统将现有的Package升级,&#x3D;&#x3D;如果有相依性的问题,而此相依性需要安装其它新的Package或影响到其它Package的相依性时,此Package就不会被升级,会保留下来.&#x3D;&#x3D;</p><p>&#x3D;&#x3D;dist-upgrade&#x3D;&#x3D;:可以聪明的解决相依性的问题,如果有相依性问题,需要安装&#x2F;移除新的Package,就会试着去安装&#x2F;移除它.<br>(&#x3D;&#x3D;所以通常这个会被认为是有点风险的升级&#x3D;&#x3D;)</p><p>apt-get upgrade 和 apt-get dist-upgrade 本质上是没有什么不同的。</p><p>只不过，dist-upgrade会识别出当依赖关系改变的情形并作出处理，而upgrade对此情形不处理。</p><p>&#x3D;&#x3D;例如&#x3D;&#x3D;软件包 a 原先依赖 b c d，但是在源里面可能已经升级了，现在是 a 依赖 b c e。这种情况下，dist-upgrade 会删除 d 安装 e，并把 a 软件包升级，而 upgrade 会认为依赖关系改变而拒绝升级 a<br>软件包。</p><p>clear 清屏</p><p>reboot 重启</p><p>apt-get install XXXXX 安装缺少的依赖包，（XXX）里面输入缺少依赖包的名字</p><p>apt-get autoremove –purge 软件名 删除包及其依赖的软件包+配置文件等</p><p>apt-get install +模块名 这种方法也可以安装模块,或者apt-get install python-模块名</p><p>firefox 浏览器打开</p><p>shutdown -h now 关闭系统(1)</p><p>init 0 关闭系统(2)</p><p>telinit 0 关闭系统(3)</p><p>shutdown -h hours:minutes &amp; 按预定时间关闭系统</p><p>shutdown -c 取消按预定时间关闭系统</p><p>shutdown -r now 重启(1)</p><p>reboot 重启(2)</p><p>su -l 切换登陆用户</p><p>logout 注销用户登陆</p><p>&#x3D;&#x3D;pwd 当前路径&#x3D;&#x3D;</p><h2 id="2-文件夹或文本操作"><a href="#2-文件夹或文本操作" class="headerlink" title="2.文件夹或文本操作"></a>2.文件夹或文本操作</h2><p>cd .. 返回上一级目录</p><p>cd ..&#x2F;.. 返回上级两级目录</p><p>cd - 返回上次所在的目录</p><p>cd 文件夹名  进去文件夹</p><p>cd ~ 进去当前用户主目录</p><p>pwd 显示当前工作路径</p><p>touch 文件名  常见文件</p><p>cat 文件名 读取文档内容</p><p>&#x3D;&#x3D;mkdir 文件名 创建文件夹&#x3D;&#x3D;</p><p>&#x3D;&#x3D;mkdir -p 文件夹 递归创建文件夹&#x3D;&#x3D;</p><p>cp 复制命令</p><p>cp -r moon moons 复制moon 文件夹到当前 moons 如果有里面有文件 使用-r </p><p>mv 移动命令</p><p>mv moon moon 也可以说是改名</p><p>mkdir 文件名 文件名 创建多个文件夹</p><p>ls 显示文件和文件夹名</p><p>ls -a 显示所有的文件和文件夹 包含隐藏文件</p><p>ls -l 显示文件和目录的详细资料</p><p>删除</p><p>&#x3D;&#x3D;rm -f 文件  删除文件&#x3D;&#x3D;</p><p>rm 文件夹名 删除文件夹</p><p>rm -rf  文件&#x2F;文件夹  删除文件夹 及其目录下的文件</p><p>&#x3D;&#x3D;压缩和解压&#x3D;&#x3D;<br>bzip2 file1 压缩一个叫做 ‘file1’ 的文件</p><p>gunzip file1.gz 解压一个叫做 ‘file1.gz’的文件</p><p>gzip file1 压缩一个叫做 ‘file1’的文件</p><p>gzip -9 file1 最大程度压缩</p><p>rar a file1.rar test_file 创建一个叫做 ‘file1.rar’ 的包</p><p>rar x file1.rar 解压rar包</p><p>unrar x file1.rar 解压rar包</p><p>DEB 包 (Debian, Ubuntu 以及类似系统)<br>dpkg -i package.deb 安装&#x2F;更新一个 deb 包</p><p>dpkg -r package_name 从系统删除一个 deb 包</p><p>dpkg -l 显示系统中所有已经安装的 deb 包</p><p>dpkg -l | grep httpd 显示所有名称中包含 “httpd” 字样的deb包</p><p>dpkg -s package_name 获得已经安装在系统中一个特殊包的信息</p><p>dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表</p><p>dpkg –contents package.deb 显示尚未安装的一个包所提供的文件列表</p><p>tar zcvf +压缩文件名 压缩文件</p><p>tar zxvf +解压包名 解压文件</p><p>tar -jcvf renwolesshel.tar.bz2 打包</p><p>tar jxvf renwolesshel.tar.bz2 解压</p><p>压缩成zip格式</p><p>zip -q -r renwolesshel.zip renwolesshel&#x2F;<br>解压zip格式的压缩包</p><p>unzip renwolesshel.zip</p><p>where 加软件名 可以查出软件目录在哪</p><p>.&#x2F;+文件名或者apt-get +文件名 安装文件</p><p>yum groupinstall “X Window System”</p><h2 id="3-系统信息"><a href="#3-系统信息" class="headerlink" title="3.系统信息"></a>3.系统信息</h2><p>arch 显示机器的处理器架构(1)</p><p>uname -m 显示机器的处理器架构(2)</p><p>uname -r 显示正在使用的内核版本</p><p>cat  &#x2F;proc&#x2F;version 显示内核的版本                       <strong>cat 后面要加空格</strong></p><p>cat  &#x2F;proc&#x2F;net&#x2F;dev 显示网络适配器及统计</p><p>cat  &#x2F;proc&#x2F;cpuinfo 显示CPU info的信息</p><p>cat  &#x2F;proc&#x2F;mounts 显示已加载的文件系统</p><h2 id="4-vi-常用命令"><a href="#4-vi-常用命令" class="headerlink" title="4.vi 常用命令"></a>4.vi 常用命令</h2><h3 id="vi编辑器的概念"><a href="#vi编辑器的概念" class="headerlink" title="vi编辑器的概念"></a>vi编辑器的概念</h3><p>vi编辑器分为三种状态，分别是：<br>        1.命令模式（command mode）<br>        控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode。</p><p>2.插入模式（Insert mode）</p><p>只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。</p><p>3.底行模式（last line mode）</p><p>将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号……等。</p><p><strong>打开</strong></p><p>vi filename :打开或新建文件，并将光标置于第一行首<br>        vi +n filename ：打开文件，并将光标置于第n行首<br>        vi + filename ：打开文件，并将光标置于最后一行首</p><p><strong>编辑</strong></p><p>i 在当前位置生前插入<br>        I 在当前行首插入<br>        a 在当前位置后插入<br>        A 在当前行尾插入<br>        o 在当前行之后插入一行<br>        O 在当前行之前插入一行<br>        编辑结束，按Esc返回命令模式</p><p><strong>基本查找</strong></p><p>&#x3D;&#x3D;&#x2F;text　　查找text，按n健查找下一个，按N健查找前一个。&#x3D;&#x3D;<br>        &#x3D;&#x3D;?text　　查找text，反向查找，按n健查找下一个，按N健查找前一个。&#x3D;&#x3D;<br>     查找很长的词，如果一个词很长，键入麻烦，可以将光标移动到该词上，按*或#键即可以该单词进行搜索，相当于&#x2F;搜索。而#命令相当于?搜索。</p><p><strong>删除</strong></p><p>删除当前行 dd<br>        删除2行 2dd</p><p><strong>拷贝和粘贴</strong></p><p>yy 拷贝当前行<br>        nyy 拷贝当前后开始的n行，比如2yy拷贝当前行及其下一行。<br>        p  在当前光标后粘贴</p><p>区块拷贝</p><ol><li>将光标移动到要复制的文本开始的地方，按 v进入可视模式。</li><li>将光标移动到要复制的文本的结束的地方，按y复制。此时vim会自动将光标定位到选中文本的开始的地方，并退出可视模式。</li><li>我移动光标到文本结束的地方，按 p粘贴。</li></ol><p><strong>退出命令</strong></p><p>:wq 保存并退出<br>        :q! 强制退出并忽略所有更改<br>        :e! 放弃所有修改，并打开原来文件<br>        :w保存修改</p><p><strong>显示行号</strong></p><p>set number</p><p>set nu</p><p>输入:n，代表跳转到第n行，如:100，就跳转到第100行。</p><p>&#x3D;&#x3D;撤销操作   u&#x3D;&#x3D;</p><p>vim与vi的区别</p><p>&#x3D;&#x3D;vim是vi的延申 vim编辑源码会高亮 vim的命令对vi是完全兼容的&#x3D;&#x3D;</p><h2 id="5-文件搜索"><a href="#5-文件搜索" class="headerlink" title="5.文件搜索"></a>5.文件搜索</h2><p>find &#x2F; -name file1 从 ‘&#x2F;’ 开始进入根文件系统搜索文件和目录</p><p>find &#x2F; -user user1 搜索属于用户 ‘user1’ 的文件和目录<br>        find &#x2F;home&#x2F;user1 -name *.bin 在目录 ‘&#x2F; home&#x2F;user1’ 中搜索带有’.bin’ 结尾的文件<br>   &#x3D;&#x3D;find &#x2F;usr&#x2F;bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件<br>        find &#x2F;usr&#x2F;bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件&#x3D;&#x3D;</p><p><code>find . -name &#39;*.php&#39; -mmin -30  查找最近30分钟修改的当前目录下的.php文件 find . -name &#39;*.php&#39; -mtime 0</code><br>查找最近24小时修改的当前目录下的.php文件</p><p><code>find . -name &#39;*.inc&#39; -mtime 0 -ls</code><br>查找最近24小时修改的当前目录下的.php文件，并列出详细信息</p><p>find . -type f -mtime 1</p><p>查找当前目录下，最近24-48小时修改过的常规文件。<br>find . -type f -mtime +1<br>查找当前目录下，最近1天前修改过的常规文件。</p><p>-atime 文件访问时间</p><p>-ctime 文件常见时间</p><p>-mtime文件修改时间</p><p>-mtime n : n为数字，意思为在n天之前的“一天之内”被更改过内容的文件<br>-mtime +n : 列出在n天之前（不含n天本身）被更改过内容的文件名<br>-mtime -n : 列出在n天之内（含n天本身）被更改过内容的文件名</p><p>-type f 代表一个普通格式的文件 二进制文件</p><p>-type d 代表文件夹</p><p>find &#x2F; -name *.rpm -exec chmod 755 ‘{}’ ; 搜索以 ‘.rpm’ 结尾的文件并定义其权限<br>find &#x2F; -xdev -name *.rpm 搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备<br>locate *.ps 寻找以 ‘.ps’ 结尾的文件 - 先运行 ‘updatedb’ 命令<br>whereis halt 显示一个二进制文件、源码或man的位置<br>which halt 显示一个二进制文件或可执行文件的完整路径</p><p>grep kali &#x2F;etc&#x2F;passwd grep关键词搜索</p><p>find &#x2F; -name moonsec 2&gt;&#x2F;dev&#x2F;null   搜索某个文件&#x2F;文件夹 屏蔽出错信息</p><h2 id="6-用户和群组"><a href="#6-用户和群组" class="headerlink" title="6.用户和群组"></a>6.用户和群组</h2><p>groupadd group_name 创建一个新用户组<br>        groupdel group_name 删除一个用户组</p><p>cat &#x2F;etc&#x2F;group | grep group_name    查找id值</p><p>usermod -a -G moontea k1把用户k1附加其他用户组</p><p>创建目录</p><p>useradd moonsec</p><p>passwd moonsec</p><p>创建用户以及分配目录</p><p>useradd -r -m -s &#x2F;bin&#x2F;bash moonsec</p><p>参数的意思：<br>       -r 建立系统账号<br>      -m 自动建立用户的登入目录<br>      -s &#x2F;bin&#x2F;bash 指定用户登入后所使用的shell</p><p>切换用户</p><p>su - root 切换到root用户</p><p>su 用户名 切换到普通用户</p><h2 id="7-系统管理"><a href="#7-系统管理" class="headerlink" title="7.系统管理"></a>7.系统管理</h2><p>top</p><p>查看正在指向的程序信息</p><p>进程</p><p>ps -ef 查看所有进程信息</p><p>ps -ef | grep tomcat 查找指定进程</p><p>kill -9 id 强制杀死进程</p><p>env 当前的变量</p><p>查看系统变量</p><p>echo $PATH</p><p>hostname 查看主机名</p><p>history 查看历史命令</p><h2 id="8-查看磁盘信息"><a href="#8-查看磁盘信息" class="headerlink" title="8.查看磁盘信息"></a>8.查看磁盘信息</h2><p>df   默认不带单位，挂载点、总容量、已用、可用</p><p>df  -h   友好显示（带单位），很多命令的友好显示都是-h</p><h2 id="9-查看内存信息"><a href="#9-查看内存信息" class="headerlink" title="9.查看内存信息"></a>9.查看内存信息</h2><p>free   默认以KB为单位，总容量、已用、可用、缓存大小</p><p>free  -m   默认以MB为单位</p><p>free  -h   上面2种都不带单位、只显示数值，这种是友好显示的，会带单位G、M等</p><h2 id="10-查看环境变量"><a href="#10-查看环境变量" class="headerlink" title="10.查看环境变量"></a>10.查看环境变量</h2><p><code>echo  $JAVA_HOME      echo $PATH | grep jdk</code></p><h2 id="11-开机自启"><a href="#11-开机自启" class="headerlink" title="11.开机自启"></a>11.开机自启</h2><p>有很多程序往往都需要设置开机自启，比如tomcat、mysql、nginx等。</p><p>在&#x2F;etc&#x2F;rc.d&#x2F;rc.local文件中加入开机要自动执行的程序</p><p>vim &#x2F;etc&#x2F;rc.d&#x2F;rc.local</p><p>挂载一个windows网络共享</p><p>mount -t smbfs -o username&#x3D;user,password&#x3D;pass &#x2F;&#x2F;WinClient&#x2F;share &#x2F;mnt&#x2F;share </p><h2 id="12网卡配置"><a href="#12网卡配置" class="headerlink" title="12网卡配置"></a>12网卡配置</h2><p>vi &#x2F;etc&#x2F;network&#x2F;interfaces</p><p>auto eth0  &#x2F;&#x2F;指定网卡（根据ifconfig结果修改）<br>        iface eth0 inet static  &#x2F;&#x2F;启动静态ip<br>        address 192.168.0.66  &#x2F;&#x2F; 设置静态ip<br>        netmask 255.255.255.0  &#x2F;&#x2F;子网掩码<br>        gateway 192.168.0.1  &#x2F;&#x2F;指定网关</p><p>重启网络</p><p>service networking restart<br>或者：<br>systemctl restart networking</p><p>设置临时ip</p><p>ifconfig eth0 192.168.0.33</p><h2 id="13网卡DNS服务器"><a href="#13网卡DNS服务器" class="headerlink" title="13网卡DNS服务器"></a>13网卡DNS服务器</h2><p>vi &#x2F;etc&#x2F;resovl.conf</p><p>nameserver 114.114.114.114</p><p>重启网卡</p><p>service networking restart</p><p>systemctl restart networking</p><p>注意有时候重启才生效</p><h2 id="14-服务相关"><a href="#14-服务相关" class="headerlink" title="14.服务相关"></a>14.服务相关</h2><p>启动apache2服务器</p><p> &#x2F;etc&#x2F;init.d&#x2F;apache2 start</p><p>打开：&#x2F;etc&#x2F;init.d&#x2F;apache2 start<br>重启：&#x2F;etc&#x2F;init.d&#x2F;apache2 restart<br>关闭：&#x2F;etc&#x2F;init.d&#x2F;apache2 stop</p><p>启动网卡</p><p>&#x2F;etc&#x2F;init.d&#x2F;network start</p><p>网络相关</p><p>开启路由转发</p><p>echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward</p><h2 id="15-linux常用网络命令"><a href="#15-linux常用网络命令" class="headerlink" title="15.linux常用网络命令"></a><strong>15.linux常用网络命令</strong></h2><p>网络和监控命令类似于这些： hostname, ping, ifconfig, iwconfig, netstat, nslookup, traceroute, finger, telnet, ethtool 用于查看 linux 服务器 ip 地址，管理服务器网络配置，通过 telnet 和 ethernet 建立与 linux 之间的网络链接，查看 linux 的服务器信息等。下面让我们看看在 Linux 下的网络和监控命令的使用。</p><p>hostname 查看本机名</p><p>ping  一般用于测试网络是否通 内网icmp</p><p>ping <a href="http://www.baidu.com/">www.baidu.com</a> -c 3 执行3次</p><p>ifconfig 网卡信息</p><p>iwconfig 用于配置或获取无线网络设备信息</p><p>netstat </p><p>-a (all)显示所有选项，默认不显示LISTEN相关<br>-t (tcp)仅显示tcp相关选项<br>-u (udp)仅显示udp相关选项<br>-n 拒绝显示别名，能显示数字的全部转化成数字。<br>-l 仅列出有在 Listen (监听) 的服務状态</p><p>-p 显示建立相关链接的程序名<br>-r 显示路由信息，路由表<br>-e 显示扩展信息，例如uid等<br>-s 按各个协议进行统计<br>-c 每隔一个固定时间，执行该netstat命令。</p><p>提示：LISTEN和LISTENING的状态只有用-a或者-l才能看到</p><p>常用命令</p><p>netstat -ano</p><p>-an 查看当前所有已连接端口<br>-nlpt 查看当前所有tcp端口<br>-nlpu 查看当前所有udp端口<br>-nlpt | grep 80 查看所有80端口使用情况</p><p>netstat -lntup 查看所有的tcp和upd端口</p><p>nslookup </p><p>查询其他记录<br>直接查询返回的是A记录，我们可以指定参数，查询其他记录，比如AAAA、MX等。</p><p>nslookup -qt&#x3D;type domain [dns-server]<br>其中，type可以是以下这些类型：</p><p>A 地址记录<br>AAAA 地址记录<br>AFSDB Andrew文件系统数据库服务器记录<br>ATMA ATM地址记录<br>CNAME 别名记录<br>HINFO 硬件配置记录，包括CPU、操作系统信息<br>ISDN 域名对应的ISDN号码<br>MB 存放指定邮箱的服务器<br>MG 邮件组记录<br>MINFO 邮件组和邮箱的信息记录<br>MR 改名的邮箱记录<br>MX 邮件服务器记录<br>NS 名字服务器记录<br>PTR 反向记录<br>RP 负责人记录<br>RT 路由穿透记录<br>SRV TCP服务器信息记录<br>TXT 域名对应的文本信息<br>X25 域名对应的X.25地址记录</p><p>http协议</p><p>curl</p><p>wget</p><p>traceroute</p><p>traceroute是用来检测发出数据包的主机到目标主机之间所经过的网关数量的工具。traceroute的原理是试图以最小的TTL（存活时间）发出探测包来跟踪数据包到达目标主机所经过的网关，然后监听一个来自网关ICMP的应答。发送数据包的大小默认为38个字节。</p><p>-d 使用Socket层级的排错功能。<br>-f 设置第一个检测数据包的存活数值TTL的大小。<br>-F 设置勿离断位。<br>-g 设置来源路由网关，最多可设置8个。<br>-i 使用指定的网络界面送出数据包。<br>-I 使用ICMP回应取代UDP资料信息。<br>-m 设置检测数据包的最大存活数值TTL的大小。<br>-n 直接使用IP地址而非主机名称。<br>-p 设置UDP传输协议的通信端口。<br>-r 忽略普通的Routing Table，直接将数据包送到远端主机上。<br>-s 设置本地主机送出数据包的IP地址。<br>-t 设置检测数据包的TOS数值。<br>-v 详细显示指令的执行过程。<br>-w 设置等待远端主机回报的时间。</p><p>-x 开启或关闭数据包的正确性检验。</p><p>telnet</p><p>Linux telnet命令用于远端登入。</p><p>执行telnet指令开启终端机阶段作业，并登入远端主机。</p><p>现在多数用于检测某个端口是否开放</p><p>Finger</p><p>Finger是一种用户信息分享服务。它工作在TCP 79端口，可以用来公开用户的特定信息。Nmap的finger的脚本可以向Finger服务器发送请求，查询并获取用户的相关信息，如登录名、用户名、TTY类型、登录时间等。</p><p>ethtool 是用于查询及设置网卡参数的命令</p><h2 id="16-防火墙iptables"><a href="#16-防火墙iptables" class="headerlink" title="16.防火墙iptables"></a>16.防火墙iptables</h2><p>查看防火墙规则</p><p>iptalbes -L</p><p>清除规则</p><p>iptables -F</p><p>关闭防火墙 </p><p>&#x2F;etc&#x2F;init.d&#x2F;iptables stop</p><p>service iptables stop</p><p>安装：apt-get install ufw</p><p>关闭：ufw disable # To disable the firewall</p><p>开启：ufw enable # To enable the firewall</p><h2 id="17-linux文件属性和权限设置"><a href="#17-linux文件属性和权限设置" class="headerlink" title="17.  linux文件属性和权限设置"></a>17.  linux文件属性和权限设置</h2><h3 id="文件解释"><a href="#文件解释" class="headerlink" title="文件解释"></a>文件解释</h3><p>使用 ls -al 命令后会列出如下图所示的文件详细信息：<img src="/2022/08/09/kali%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/kali1" alt="27"></p><p><img src="/2022/08/09/kali%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/kali2" alt="28"></p><p>d 是目录 directory</p><p>- 普通文件  二进制文件 </p><p>l  软连接</p><h3 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h3><p>文件中r w x -的含义，r是只读权限，w是写的权限，x是可执行权限,-是没有任何权限。</p><p>目录中 r w x的含义，r具有ls权限，w是在目录上可以增加、删除、创建权限，x是具有ls –l权限。</p><p><img src="/2022/08/09/kali%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/kali3" alt="28"></p><h3 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h3><p>chmod 777 +文件名 （给单独文件赋所有权限）</p><p>chmod -R 777 &#x2F;home&#x2F;user 注：表示将整个&#x2F;home&#x2F;user目录与其中的文件和子目录的权限都设置为rwxrwxrwx</p><p>更改文件权限</p><p>chmod 654 &#x2F;test</p><p>对用户可读可写：4（读取）+ 2（写入）&#x3D; 6 ；</p><p>对用户组可读可执行：4（读取）+ 1（执行）&#x3D; 5 ；</p><p>对其他用户仅可读：4（读取）；</p><p>常用权限</p><p>-rw——- (600) 只有所有者才有读和写的权限</p><p>-rw-r–r– (644) 只有所有者才有读和写的权限，组群和其他人只有读的权限</p><p>-rwx—— (700) 只有所有者才有读，写，执行的权限</p><p>-rwxr-xr-x (755) 只有所有者才有读，写，执行的权限，组群和其他人只有读和执行的权限</p><p>-rwx–x–x (711) 只有所有者才有读，写，执行的权限，组群和其他人只有执行的权限</p><p>-rw-rw-rw- (666) 每个人都有读写的权限</p><p>-rwxrwxrwx (777) 每个人都有读写和执行的权限</p><p>也可以使用字母模式</p><p>chmod +x 和chmod a+x 是一样的，一般没有明确要求，可以就用chmod +x</p><p><img src="/2022/08/09/kali%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/kali4" alt="29"></p><p>创建一个文件只有用户具有完全控制的权限</p><p>touch moonsec</p><p>设置它用具有完全控制的权限 rwx 用户组没有任何权限 其他用户也没有任何权限</p><p>chmod u+rwx moonsec 当前用户加全部的权限</p><p>chmod g-r moonsec 群组把读取权限去掉</p><p>chmod o-r moonsec 其他用户读取权限去掉</p>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kali</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP通讯协议</title>
    <link href="/2022/08/08/HTTP%E5%8D%8F%E8%AE%AE/"/>
    <url>/2022/08/08/HTTP%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>超文本传输协议(HTTP)是一种通信协议，它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器。</p><p>HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。</p><p><img src="/2022/08/08/HTTP%E5%8D%8F%E8%AE%AE/image-20220801165030778.png" alt="image-20220801165030778"></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>HTTP协议永远都是客户端发起请求，服务器回送响应。</p><p>1、安全认证</p><p>2、快速、灵活</p><p>3、HTTP 1.0使用非持续连接：限制每次连接只处理一个请求，服务器处理完客户的请求，并收到客户的应答后，即断开连接。HTTP 1.1使用持续连接：不必为每个web对象创建一个新的连接，一个连接可以传送多个对象，采用这种方式可以节省传输时间。</p><p>4、无状态</p><p>并不是无连接</p><p>从HTTP&#x2F;1.1起，默认都开启了Keep-Alive，保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间 用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。Keep-Alive是有时间限制的</p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>1）首先客户机与服务器需要建立连接。</p><p> 2）建立连接后，客户机发送一个请求给服务器</p><p> 3）服务器接到请求后，给予相应的响应信息 </p><p>4）客户端接收服务器所返回的信息通过浏览器显示在用户的显示屏上，然后客户机与服务器断开连接。 </p><p>&#x3D;&#x3D;增加安全性的话可以加个代理服务器&#x3D;&#x3D;</p><p>以HTTP在开始传输之前，首先需要建立TCP连接，而TCP连接的过程需要所谓的“三次握手”。</p><p><img src="/2022/08/08/HTTP%E5%8D%8F%E8%AE%AE/image-20220801170517116.png" alt="image-20220801170517116"></p><h3 id="HTTP之URL"><a href="#HTTP之URL" class="headerlink" title="HTTP之URL"></a>HTTP之URL</h3><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息</p><p>URL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：</p><h4 id="http-www-aspxfans-com-8080-news-index-asp-boardID-5-amp-ID-24618-amp-page-1-name"><a href="#http-www-aspxfans-com-8080-news-index-asp-boardID-5-amp-ID-24618-amp-page-1-name" class="headerlink" title="http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name"></a><a href="http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</a></h4><p>从上面的URL可以看出，一个完整的URL包括以下几部分：</p><p>1.协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在”HTTP”后面的“&#x2F;&#x2F;”为分隔符</p><p>2.域名部分：该URL的域名部分为“<a href="http://www.aspxfans.com”.一个url中,也可以使用ip地址作为域名使用/">www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用</a></p><p>3.端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口</p><p>4.虚拟目录部分：从域名后的第一个“&#x2F;”开始到最后一个“&#x2F;”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“&#x2F;news&#x2F;”</p><p>5.文件名部分：从域名后的最后一个“&#x2F;”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“&#x2F;”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“&#x2F;”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名</p><p>6.锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分</p><p>7.参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID&#x3D;5&amp;ID&#x3D;24618&amp;page&#x3D;1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</p><h3 id="HTTP之状态码"><a href="#HTTP之状态码" class="headerlink" title="HTTP之状态码"></a>HTTP之状态码</h3><p>状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:</p><h6 id="1xx：指示信息–表示请求已接收，继续处理"><a href="#1xx：指示信息–表示请求已接收，继续处理" class="headerlink" title="1xx：指示信息–表示请求已接收，继续处理"></a>1xx：指示信息–表示请求已接收，继续处理</h6><h6 id="2xx：成功–表示请求已被成功接收、理解、接受"><a href="#2xx：成功–表示请求已被成功接收、理解、接受" class="headerlink" title="2xx：成功–表示请求已被成功接收、理解、接受"></a>2xx：成功–表示请求已被成功接收、理解、接受</h6><h6 id="3xx：重定向–要完成请求必须进行更进一步的操作"><a href="#3xx：重定向–要完成请求必须进行更进一步的操作" class="headerlink" title="3xx：重定向–要完成请求必须进行更进一步的操作"></a>3xx：重定向–要完成请求必须进行更进一步的操作</h6><h6 id="4xx：客户端错误–请求有语法错误或请求无法实现"><a href="#4xx：客户端错误–请求有语法错误或请求无法实现" class="headerlink" title="4xx：客户端错误–请求有语法错误或请求无法实现"></a>4xx：客户端错误–请求有语法错误或请求无法实现</h6><h6 id="5xx：服务器端错误–服务器未能实现合法的请求"><a href="#5xx：服务器端错误–服务器未能实现合法的请求" class="headerlink" title="5xx：服务器端错误–服务器未能实现合法的请求"></a>5xx：服务器端错误–服务器未能实现合法的请求</h6><p>常见状态码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">200</span> OK                        <span class="hljs-comment">//客户端请求成功</span><br><span class="hljs-number">400</span> Bad Request               <span class="hljs-comment">//客户端请求有语法错误，不能被服务器所理解</span><br><span class="hljs-number">401</span> Unauthorized              <span class="hljs-comment">//请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 </span><br><span class="hljs-number">403</span> Forbidden                 <span class="hljs-comment">//服务器收到请求，但是拒绝提供服务</span><br><span class="hljs-number">404</span> Not Found                 <span class="hljs-comment">//请求资源不存在，eg：输入了错误的URL</span><br><span class="hljs-number">500</span> Internal Server Error     <span class="hljs-comment">//服务器发生不可预期的错误</span><br><span class="hljs-number">503</span> Server Unavailable        <span class="hljs-comment">//服务器当前不能处理客户端的请求，一段时间后可能恢复正常</span><br></code></pre></td></tr></table></figure><h3 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h3><p>根据HTTP标准，HTTP请求可以使用多种请求方法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">GET      <span class="hljs-comment">// 请求指定的页面信息，并返回实体主体。</span><br>HEAD     <span class="hljs-comment">//类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</span><br>POST     <span class="hljs-comment">//向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</span><br>PUT      <span class="hljs-comment">// 从客户端向服务器传送的数据取代指定的文档的内容。</span><br>DELETE   <span class="hljs-comment">//请求服务器删除指定的页面。</span><br>CONNECT  <span class="hljs-comment">//HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</span><br>OPTIONS  <span class="hljs-comment">//允许客户端查看服务器的性能。</span><br>TRACE    <span class="hljs-comment">//回显服务器收到的请求，主要用于测试或诊断。</span><br></code></pre></td></tr></table></figure><p>抓包示例：</p><img src="/2022/08/08/HTTP%E5%8D%8F%E8%AE%AE/image-20220801170804269.png" alt="image-20220801170804269" style="zoom:150%;">]]></content>
    
    
    <categories>
      
      <category>HTTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RS232通讯协议</title>
    <link href="/2022/08/08/RS232%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/"/>
    <url>/2022/08/08/RS232%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="RS232通讯协议"><a href="#RS232通讯协议" class="headerlink" title="RS232通讯协议"></a>RS232通讯协议</h2><p>一、硬件Hardware：</p><p>波特率: 2400 bps </p><p>数据位: 8 bits </p><p>停止位 : 1 bits </p><p>奇偶校验: NON</p><p>二、DB9使用标准直通线，长度不宜超过15米</p><p><img src="/2022/08/08/RS232%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/D89" alt="image-20220712112329773"></p><p>三、命令</p><table><thead><tr><th>Q1</th><th>1-80K使用</th><th align="center">状态查询</th></tr></thead><tbody><tr><td>Q2</td><td>三相20-80K使用</td><td align="center">状态查询</td></tr><tr><td>Q6</td><td>1-80K使用</td><td align="center">状态查询</td></tr><tr><td>WA</td><td>6-80K使用</td><td align="center">功率查询</td></tr><tr><td>S<n></n></td><td>1-80K使用</td><td align="center">关机</td></tr></tbody></table><p>&#x3D;&#x3D;备注：<cr>表示回车．&#x3D;&#x3D;</cr></p><h3 id="（1）-查询命令-Q1"><a href="#（1）-查询命令-Q1" class="headerlink" title="（1） 查询命令 Q1"></a><strong>（1）</strong> <strong>查询命令</strong> <strong>Q1</strong></h3><p>为了查询系统基本的状态信息，&#x3D;&#x3D;主机发送：&#x3D;&#x3D;</p><h4 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1<cr></cr></h4><p><strong>UPS 回应</strong></p><p>(MMM.M NNN.N PPP.P QQQ RR.R S.SS TT.T b7b6b5b4b3b2b1b0<CR></CR></p><h4 id="输入电压-MMM-M"><a href="#输入电压-MMM-M" class="headerlink" title="输入电压: MMM.M"></a>输入电压: MMM.M</h4><p>M 是一个整数，范围为 0 – 9。单位是 V。</p><h4 id="上次转电池放电时电压-NNN-N"><a href="#上次转电池放电时电压-NNN-N" class="headerlink" title="上次转电池放电时电压: NNN.N"></a><strong>上次转电池放电时电压</strong>: NNN.N</h4><p>N 是一个整数，范围为 0 – 9，有部分机种默认为 0。 单位是 V。</p><h4 id="输出电压-PPP-P"><a href="#输出电压-PPP-P" class="headerlink" title="输出电压: PPP.P"></a><strong>输出电压: PPP.P</strong></h4><p>P 是十进制的整数，范围为 0 - 9。 单位是 V。三相输入时为 R 相电压。</p><h4 id="输出负载百分比-QQQ"><a href="#输出负载百分比-QQQ" class="headerlink" title="输出负载百分比: QQQ"></a><strong>输出负载百分比: QQQ</strong></h4><p>QQQ 是 W% 或 VA%的最大值。 VA% 是 VA 的最大值的百分比。 W% 是有用功率的最大值的百分比。</p><h4 id="输入频率-RR-R"><a href="#输入频率-RR-R" class="headerlink" title="输入频率: RR.R"></a>输入频率: RR.R</h4><p>R 是一个整数，范围为 0 – 9。 单位是 Hz。</p><h4 id="电池单元电压-S-SS"><a href="#电池单元电压-S-SS" class="headerlink" title="电池单元电压: S.SS"></a><strong>电池单元电压</strong>: S.SS</h4><p>S 是一个整数，范围为 0 – 9。 单位是 V。每节电池有 6 个电池单元，读到的电压要乘以 6，得到单节电池电压。市电模式时，读到的是充电电压，电池模式时读到电池电压。</p><h4 id="温度-TT-T"><a href="#温度-TT-T" class="headerlink" title="温度: TT.T"></a><strong>温度</strong>: TT.T</h4><p>T 是一个整数，范围为 0 – 9。单位是 摄氏度。</p><h4 id="UPS-状态-b7b6b5b4b3b2b1b0"><a href="#UPS-状态-b7b6b5b4b3b2b1b0" class="headerlink" title="UPS 状态: b7b6b5b4b3b2b1b0"></a>UPS 状态: b7b6b5b4b3b2b1b0</h4><p><bn> 是二进制数 ‘0’ 或 ‘1’。UPS 状态：</bn></p><table><thead><tr><th>Bit</th><th>描述</th></tr></thead><tbody><tr><td>7</td><td>1 :  市电异常</td></tr><tr><td>6</td><td>1 :  电池电压低</td></tr><tr><td>5</td><td>1 :  旁路输出</td></tr><tr><td>4</td><td>1 :  UPS 故障</td></tr><tr><td>3</td><td>1 :  UPS 后备式  (0 ：在线式)</td></tr><tr><td>2</td><td>1 :  测试进行中</td></tr><tr><td>1</td><td>1 :  内部保留</td></tr><tr><td>0</td><td>保留是 0</td></tr></tbody></table><p>二进制代码被修改为 8 个字节的二进制代码为避免与 ASCII 控制代码混淆. </p><p>&#x3D;&#x3D;备注：<cr>是回车，如果用 16 进制发送 Q1<cr>为 51 31 OD&#x3D;&#x3D;</cr></cr></p><p>举例:</p><p>电脑: Q1<cr></cr></p><p>UPS:  (208.4 000.0 208.4 034 59.9 2.05 35.0 00110000<cr></cr></p><p>表示:</p><p>输入电压 208.4 V.</p><p>上次转电池放电时输入电压 000.0 V.</p><p>输出电压 208.4 V</p><p>负载 34%.</p><p>输入频率 59.9 Hz</p><p>每个电池单元电池电压 2.05 V。每节电池 12.3V</p><p>温度 35.0</p><p>UPS 是在线式的, UPS 故障, 旁路运行.</p><h3 id="（2）-查询命令-Q2"><a href="#（2）-查询命令-Q2" class="headerlink" title="（2） 查询命令 Q2"></a>（2） 查询命令 Q2</h3><p>&#x3D;&#x3D;备注：<cr>是回车，如果用 16 进制发送 Q2<cr>为 51 32 OD&#x3D;&#x3D;</cr></cr></p><p>Computer: <strong>Q2 <cr></cr></strong></p><p>UPS: (MMM.M MMM.M MMM.M NNN.N PPP.P PPP.P PPP.P QQQ QQQ QQQ RR.R SSS.S TT.T</p><p>b7b6b5b4b3b2b1b0 ttt.tt CCC BB ff ff ff ff wwwwwwww YO<cr></cr></p><h4 id="UPS-输入电压-MMM-M"><a href="#UPS-输入电压-MMM-M" class="headerlink" title="UPS 输入电压: MMM.M"></a>UPS 输入电压: MMM.M</h4><p>M 是十进制的整数，范围为 0 - 9。 单位是 V。</p><p>在单相系统中，只有 R 相是有效的，S 和 T 相总是 0。在三相系统中，按顺序代表 R、S、T 相的值</p><h4 id="上次转电池放电时电压-NNN-N-1"><a href="#上次转电池放电时电压-NNN-N-1" class="headerlink" title="上次转电池放电时电压: NNN.N"></a>上次转电池放电时电压: NNN.N</h4><p>N 是一个整数，范围为 0 – 9，有部分机种默认为 0。 单位是 V.</p><h4 id="输出电压-PPP-P-1"><a href="#输出电压-PPP-P-1" class="headerlink" title="输出电压: PPP.P"></a>输出电压: PPP.P</h4><p>P 是十进制的整数，范围为 0 - 9。 单位是 V。</p><p>在单相系统中，只有 R 相是有效的，S 和 T 相总是 0。在三相系统中，按顺序代表 R、S、T 相的值。</p><h4 id="输出电流-QQQ"><a href="#输出电流-QQQ" class="headerlink" title="输出电流: QQQ"></a>输出电流: QQQ</h4><p>QQQ 是电流最大值的百分比，不是一个绝对值。</p><p>在单相系统中，只有 R 相是有效的，S 和 T 相总是 0。在三相系统中，按顺序代表 R、S、T 相的值。</p><h4 id="输出-频率-RR-R"><a href="#输出-频率-RR-R" class="headerlink" title="输出 频率: RR.R"></a>输出 频率: RR.R</h4><p>R 是十进制的整数，范围为 0 - 9。 单位是 Hz。</p><h4 id="电池电压-SSS-S"><a href="#电池电压-SSS-S" class="headerlink" title="电池电压: SSS.S"></a>电池电压: SSS.S</h4><p>S 是一个整数，范围为 0 – 9。 单位是 V。</p><h4 id="温度-TT-T-1"><a href="#温度-TT-T-1" class="headerlink" title="温度: TT.T"></a>温度: TT.T</h4><p>T 是一个整数，范围为 0 – 9。单位是 摄氏度。</p><h4 id="UPS-状态-b7b6b5b4b3b2b1b0-1"><a href="#UPS-状态-b7b6b5b4b3b2b1b0-1" class="headerlink" title="UPS 状态: b7b6b5b4b3b2b1b0"></a>UPS 状态: b7b6b5b4b3b2b1b0</h4><p><bn> 是二进制数 ‘0’ 或 ‘1’。UPS 状态：</bn></p><table><thead><tr><th>Bit</th><th>描述</th></tr></thead><tbody><tr><td>7</td><td>1 :  市电异常</td></tr><tr><td>6</td><td>1 :  电池电压低</td></tr><tr><td>5</td><td>1 :  旁路输出</td></tr><tr><td>4</td><td>1 :  UPS 故障</td></tr><tr><td>3</td><td>1 :  UPS 后备式  (0 ：在线式)</td></tr><tr><td>2</td><td>1 :  测试进行中</td></tr><tr><td>1</td><td>1 :  内部保留</td></tr><tr><td>0</td><td>保留是 0</td></tr></tbody></table><h4 id="电池剩余备用时间估计-ttttt"><a href="#电池剩余备用时间估计-ttttt" class="headerlink" title="电池剩余备用时间估计: ttttt"></a>电池剩余备用时间估计: ttttt</h4><p>估计的电池剩余备用时间。单位是秒。因电池备用时间与电池质量，放电频率，负载大小等条件都有关系，此数据仅供参考．</p><h4 id="电池容量百分比-CCC"><a href="#电池容量百分比-CCC" class="headerlink" title="电池容量百分比: CCC"></a>电池容量百分比: CCC</h4><p>CCC 为 000  - 100。值超过 100 % 时显示为最大值。</p><h4 id="电池测试状态-BB"><a href="#电池测试状态-BB" class="headerlink" title="电池测试状态: BB"></a>电池测试状态: BB</h4><p>00      idle</p><p>01   processing</p><p>02   result : no failure</p><p>03   result : failure &#x2F; warning 04 Not possible 或 inhibite 05 Test cancel</p><p>06   Reserved</p><p>07   Other values</p><h4 id="故障代码-ffffffff"><a href="#故障代码-ffffffff" class="headerlink" title="故障代码: ffffffff"></a>故障代码: ffffffff</h4><p>可包含同时发生的 4 种故障代码。此项仅供维修人员使用． <strong>警告: wwwwwwww</strong></p><p>可包含同时发生的4种故障代码，此项仅供维修人员使用．</p><h4 id="输入变压器类型-Y"><a href="#输入变压器类型-Y" class="headerlink" title="输入变压器类型: Y"></a><strong>输入变压器类型</strong>: Y</h4><p>Y 是二进制数字0 或 1</p><p>Y&#x3D;1,输入变压器是Y 型, LCD 显示相电压</p><p>Y&#x3D;0,输入变压器是∆, LCD 显示线电压</p><h4 id="Lcd-显示输出相电压或线电压-O"><a href="#Lcd-显示输出相电压或线电压-O" class="headerlink" title="Lcd 显示输出相电压或线电压: O"></a>Lcd 显示输出相电压或线电压: O</h4><p>O 是二进制数字0或1。</p><p>O&#x3D;1, LCD 显示输出电压是相电压</p><p>O&#x3D;0, LCD 显示输出电压是线电压</p><p>如果 O&#x3D;1(相电压), 但监控需要线电压，线电压 &#x3D; √3 ×相电压如果 O&#x3D;0(线电压), 但监控需要相电压，相电压 &#x3D; 线电压 &#x2F;√</p><h3 id="（3）-查询命令-Q6"><a href="#（3）-查询命令-Q6" class="headerlink" title="（3） 查询命令 Q6"></a>（3） 查询命令 Q6</h3><p>&#x3D;&#x3D;备注：<cr>是回车，如果用 16 进制发送 Q6<cr>为 51 36 OD&#x3D;&#x3D;</cr></cr></p><p>Q6<cr></cr></p><p><strong>回应：</strong></p><p>(MMM.M MMM.M MMM.M NN.N PPP.P PPP.P PPP.P RR.R QQQ QQQ QQQ SSS.S</p><p>VVV.V TT.T ttttt CCC KB ffffffff wwwwwwww YO<cr></cr></p><h4 id="UPS-输入电压-MMM-M-1"><a href="#UPS-输入电压-MMM-M-1" class="headerlink" title="UPS 输入电压: MMM.M"></a>UPS 输入电压: MMM.M</h4><p>M 是十进制的整数，范围为 0 - 9。 单位是 V。</p><p>在单相系统中，只有 R 相是有效的，S 和 T 相总是 0。在三相系统中，按顺序代表 R、S、T 相的值。</p><h4 id="UPS-输入频率-频率-NN-N"><a href="#UPS-输入频率-频率-NN-N" class="headerlink" title="UPS 输入频率 频率: NN.N"></a>UPS 输入频率 频率: NN.N</h4><p><strong>N</strong>  是十进制的整数，范围为 0 - 9。 单位是 Hz。<strong>输出电压</strong><strong>: PPP.P</strong></p><p>P 是十进制的整数，范围为 0 - 9。 单位是 V。</p><p>在单相系统中，只有 R 相是有效的，S 和 T 相总是 0。在三相系统中，按顺序代表 R、S、T 相的值。</p><h4 id="输出-频率-RR-R-1"><a href="#输出-频率-RR-R-1" class="headerlink" title="输出 频率: RR.R"></a>输出 频率: RR.R</h4><p>R 是十进制的整数，范围为 0 - 9。 单位是 Hz。<strong>输出电流</strong><strong>: QQQ</strong></p><p>QQQ 是电流最大值的百分比，不是一个绝对值。</p><p>在单相系统中，只有 R 相是有效的，S 和 T 相总是 0。在三相系统中，按顺序代表 R、S、T 相的值。</p><h4 id="Positive-电池-电压-SSS-S"><a href="#Positive-电池-电压-SSS-S" class="headerlink" title="Positive 电池 电压: SSS.S"></a>Positive 电池 电压: SSS.S</h4><p>S 是十进制的整数，范围为 0 - 9。 单位是 V。</p><h4 id="Negative-电池-电压-VVV-V"><a href="#Negative-电池-电压-VVV-V" class="headerlink" title="Negative 电池 电压: VVV.V"></a>Negative 电池 电压: VVV.V</h4><p>V 是十进制的整数，范围为 0 - 9。 单位是 V。</p><h4 id="温度-TT-T-2"><a href="#温度-TT-T-2" class="headerlink" title="温度: TT.T"></a>温度: TT.T</h4><p>T 是十进制的整数，范围为 0 - 9。 单位是摄氏度。</p><h4 id="电池剩余备用时间估计-ttttt-1"><a href="#电池剩余备用时间估计-ttttt-1" class="headerlink" title="电池剩余备用时间估计: ttttt"></a>电池剩余备用时间估计: ttttt</h4><p>估计的电池剩余备用时间。单位是秒。因电池备用时间与电池质量，放电频率，负载大小等条件都有关系，此数据仅供参考．</p><h4 id="电池容量百分比-CCC-1"><a href="#电池容量百分比-CCC-1" class="headerlink" title="电池容量百分比: CCC"></a>电池容量百分比: CCC</h4><p>CCC 为 000  - 100。值超过 100 % 时显示为最大值。</p><h4 id="系统模式-K"><a href="#系统模式-K" class="headerlink" title="系统模式: K"></a>系统模式: K</h4><p>系统模式定义如下：</p><table><thead><tr><th>K</th><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>PowerOn 模式</td><td>系统上电初始化。</td></tr><tr><td>1</td><td>Standby 模式</td><td>系统无输出，在此模式下，用户可进行系统配置及开  机。系统关机后，也会先转入此模式。</td></tr><tr><td>2</td><td>Bypass 模式</td><td>在不满足高效模式条件的情况下，以旁路输出为系统  输出。</td></tr><tr><td>3</td><td>Line 模式</td><td>UPS 模块由市电提供能量进行逆变输出，且系统以  UPS 并联输出为系统输出。</td></tr><tr><td>4</td><td>Bat 模式</td><td>UPS 模块由电池提供能量进行逆变输出，且系统以  UPS 并联输出为系统输出。</td></tr><tr><td>5</td><td>BatTest 模式</td><td>UPS 模块定时或根据用户设定由市电模式转换到电  池模式工作一段时间，检测电池是否正常，自检时间</td></tr></tbody></table><table><thead><tr><th></th><th></th><th>到后返回市电模式。</th></tr></thead><tbody><tr><td>6</td><td>Fault 模式</td><td>故障模式。</td></tr><tr><td>7</td><td>Converter 模式</td><td>逆变始终以额定的固定频率输出，给负载提供输出质  量极高的稳定电源。</td></tr><tr><td>8</td><td>HE 模式</td><td>高效模式，在旁路状况良好的情况下，可直接由旁路  为负载供电。</td></tr><tr><td>9</td><td>Shutdown 模式</td><td>关机模式</td></tr></tbody></table><h4 id="电池测试状态-B"><a href="#电池测试状态-B" class="headerlink" title="电池测试状态: B"></a>电池测试状态: B</h4><p>0     idle</p><p>1        processing</p><p>2      result : no failure</p><p>3      result : failure &#x2F; warning</p><p>4     Not possible 或 inhibite</p><p>5     Test cancel</p><p>6     Reserved</p><p>7    Other values</p><h4 id="故障代码-ffffffff-1"><a href="#故障代码-ffffffff-1" class="headerlink" title="故障代码: ffffffff"></a>故障代码: ffffffff</h4><p>可包含同时发生的 4 种故障代码。此项仅供维修人员使用． <strong>警告</strong><strong>: wwwwwwww</strong></p><p>可包含同时发生的4种故障代码，此项仅供维修人员使用．</p><h4 id="输入变压器类型-Y-1"><a href="#输入变压器类型-Y-1" class="headerlink" title="输入变压器类型: Y"></a><strong>输入变压器类型: Y</strong></h4><p>Y 是二进制数字0 或 1</p><p>Y&#x3D;1,输入变压器是Y 型, LCD 显示相电压</p><p>Y&#x3D;0,输入变压器是∆, LCD 显示线电压</p><h4 id="Lcd-显示输出相电压或线电压-O-1"><a href="#Lcd-显示输出相电压或线电压-O-1" class="headerlink" title="Lcd 显示输出相电压或线电压: O"></a>Lcd 显示输出相电压或线电压: O</h4><p>O  是二进制数字0或1。</p><p>O&#x3D;1, LCD 显示输出电压是相电压</p><p>O&#x3D;0, LCD 显示输出电压是线电压</p><p>如果 O&#x3D;1(相电压), 但监控需要线电压，线电压 &#x3D; √3 ×相电压如果 O&#x3D;0(线电压), 但监控需要相电压，相电压 &#x3D; 线电压 &#x2F;√3</p><h3 id="4-查询命令WA"><a href="#4-查询命令WA" class="headerlink" title="(4)查询命令WA"></a>(4)查询命令WA</h3><p>&#x3D;&#x3D;备注：<cr>是回车，如果用 16 进制发送 WA<cr>为 51 41 OD&#x3D;&#x3D;</cr></cr></p><p>WA<cr></cr></p><p>UPS 响应</p><p>(<a href="http://www.w/">WWW.W </a><a href="http://www.w/">WWW.W </a><a href="http://www.w/">WWW.W </a>VVV.V VVV.V VVV.V TTT.T SSS.S AAA.A AAA.A AAA.A QQQ</p><p>b7b6b5b4b3b2b1b0<cr></cr></p><h4 id="输出功率：-WWW-W"><a href="#输出功率：-WWW-W" class="headerlink" title="输出功率： WWW.W"></a>输出功率： <a href="http://www.w/">WWW.W</a></h4><p>W 是十进制的整数，范围从 0 - 9。 单位是 KW. </p><p>在单相系统中，只有 R 相是有效的，S 和 T 相总是 0。 </p><p>在三相系统中，按顺序代表 R、S、T 相的值。</p><h4 id="输出视在功率：-VVV-V"><a href="#输出视在功率：-VVV-V" class="headerlink" title="输出视在功率： VVV.V"></a><strong>输出视在功率：</strong> <strong>VVV.V</strong></h4><p>V 是十进制的整数，范围从 0 - 9。 单位是 KVA. </p><p>在单相系统中，只有 R 相是有效的，S 和 T 相总是 0。 </p><p>在三相系统中，按顺序代表 R、S、T 相的值。</p><h4 id="总功率-TTT-T"><a href="#总功率-TTT-T" class="headerlink" title="总功率: TTT.T"></a><strong>总功率: TTT.T</strong></h4><p>T 是十进制的整数，范围从 0 - 9。 单位是 KW.</p><p>3 Phase system, Include of three phase R,S,&amp;T real power.</p><h4 id="总视在功率-SSS-S"><a href="#总视在功率-SSS-S" class="headerlink" title="总视在功率: SSS.S"></a>总视在功率: SSS.S</h4><p>S 是十进制的整数，范围从 0 - 9。 单位是 KVA.</p><p>3 Phase system, Include of three phase R,S,&amp;T complex power.</p><h4 id="输出电流-AAA-A"><a href="#输出电流-AAA-A" class="headerlink" title="输出电流: AAA.A"></a>输出电流: AAA.A</h4><p>A 是十进制的整数，范围从 0 - 9。 单位是 A.</p><p>在单相系统中，只有 R 相是有效的，S 和 T 相总是 0。在三相系统中，按顺序代表 R、S、T 相的值。</p><h4 id="输出负载百分比-QQQ-1"><a href="#输出负载百分比-QQQ-1" class="headerlink" title="输出负载百分比: QQQ"></a>输出负载百分比: QQQ</h4><p>QQQ 是 W% 或 VA%的最大值。 VA% 是 VA 的最大值的百分比。 W% 是有用功率的最大值的百分比。</p><h4 id="UPS-Status-b7b6b5b4b3b2b1b0"><a href="#UPS-Status-b7b6b5b4b3b2b1b0" class="headerlink" title="UPS Status:b7b6b5b4b3b2b1b0"></a>UPS Status:b7b6b5b4b3b2b1b0</h4><p><bn> 是二进制数 ‘0’ 或 ‘1’。UPS 状态：</bn></p><table><thead><tr><th>Bit</th><th>描述</th></tr></thead><tbody><tr><td>7</td><td>1 : 市电异常</td></tr><tr><td>6</td><td>1 :  电池电压低</td></tr><tr><td>5</td><td>1 :  旁路模式</td></tr><tr><td>4</td><td>1 :  UPS 故障</td></tr><tr><td>3</td><td>1 :  UPS 后备式  (0 ：在线式)</td></tr><tr><td>2</td><td>1 :  测试进行中</td></tr><tr><td>1</td><td>1 :  内部保留</td></tr><tr><td>0</td><td>保留是 0</td></tr></tbody></table><h3 id="（5）关机命令S-S"><a href="#（5）关机命令S-S" class="headerlink" title="（5）关机命令S S"></a>（5）关机命令S S<n><cr></cr></n></h3><h4 id="关机延迟时间"><a href="#关机延迟时间" class="headerlink" title="关机延迟时间: "></a>关机延迟时间: <n></n></h4><p><n>可设置范围： .2, .3, …, 01, 02,…, to 10。 单位是分钟。</n></p><h4 id="UPS-动作-x2F-回应"><a href="#UPS-动作-x2F-回应" class="headerlink" title="UPS 动作&#x2F;回应:"></a>UPS 动作&#x2F;回应:</h4><p>延时<n>分钟后关闭 UPS 输出。电池模式下（该指令仅限于电池模式），UPS 在接受到关机指令<n>分钟后都会关闭输出。但如果<n>分钟内电池电压低于关闭点电压， 则 UPS 立即关闭输出。UPS 输出关闭后如果侦测到有市电，则延时 10 秒后重新输出。</n></n></n></p><p>例如： S.3<cr> — 在(0.3) 分钟后切断输出。</cr></p><p>Send:3 char<br>51 31 0D </p><p>Recv:46 char<br>28 32 33 31 2E 36 20 31 34 30 2E 30 20 32 32 30 2E 34 20 30 33 36 20 35 30 2E 30 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 00 </p><p>Send:3 char<br>51 31 0D </p><p>Send:3 char<br>51 31 0D </p><p>Recv:47 char<br>28 32 33 30 2E 39 20 31 34 30 2E 30 20 32 32 30 2E 37 20 30 33 36 20 35 30 2E 30 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 0D </p><p>Send:3 char<br>51 32 0D </p><p>Recv:118 char<br>28 32 33 31 2E 31 20 32 33 31 2E 37 20 32 32 38 2E 35 20 31 34 30 2E 30 20 32 32 30 2E 37 20 32 32 31 2E 31 20 32 32 30 2E 36 20 30 30 33 20 30 31 34 20 30 30 30 20 35 30 2E 30 20 34 32 33 2E 32 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 20 30 30 30 2E 30 30 20 31 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 30 30 34 30 30 30 20 31 31 0D </p><p>Send:3 char<br>51 36 0D </p><p>Recv:110 char<br>28 32 33 30 2E 38 20 32 33 31 2E 35 20 32 32 39 2E 31 20 35 30 2E 30 20 32 32 30 2E 36 20 32 32 31 2E 30 20 32 32 30 2E 36 20 35 30 2E 31 20 30 30 33 20 30 31 34 20 30 30 30 20 32 31 31 2E 33 20 32 31 31 2E 39 20 32 32 2E 30 20 30 30 30 30 30 20 31 30 30 20 33 32 20 30 30 30 30 30 30 30 30 20 30 30 30 30 30 30 30 30 20 31 31 0D </p><p>Send:3 char<br>57 41 0D </p><p>Recv:80 char<br>28 30 30 30 2E 34 20 30 30 32 2E 39 20 30 30 30 2E 30 20 30 30 30 2E 37 20 30 30 33 2E 31 20 30 30 30 2E 30 20 30 33 34 2E 30 20 30 33 39 2E 39 20 30 30 33 2E 33 20 30 31 34 2E 35 20 30 30 30 2E 33 20 30 33 36 20 30 30 30 30 30 30 30 30 0D </p><p>Send:3 char<br>51 31 0D </p><p>Recv:47 char<br>28 32 33 31 2E 31 20 31 34 30 2E 30 20 32 32 30 2E 36 20 30 33 37 20 34 39 2E 39 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 0D </p><p>Send:3 char<br>51 32 0D </p><p>Recv:118 char<br>28 32 33 31 2E 33 20 32 33 32 2E 35 20 32 33 30 2E 31 20 31 34 30 2E 30 20 32 32 30 2E 36 20 32 32 31 2E 31 20 32 32 30 2E 36 20 30 30 33 20 30 31 34 20 30 30 30 20 35 30 2E 30 20 34 32 33 2E 34 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 20 30 30 30 2E 30 30 20 31 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 30 30 34 30 30 30 20 31 31 0D </p><p>Send:3 char<br>51 36 0D </p><p>Recv:110 char<br>28 32 33 30 2E 39 20 32 33 32 2E 37 20 32 33 30 2E 32 20 34 39 2E 39 20 32 32 30 2E 38 20 32 32 30 2E 39 20 32 32 30 2E 35 20 34 39 2E 39 20 30 30 33 20 30 31 34 20 30 30 30 20 32 31 31 2E 33 20 32 31 31 2E 39 20 32 32 2E 30 20 30 30 30 30 30 20 31 30 30 20 33 32 20 30 30 30 30 30 30 30 30 20 30 30 30 30 30 30 30 30 20 31 31 0D </p><p>Send:3 char<br>57 41 0D </p><p>Recv:80 char<br>28 30 30 30 2E 34 20 30 30 32 2E 38 20 30 30 30 2E 30 20 30 30 30 2E 37 20 30 30 33 2E 31 20 30 30 30 2E 30 20 30 33 33 2E 37 20 30 33 39 2E 34 20 30 30 33 2E 33 20 30 31 34 2E 32 20 30 30 30 2E 33 20 30 33 36 20 30 30 30 30 30 30 30 30 0D </p><p>本次采集结束</p><p>[2021-08-18 10:36:39:578]:<br>Send:3 char<br>51 31 0D<br>[2021-08-18 10:36:39:809]:<br>Recv:47 char<br>28 32 33 31 2E 33 20 31 34 30 2E 30 20 32 32 30 2E 38 20 30 33 37 20 34 39 2E 39 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:36:39:928]:<br>Send:3 char<br>51 32 0D<br>[2021-08-18 10:36:40:458]:<br>Recv:118 char<br>28 32 33 31 2E 34 20 32 33 32 2E 38 20 32 32 39 2E 39 20 31 34 30 2E 30 20 32 32 30 2E 37 20 32 32 31 2E 31 20 32 32 30 2E 36 20 30 30 33 20 30 31 35 20 30 30 30 20 34 39 2E 39 20 34 32 33 2E 33 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 20 30 30 30 2E 30 30 20 31 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 30 30 34 30 30 30 20 31 31 0D<br>[2021-08-18 10:36:40:569]:<br>Send:3 char<br>51 36 0D<br>[2021-08-18 10:36:41:078]:<br>Recv:110 char<br>28 32 33 31 2E 33 20 32 33 32 2E 36 20 32 32 39 2E 37 20 34 39 2E 39 20 32 32 30 2E 36 20 32 32 30 2E 39 20 32 32 30 2E 35 20 34 39 2E 39 20 30 30 33 20 30 31 35 20 30 30 30 20 32 31 31 2E 33 20 32 31 32 2E 30 20 32 32 2E 30 20 30 30 30 30 30 20 31 30 30 20 33 32 20 30 30 30 30 30 30 30 30 20 30 30 30 30 30 30 30 30 20 31 31 0D<br>[2021-08-18 10:36:41:198]:<br>Send:3 char<br>57 41 0D<br>[2021-08-18 10:36:41:556]:<br>Recv:80 char<br>28 30 30 30 2E 34 20 30 30 32 2E 39 20 30 30 30 2E 30 20 30 30 30 2E 37 20 30 30 33 2E 32 20 30 30 30 2E 30 20 30 33 34 2E 34 20 30 34 30 2E 32 20 30 30 33 2E 32 20 30 31 34 2E 37 20 30 30 30 2E 33 20 30 33 36 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:36:41:677]:<br>本次采集结束</p><p>[2021-08-18 10:36:44:568]:<br>Send:3 char<br>51 31 0D<br>[2021-08-18 10:36:44:784]:<br>Recv:47 char<br>28 32 33 30 2E 39 20 31 34 30 2E 30 20 32 32 30 2E 37 20 30 33 36 20 34 39 2E 39 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:36:44:899]:<br>Send:3 char<br>51 32 0D<br>[2021-08-18 10:36:45:431]:<br>Recv:118 char<br>28 32 33 31 2E 31 20 32 33 32 2E 34 20 32 33 30 2E 34 20 31 34 30 2E 30 20 32 32 30 2E 35 20 32 32 30 2E 37 20 32 32 30 2E 36 20 30 30 33 20 30 31 34 20 30 30 30 20 34 39 2E 39 20 34 32 33 2E 32 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 20 30 30 30 2E 30 30 20 31 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 30 30 34 30 30 30 20 31 31 0D<br>[2021-08-18 10:36:45:552]:<br>Send:3 char<br>51 36 0D<br>[2021-08-18 10:36:46:051]:<br>Recv:110 char<br>28 32 33 31 2E 33 20 32 33 32 2E 38 20 32 33 30 2E 33 20 34 39 2E 39 20 32 32 30 2E 35 20 32 32 31 2E 31 20 32 32 30 2E 34 20 35 30 2E 30 20 30 30 33 20 30 31 34 20 30 30 30 20 32 31 31 2E 33 20 32 31 31 2E 39 20 32 32 2E 30 20 30 30 30 30 30 20 31 30 30 20 33 32 20 30 30 30 30 30 30 30 30 20 30 30 30 30 30 30 30 30 20 31 31 0D<br>[2021-08-18 10:36:46:164]:<br>Send:3 char<br>57 41 0D<br>[2021-08-18 10:36:46:527]:<br>Recv:80 char<br>28 30 30 30 2E 34 20 30 30 32 2E 38 20 30 30 30 2E 30 20 30 30 30 2E 37 20 30 30 33 2E 31 20 30 30 30 2E 30 20 30 33 33 2E 38 20 30 33 39 2E 37 20 30 30 33 2E 33 20 30 31 34 2E 33 20 30 30 30 2E 33 20 30 33 36 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:36:46:643]:<br>本次采集结束</p><p>[2021-08-18 10:36:49:573]:<br>Send:3 char<br>51 31 0D<br>[2021-08-18 10:36:49:808]:<br>Recv:47 char<br>28 32 33 30 2E 35 20 31 34 30 2E 30 20 32 32 30 2E 38 20 30 33 36 20 34 39 2E 39 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:36:49:920]:<br>Send:3 char<br>51 32 0D<br>[2021-08-18 10:36:50:454]:<br>Recv:118 char<br>28 32 33 30 2E 37 20 32 33 32 2E 37 20 32 33 30 2E 34 20 31 34 30 2E 30 20 32 32 30 2E 39 20 32 32 31 2E 30 20 32 32 30 2E 35 20 30 30 33 20 30 31 34 20 30 30 30 20 34 39 2E 39 20 34 32 33 2E 33 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 20 30 30 30 2E 30 30 20 31 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 30 30 34 30 30 30 20 31 31 0D<br>[2021-08-18 10:36:50:572]:<br>Send:3 char<br>51 36 0D<br>[2021-08-18 10:36:50:770]:<br>Recv:38 char<br>28 32 33 31 2E 32 20 32 33 32 2E 32 20 32 32 39 2E 34 20 34 39 2E 39 20 32 32 30 2E 36 20 32 32 31 2E 33 20 32 00<br>[2021-08-18 10:36:50:774]:<br>Send:3 char<br>51 36 0D<br>[2021-08-18 10:36:50:777]:<br>本次采集结束</p><p>[2021-08-18 10:37:38:605]:<br>Send:3 char<br>51 31 0D<br>[2021-08-18 10:37:38:840]:<br>Recv:47 char<br>28 32 33 30 2E 39 20 31 34 30 2E 30 20 32 32 30 2E 37 20 30 33 36 20 34 39 2E 39 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:37:38:961]:<br>Send:3 char<br>51 32 0D<br>[2021-08-18 10:37:39:487]:<br>Recv:118 char<br>28 32 33 31 2E 30 20 32 33 32 2E 39 20 32 33 30 2E 34 20 31 34 30 2E 30 20 32 32 30 2E 36 20 32 32 30 2E 38 20 32 32 30 2E 36 20 30 30 33 20 30 31 34 20 30 30 30 20 35 30 2E 30 20 34 32 33 2E 33 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 20 30 30 30 2E 30 30 20 31 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 30 30 34 30 30 30 20 31 31 0D<br>[2021-08-18 10:37:39:603]:<br>Send:3 char<br>51 36 0D<br>[2021-08-18 10:37:40:107]:<br>Recv:110 char<br>28 32 33 31 2E 30 20 32 33 32 2E 36 20 32 33 30 2E 37 20 34 39 2E 39 20 32 32 30 2E 35 20 32 32 31 2E 30 20 32 32 30 2E 36 20 35 30 2E 30 20 30 30 33 20 30 31 34 20 30 30 30 20 32 31 31 2E 33 20 32 31 32 2E 30 20 32 32 2E 30 20 30 30 30 30 30 20 31 30 30 20 33 32 20 30 30 30 30 30 30 30 30 20 30 30 30 30 30 30 30 30 20 31 31 0D<br>[2021-08-18 10:37:40:219]:<br>Send:3 char<br>57 41 0D<br>[2021-08-18 10:37:40:584]:<br>Recv:80 char<br>28 30 30 30 2E 34 20 30 30 32 2E 39 20 30 30 30 2E 30 20 30 30 30 2E 37 20 30 30 33 2E 32 20 30 30 30 2E 30 20 30 33 34 2E 31 20 30 34 30 2E 35 20 30 30 33 2E 34 20 30 31 34 2E 35 20 30 30 30 2E 33 20 30 33 36 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:37:40:696]:<br>本次采集结束</p><p>[2021-08-18 10:37:43:505]:<br>Send:3 char<br>51 31 0D<br>[2021-08-18 10:37:43:763]:<br>Recv:47 char<br>28 32 33 31 2E 30 20 31 34 30 2E 30 20 32 32 30 2E 35 20 30 33 37 20 34 39 2E 39 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:37:43:872]:<br>Send:3 char<br>51 32 0D<br>[2021-08-18 10:37:44:410]:<br>Recv:118 char<br>28 32 33 31 2E 33 20 32 33 33 2E 31 20 32 33 31 2E 30 20 31 34 30 2E 30 20 32 32 30 2E 38 20 32 32 31 2E 31 20 32 32 30 2E 36 20 30 30 33 20 30 31 35 20 30 30 30 20 34 39 2E 39 20 34 32 33 2E 32 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 20 30 30 30 2E 30 30 20 31 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 30 30 34 30 30 30 20 31 31 0D<br>[2021-08-18 10:37:44:529]:<br>Send:3 char<br>51 36 0D<br>[2021-08-18 10:37:45:031]:<br>Recv:110 char<br>28 32 33 31 2E 34 20 32 33 32 2E 34 20 32 33 30 2E 38 20 34 39 2E 39 20 32 32 30 2E 35 20 32 32 31 2E 32 20 32 32 30 2E 37 20 34 39 2E 39 20 30 30 33 20 30 31 34 20 30 30 30 20 32 31 31 2E 33 20 32 31 32 2E 30 20 32 32 2E 30 20 30 30 30 30 30 20 31 30 30 20 33 32 20 30 30 30 30 30 30 30 30 20 30 30 30 30 30 30 30 30 20 31 31 0D<br>[2021-08-18 10:37:45:142]:<br>Send:3 char<br>57 41 0D<br>[2021-08-18 10:37:45:509]:<br>Recv:80 char<br>28 30 30 30 2E 34 20 30 30 32 2E 39 20 30 30 30 2E 30 20 30 30 30 2E 37 20 30 30 33 2E 32 20 30 30 30 2E 30 20 30 33 34 2E 36 20 30 34 30 2E 39 20 30 30 33 2E 33 20 30 31 34 2E 38 20 30 30 30 2E 33 20 30 33 36 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:37:45:616]:<br>本次采集结束</p><p>[2021-08-18 10:37:48:507]:<br>Send:3 char<br>51 31 0D<br>[2021-08-18 10:37:48:736]:<br>Recv:47 char<br>28 32 33 31 2E 32 20 31 34 30 2E 30 20 32 32 30 2E 36 20 30 33 37 20 34 39 2E 39 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:37:48:854]:<br>Send:3 char<br>51 32 0D<br>[2021-08-18 10:37:49:385]:<br>Recv:118 char<br>28 32 33 31 2E 32 20 32 33 32 2E 38 20 32 33 30 2E 38 20 31 34 30 2E 30 20 32 32 30 2E 36 20 32 32 30 2E 39 20 32 32 30 2E 35 20 30 30 33 20 30 31 34 20 30 30 30 20 35 30 2E 30 20 34 32 33 2E 33 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 20 30 30 30 2E 30 30 20 31 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 30 30 34 30 30 30 20 31 31 0D<br>[2021-08-18 10:37:49:497]:<br>Send:3 char<br>51 36 0D<br>[2021-08-18 10:37:50:004]:<br>Recv:110 char<br>28 32 33 31 2E 30 20 32 33 33 2E 32 20 32 33 30 2E 38 20 34 39 2E 39 20 32 32 30 2E 37 20 32 32 30 2E 38 20 32 32 30 2E 37 20 34 39 2E 39 20 30 30 33 20 30 31 34 20 30 30 30 20 32 31 31 2E 33 20 32 31 31 2E 39 20 32 32 2E 30 20 30 30 30 30 30 20 31 30 30 20 33 32 20 30 30 30 30 30 30 30 30 20 30 30 30 30 30 30 30 30 20 31 31 0D<br>[2021-08-18 10:37:50:122]:<br>Send:3 char<br>57 41 0D<br>[2021-08-18 10:37:50:481]:<br>Recv:80 char<br>28 30 30 30 2E 34 20 30 30 32 2E 39 20 30 30 30 2E 30 20 30 30 30 2E 37 20 30 30 33 2E 32 20 30 30 30 2E 30 20 30 33 34 2E 35 20 30 34 30 2E 30 20 30 30 33 2E 32 20 30 31 34 2E 35 20 30 30 30 2E 33 20 30 33 37 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:37:50:597]:<br>本次采集结束</p><p>[2021-08-18 10:37:53:509]:<br>Send:3 char<br>51 31 0D<br>[2021-08-18 10:37:53:761]:<br>Recv:47 char<br>28 32 33 31 2E 36 20 31 34 30 2E 30 20 32 32 30 2E 33 20 30 33 36 20 34 39 2E 39 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:37:53:875]:<br>Send:3 char<br>51 32 0D<br>[2021-08-18 10:37:54:409]:<br>Recv:118 char<br>28 32 33 31 2E 31 20 32 33 33 2E 30 20 32 33 30 2E 36 20 31 34 30 2E 30 20 32 32 30 2E 37 20 32 32 31 2E 30 20 32 32 30 2E 35 20 30 30 33 20 30 31 34 20 30 30 30 20 35 30 2E 30 20 34 32 33 2E 33 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 20 30 30 30 2E 30 30 20 31 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 30 30 34 30 30 30 20 31 31 0D<br>[2021-08-18 10:37:54:517]:<br>Send:3 char<br>51 36 0D<br>[2021-08-18 10:37:55:029]:<br>Recv:110 char<br>28 32 33 31 2E 30 20 32 33 32 2E 38 20 32 33 30 2E 38 20 34 39 2E 39 20 32 32 30 2E 35 20 32 32 31 2E 31 20 32 32 30 2E 35 20 34 39 2E 39 20 30 30 33 20 30 31 34 20 30 30 30 20 32 31 31 2E 33 20 32 31 32 2E 30 20 32 32 2E 30 20 30 30 30 30 30 20 31 30 30 20 33 32 20 30 30 30 30 30 30 30 30 20 30 30 30 30 30 30 30 30 20 31 31 0D<br>[2021-08-18 10:37:55:136]:<br>Send:3 char<br>57 41 0D<br>[2021-08-18 10:37:55:506]:<br>Recv:80 char<br>28 30 30 30 2E 34 20 30 30 32 2E 39 20 30 30 30 2E 30 20 30 30 30 2E 37 20 30 30 33 2E 32 20 30 30 30 2E 30 20 30 33 34 2E 34 20 30 34 30 2E 34 20 30 30 33 2E 32 20 30 31 34 2E 37 20 30 30 30 2E 33 20 30 33 36 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:37:55:628]:<br>本次采集结束</p><p>[2021-08-18 10:37:58:514]:<br>Send:3 char<br>51 31 0D<br>[2021-08-18 10:37:58:734]:<br>Recv:47 char<br>28 32 33 31 2E 31 20 31 34 30 2E 30 20 32 32 30 2E 36 20 30 33 36 20 34 39 2E 39 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:37:58:844]:<br>Send:3 char<br>51 32 0D<br>[2021-08-18 10:37:59:382]:<br>Recv:118 char<br>28 32 33 31 2E 31 20 32 33 32 2E 39 20 32 33 30 2E 35 20 31 34 30 2E 30 20 32 32 30 2E 36 20 32 32 31 2E 30 20 32 32 30 2E 35 20 30 30 33 20 30 31 34 20 30 30 30 20 35 30 2E 30 20 34 32 33 2E 33 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 20 30 30 30 2E 30 30 20 31 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 30 30 34 30 30 30 20 31 31 0D<br>[2021-08-18 10:37:59:488]:<br>Send:3 char<br>51 36 0D<br>[2021-08-18 10:37:59:597]:<br>Recv:1 char<br>00<br>[2021-08-18 10:37:59:601]:<br>Send:3 char<br>51 36 0D<br>[2021-08-18 10:37:59:605]:<br>本次采集结束</p>]]></content>
    
    
    <categories>
      
      <category>RS232</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RS232</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Modbus TCP通讯协议</title>
    <link href="/2022/08/08/MODBUS%20TCP/"/>
    <url>/2022/08/08/MODBUS%20TCP/</url>
    
    <content type="html"><![CDATA[<h2 id="MODBUS-TCP协议"><a href="#MODBUS-TCP协议" class="headerlink" title="MODBUS TCP协议"></a>MODBUS TCP协议</h2><h3 id="Modbus-TCP数据帧"><a href="#Modbus-TCP数据帧" class="headerlink" title="Modbus TCP数据帧"></a>Modbus TCP数据帧</h3><p>　　ModbusTCP的数据帧可分为两部分：<strong>MBAP</strong>+<strong>PDU</strong>。</p><p>![img](MODBUS TCP&#x2F;1789291-20200530161850302-400055988.jpg)</p><h3 id="MBAP报文头"><a href="#MBAP报文头" class="headerlink" title="MBAP报文头"></a>MBAP报文头</h3><p>　　MBAP的长度为7个字节，组成如下：</p><table><thead><tr><th align="center">事务处理标识</th><th>协议标识</th><th>长度</th><th>单元标识符</th></tr></thead><tbody><tr><td align="center">2字节</td><td>2字节</td><td>2字节</td><td>1字节</td></tr></tbody></table><table><thead><tr><th>内容</th><th align="center">解释</th></tr></thead><tbody><tr><td><strong>事务处理标识</strong></td><td align="center">可以理解为报文的序列号，一般每次通信之后就要加1以区别不同的通信数据报文。</td></tr><tr><td><strong>协议标识符</strong></td><td align="center">00 00表示ModbusTCP协议。</td></tr><tr><td><strong>长度</strong></td><td align="center">表示接下来的数据长度，单位为字节。</td></tr><tr><td><strong>单元标识符</strong></td><td align="center">可以理解为设备地址。</td></tr></tbody></table><h3 id="帧结构PDU"><a href="#帧结构PDU" class="headerlink" title="帧结构PDU"></a>帧结构PDU</h3><p>　　PDU由功能码+数据组成。功能码为1字节，数据长度不定，由具体功能决定。</p><p>　　<strong>功能码</strong></p><p>根据对象的不同，常用的Modbus的功能码有：</p><table><thead><tr><th>功能码</th><th align="center">含义</th></tr></thead><tbody><tr><td>0x01</td><td align="center">读coil</td></tr><tr><td>0x05</td><td align="center">写单个coil</td></tr><tr><td>0x0F</td><td align="center">写多个coil</td></tr><tr><td>0x02</td><td align="center">读离散量输入</td></tr><tr><td>0x04</td><td align="center">读输入寄存器</td></tr><tr><td>0x03</td><td align="center">读保持寄存器</td></tr><tr><td>0x06</td><td align="center">写单个保持寄存器</td></tr><tr><td>0x10</td><td align="center">写多个保持寄存器</td></tr></tbody></table><h3 id="Modbus-TCP示例报文"><a href="#Modbus-TCP示例报文" class="headerlink" title="Modbus TCP示例报文"></a>Modbus TCP示例报文</h3><p>　　1、数据请求</p><table><thead><tr><th>97 76 00 00 00 06 04 04 00 7D 00 7D</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td>示例</td><td>长度</td><td>说明</td><td>备注</td></tr><tr><td>Map报文头</td><td>0x97</td><td>1</td><td>事务处理标识符Hi</td><td>客户机发起，服务器复制，用于事务处理配对</td></tr><tr><td></td><td>0x96</td><td>1</td><td>事务处理标识符Lo</td><td></td></tr><tr><td></td><td>0x0000</td><td>2</td><td>协议标识符号</td><td>客户机发起，服务器复制Modbus协议 &#x3D; 0.</td></tr><tr><td></td><td>0x0006</td><td>2</td><td>长度</td><td>从本字节下一个到最后</td></tr><tr><td></td><td>0x04</td><td>1</td><td>单元标识符</td><td>客户机发起，服务器复制串口链路或其他总线上远程终端标识</td></tr><tr><td>功能码</td><td>0x04</td><td>1</td><td>功能码，读寄存器</td><td>参考标准modbus协议</td></tr><tr><td>数据</td><td>0x007D</td><td>2</td><td>起始地址</td><td></td></tr><tr><td></td><td>0x 007D</td><td>2</td><td>寄存器数量</td><td></td></tr><tr><td>校验</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>　　2、数据请求回复</p><table><thead><tr><th>97 76 00 00 00 FD 04 04 FA ………………</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td>示例</td><td>长度</td><td>说明</td><td>备注</td></tr><tr><td>Map报文头</td><td>0x97</td><td>1</td><td>事务处理标识符Hi</td><td>客户机发起，服务器复制，用于事务处理配对</td></tr><tr><td></td><td>0x96</td><td>1</td><td>事务处理标识符Lo</td><td></td></tr><tr><td></td><td>0x0000</td><td>2</td><td>协议标识符号</td><td>客户机发起，服务器复制Modbus协议 &#x3D; 0.</td></tr><tr><td></td><td>0x00FD</td><td>2</td><td>长度</td><td>长度从本字节下一个到最后</td></tr><tr><td></td><td>0x04</td><td>1</td><td>单元标识符</td><td>客户机发起，服务器复制串口链路或其他总线上远程终端标识</td></tr><tr><td>功能码</td><td>0x04</td><td>1</td><td>功能码，读寄存器</td><td>参考标准modbus协议</td></tr><tr><td>数据</td><td>0x FA</td><td>1</td><td>字节个数</td><td></td></tr><tr><td></td><td>0x—-</td><td></td><td>数据</td><td></td></tr><tr><td>校验</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>　　3、写多个寄存器</p><p>　　</p><table><thead><tr><th>97 79 00 00 00 09 04 10 00 00 00 01 02 00 01</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td>示例</td><td>长度</td><td>说明</td><td>备注</td></tr><tr><td>Map报文头</td><td>0x97</td><td>1</td><td>事务处理标识符Hi</td><td>客户机发起，服务器复制，用于事务处理配对</td></tr><tr><td></td><td>0x79</td><td>1</td><td>事务处理标识符Lo</td><td></td></tr><tr><td></td><td>0x0000</td><td>2</td><td>协议标识符号</td><td>客户机发起，服务器复制Modbus协议 &#x3D; 0.</td></tr><tr><td></td><td>0x0009</td><td>2</td><td>长度</td><td>从本字节下一个到最后</td></tr><tr><td></td><td>0x04</td><td>1</td><td>单元标识符</td><td>客户机发起，服务器复制串口链路或其他总线上远程终端标识</td></tr><tr><td>功能码</td><td>0x10</td><td>1</td><td>功能码，读寄存器</td><td>参考标准modbus协议</td></tr><tr><td>数据</td><td>0x0000</td><td>2</td><td>起始地址</td><td></td></tr><tr><td></td><td>0x 0001</td><td>2</td><td>写寄存器数量</td><td></td></tr><tr><td></td><td>0x 02</td><td>1</td><td>写字节的个数</td><td></td></tr><tr><td></td><td>00 01</td><td>2</td><td>目标值</td><td></td></tr><tr><td>校验</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>　　</p><p>　　4、写多个寄存器响应</p><p>　　</p><table><thead><tr><th>97 79 00 00 00 06 04 10 00 00 00 01</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td>示例</td><td>长度</td><td>说明</td><td>备注</td></tr><tr><td>Map报文头</td><td>0x97</td><td>1</td><td>事务处理标识符Hi</td><td>客户机发起，服务器复制，用于事务处理配对</td></tr><tr><td></td><td>0x79</td><td>1</td><td>事务处理标识符Lo</td><td></td></tr><tr><td></td><td>0x0000</td><td>2</td><td>协议标识符号</td><td>客户机发起，服务器复制Modbus协议 &#x3D; 0.</td></tr><tr><td></td><td>0x0006</td><td>2</td><td>长度</td><td>从本字节下一个到最后</td></tr><tr><td></td><td>0x04</td><td>1</td><td>单元标识符</td><td>客户机发起，服务器复制串口链路或其他总线上远程终端标识</td></tr><tr><td>功能码</td><td>0x10</td><td>1</td><td>功能码，读寄存器</td><td>参考标准modbus协议</td></tr><tr><td>数据</td><td>0x0000</td><td>2</td><td>起始地址</td><td></td></tr><tr><td></td><td>0x 0001</td><td>2</td><td>寄存器个数</td><td></td></tr><tr><td>校验</td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Modbus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Modbus TCP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Modbus RTU通讯协议</title>
    <link href="/2022/08/08/MODBUS%20RTU/"/>
    <url>/2022/08/08/MODBUS%20RTU/</url>
    
    <content type="html"><![CDATA[<h2 id="MODBUS-RTU协议"><a href="#MODBUS-RTU协议" class="headerlink" title="MODBUS RTU协议"></a>MODBUS RTU协议</h2><p>MODBUS  RTU通信规约</p><p>![img](MODBUS RTU&#x2F;1789291-20200531131537098-1326034318.jpg)</p><p>信息传输为异步方式，并以字节为单位，每个字节由8 位二进制数组成：</p><p>异步：异步双方不需要共同的时钟，也就是接收方不知道发送方什么时候发送，所以在发送的信息中就要有提示接收方开始接收的信息，如开始位，同时在结束时有停止位。</p><p>异步的另外一种含义是计算机多线程的异步处理。与同步处理相对，异步处理不用阻塞当前<a href="https://baike.baidu.com/item/%E7%BA%BF%E7%A8%8B/103101">线程</a>来等待处理完成，而是允许后续操作，直至其它线程将处理完成，并回调通知此线程。</p><p>但此处需要明确的是:异步与<a href="https://baike.baidu.com/item/%E5%A4%9A%E7%BA%BF%E7%A8%8B/1190404">多线程</a>与并行不是同一个概念.</p><table><thead><tr><th>起始位</th><th>1位</th></tr></thead><tbody><tr><td>数据位</td><td>8位</td></tr><tr><td>奇偶校验位</td><td>无校验</td></tr><tr><td>停止位</td><td>1位</td></tr><tr><td>流控</td><td>无流控</td></tr><tr><td>通讯速率</td><td>9600bps</td></tr></tbody></table><img src="/2022/08/08/MODBUS%20RTU/image-20220711095955587.png" alt="image-20220711095955587" style="zoom:67%;"><p>每个数据帧组成如下：（RTU模式）</p><table><thead><tr><th>地址码</th><th>功能码</th><th>数据信息</th><th>CRC 校验</th></tr></thead><tbody><tr><td>8 位</td><td>8 位</td><td>N*8 位</td><td>16 位</td></tr></tbody></table><p>地址码：信息发送过来必然有个地址</p><p>功能码：就来告诉从机执行什么动作</p><p>通常用两个16位的数来表示，所以总共是8位</p><table><thead><tr><th><strong>功能码</strong></th><th><strong>定 义</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>01H</td><td>Read Coil Status</td><td>读写一个Coil</td></tr><tr><td>02H</td><td>Read Input Status</td><td>只读一个Coil</td></tr><tr><td>03H</td><td>Read Holding Registers</td><td>读写寄存器数值</td></tr><tr><td>04H</td><td>Read Input Registers</td><td>只读寄存器数值</td></tr><tr><td>05H</td><td>Force Single Coil</td><td>修改一个Coil值</td></tr><tr><td>06H</td><td>Preset Single Register</td><td>修改一个寄存器值</td></tr><tr><td>0FH</td><td>Force Multiple Coils</td><td>修改多个Coil值</td></tr><tr><td>10H</td><td>Load Multiple Register</td><td>修改多个寄存器值</td></tr></tbody></table><p>数据区</p><p>数据区包括需要由从机返送何种信息或执行什么动作。这些信息可以是数据、参考地址等。</p><p>错误校验码（16 位CRC 校验）</p><p>主机或从机可用校验码进行判别接收信息是否正确。由于电子噪声或一些其它干扰， 信息在传输过程中有时会发生错误，错误校验码（CRC）可以检验主机或从机在通讯数据传送过程中的信息是否有误，错误的数据可以放弃（无论是发送还是接收），这样增加了系统的安全和效率。</p><p>MODBUS 通讯规约的CRC（冗余循环码）包含2个字节，即16位二进制数。CRC码由发送设备（主机）计算，放置于发送信息帧的尾部（CRC 高字节在前）。接收信息的设备（从机）再重新计算接收到信息的CRC，比较计算得到的CRC 是否与接收到的相符，如果两者不相符，则表明出错。</p><p>16位CRC校验。 CRC-16 &#x3D; <em>x</em>^16 + <em>x</em>^12 + <em>x</em>^5 + <em>x</em>^0</p><p>计算步骤为：</p><p>(1).预置16 位寄存器为十六进制FFFF（即全为1），称此寄存器为CRC 寄存器； </p><p>(2).把第一个8 位数据与16 位CRC 寄存器的&#x3D;&#x3D;低位相异或&#x3D;&#x3D;，把结果放于CRC 寄存器； </p><p>(3).把寄存器的内容右移一位(朝低位)，用0 填补最高位，检查最低位</p><p>（注意：这时的最低位指移位前的最低位，不是移位后的最低位）；</p><p>(4). 如果最低位为0：重复第3 步(再次移位)，如果最低位为1：CRC 寄存器与多项式</p><p>A001H（1010000000000001B）进行异或；</p><p>(5). 重复步骤3 和4，直到右移8 次，这样整个8 位数据全部进行了处理；</p><p>(6). 重复步骤2 到步骤5，进行下一个8 位数据的处理；</p><p>(7). 最后得到的CRC 寄存器即为CRC 码。</p><p>(8).CRC计算参考代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title">calculate_CRC</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *ptr, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> crc=<span class="hljs-number">0xffff</span>; <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i; <span class="hljs-keyword">while</span>(len!=<span class="hljs-number">0</span>)<br>&#123;<br>crc^=*ptr;<span class="hljs-comment">// crc寄存器与数据的8位进行异或</span><br> <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>((crc&amp;<span class="hljs-number">0x0001</span>)==<span class="hljs-number">0</span><span class="hljs-comment">/*与   如果是0就进行移位*/</span>) crc=crc&gt;&gt;<span class="hljs-number">1</span>; <span class="hljs-keyword">else</span><br>&#123;<br>crc=crc&gt;&gt;<span class="hljs-number">1</span>; crc^=<span class="hljs-number">0xa001</span>;<br>&#125;<br>&#125;<br>len-=<span class="hljs-number">1</span>; ptr++;<br>&#125;<br>crc=(crc&lt;&lt;<span class="hljs-number">8</span>) | (crc&gt;&gt;<span class="hljs-number">8</span>);<span class="hljs-comment">//高低字节取反</span><br>    <span class="hljs-keyword">return</span> crc;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="传输格式"><a href="#传输格式" class="headerlink" title="传输格式"></a>传输格式</h4><h5 id="命令报文格式"><a href="#命令报文格式" class="headerlink" title="命令报文格式"></a>命令报文格式</h5><p>数据传输分为被动和主动以及自己传输和接受</p><p>被动比如是打开某个东西然后自动发送某东西</p><p>主动就是主动发信息</p><p>在传输过程中，数据遵循的一些规则统称为协议</p><p>不同设备之间，协议是不同的</p><p>协议有底层协议和高层协议</p><p>这是一个底层协议</p><p>校验码的那些一般都是规定好的，是大家通用的，不需要去学的特别清楚，了解就行。</p><p>&#x3D;&#x3D;地址是设备地址与起始地址是不同的&#x3D;&#x3D;</p><p>起始地址是你需要的东西储存的地址</p><p>1） Read Coil Status</p><p>&#x3D;&#x3D;数据个数要看你需要的东西占多少字节&#x3D;&#x3D;</p><p>&#x3D;&#x3D;功能码“01H”能读取位元，&#x3D;&#x3D;      读写</p><table><thead><tr><th align="center">地址</th><th>功能码</th><th>起始地址</th><th></th><th>数据个数</th><th></th><th>CRC</th><th></th></tr></thead><tbody><tr><td align="center">01</td><td>01</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td></tr></tbody></table><p>返回</p><table><thead><tr><th>地址</th><th>功能码</th><th>字节个数</th><th>数据</th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>01</td><td>N（8位）</td><td>数据N..  1</td><td>高位</td><td>低位</td></tr></tbody></table><p>2） Read Input Status： 功能码“02H”能读取位元，</p><table><thead><tr><th>地址</th><th>功能码</th><th>起始地址</th><th></th><th>数据个数</th><th></th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>02</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td></tr></tbody></table><p>返回</p><table><thead><tr><th>地址</th><th>功能码</th><th>字节个数</th><th>数据</th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>02</td><td>N（8位）</td><td>数据N..  1</td><td>高位</td><td>低位</td></tr></tbody></table><p>3） Read Holding Registers</p><p>功能码“03H”能够访问所有内部保持寄存器。</p><table><thead><tr><th>地址</th><th>功能码</th><th>起始地址</th><th></th><th>数据个数</th><th></th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>03</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td></tr></tbody></table><p>返回</p><table><thead><tr><th>地址</th><th>功能码</th><th>字节个数</th><th>数据</th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>03</td><td>2N</td><td>数据1（16位）……数据N（16位）</td><td>高位</td><td>低位</td></tr></tbody></table><p>4） Read Input Registers：</p><p>功能码“04H”能够访问所有外部输入寄存器。</p><table><thead><tr><th>地址</th><th>功能码</th><th>起始地址</th><th></th><th>数据个数</th><th></th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>04</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td></tr></tbody></table><p>返回：</p><table><thead><tr><th>地址</th><th>功能码</th><th>字节个数</th><th>数据</th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>04</td><td>2N</td><td>数据1（16位）……数据N（16位）</td><td>高位</td><td>低位</td></tr></tbody></table><p>5） Force Single Coil：</p><p>功能码“05H”能够设置一个位元，这里的数据就是一个字节，只可能是0xFF 00 或者0x00 00。0xFF 00代表开机 0x00 00代表关机。</p><table><thead><tr><th>地址</th><th>功能码</th><th>地址</th><th></th><th>数据</th><th></th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>05</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td></tr></tbody></table><p>返回：</p><table><thead><tr><th>地址</th><th>功能码</th><th>地址</th><th></th><th>数据</th><th></th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>05</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td></tr></tbody></table><p>6） Preset Single Register</p><p>功能码“06H”能修改一个内部保持寄存器。</p><table><thead><tr><th>地址</th><th>功能码</th><th>地址</th><th></th><th>数据</th><th></th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>06</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td></tr></tbody></table><p>返回：</p><table><thead><tr><th>地址</th><th>功能码</th><th>地址</th><th></th><th>数据</th><th></th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>06</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td></tr></tbody></table><p>7） Force Multiple Coils：</p><p>功能码“0FH”，能根据位元的位设置多个量。</p><table><thead><tr><th>地址</th><th>功能码</th><th>起始地址</th><th>数据个数</th><th>数据个数</th><th></th><th>字节个数</th><th>数据</th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>15</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>N</td><td>字节（8位）1……N</td><td>高位</td><td>低位</td></tr></tbody></table><p>返回：</p><table><thead><tr><th>地址</th><th>功能码</th><th>起始地址</th><th></th><th>数据个数</th><th></th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>15</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td></tr></tbody></table><p>8） Load Multiple Register</p><p>功能码“10H”，能根据连续地址修改内部多个保持寄存器。</p><table><thead><tr><th>地址</th><th>功能码</th><th>起始地址</th><th></th><th>数据个数</th><th></th><th>字节个数</th><th>数据</th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>16</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>2N</td><td>数据（16位）1……N</td><td>高位</td><td>低位</td></tr></tbody></table><p>返回：</p><table><thead><tr><th>地址</th><th>功能码</th><th>起始地址</th><th></th><th>数据个数</th><th></th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>16</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td></tr></tbody></table><h5 id="异常应答返回（测试时开放，实际使用时屏蔽）-非法功能："><a href="#异常应答返回（测试时开放，实际使用时屏蔽）-非法功能：" class="headerlink" title="异常应答返回（测试时开放，实际使用时屏蔽） 非法功能："></a>异常应答返回（测试时开放，实际使用时屏蔽） 非法功能：</h5><table><thead><tr><th>从站地址</th><th>功能码</th><th>异常码</th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>80H+原功能码</td><td>ERR</td><td>高位</td><td>低位</td></tr></tbody></table><p>ERR ：01 非法功能</p><p>02 非法数据地址</p><p>03 非法数据值</p><p>04 非法个数</p><p>05 CRC错误</p><p>06 从机忙状态</p><p>[2022-05-31 17:34:39:731]: Send:8 char    8字节  </p><p>01 02 00 00 00 0F 38 0E               数据个数15个 ？   </p><p>[2022-05-31 17:34:39:840]: Recv:7 char</p><p>01 02 02 00 00 B9 B8          数据位00 00？<br>[2022-05-31 17:34:39:951]: Send:8 char    8字节</p><p>01 03 00 00 00 04 44 09       4个数据<br>[2022-05-31 17:34:40:060]: Recv:13 char</p><p>01 03 &#x3D;&#x3D;08&#x3D;&#x3D; 00 00 60 18 00 00 15 4A 33 12    08表示2N   4个数据<br>[2022-05-31 17:34:40:172]: Send:8 char   8字节</p><p>01 04 00 00 00 0A 70 0D    数据个数10<br>[2022-05-31 17:34:40:282]: Recv:25 char</p><p>01 04 &#x3D;&#x3D;14&#x3D;&#x3D; 08 E1 08 E7 08 E8 0F 66 0F 6C 0F 69 00 FC 00 00 00 E9 00 00 25 7A  </p><p> 20个数据<br>[2022-05-31 17:34:40:391]: Send:8 char</p><p>01 04 00 0A 00 18 D0 02     数据24个<br>[2022-05-31 17:34:40:500]: Recv:2 char</p><p>01 84      </p><p>[2022-05-31 17:34:40:514]: Send:8 char</p><p>01 04 00 0A 00 18 D0 02<br>[2022-05-31 17:34:40:848]: Recv:2 char</p><p>01 84 </p><p>[2022-05-31 17:34:40:856]: Send:8 char</p><p>01 04 00 0A 00 18 D0 02<br>[2022-05-31 17:34:41:382]: Recv:2 char</p><p>01 84 </p><p>[2022-05-31 17:34:44:740]: Send:8 char</p><p>01 02 00 00 00 0F 38 0E<br>[2022-05-31 17:34:44:847]: Recv:7 char</p><p>01 02 02 00 00 B9 B8<br>[2022-05-31 17:34:44:956]: Send:8 char</p><p>01 03 00 00 00 04 44 09<br>[2022-05-31 17:34:45:066]: Recv:13 char</p><p>01 03 08 00 00 60 18 00 00 15 4A 33 12<br>[2022-05-31 17:34:45:176]: Send:8 char</p><p>01 04 00 00 00 0A 70 0D<br>[2022-05-31 17:34:45:285]: Recv:25 char</p><p>01 04 14 08 E1 08 E7 08 E7 0F 66 0F 6B 0F 67 00 FF 00 00 00 EA 00 00 FF 6A<br>[2022-05-31 17:34:45:396]: Send:8 char</p><p>01 04 00 0A 00 18 D0 02<br>[2022-05-31 17:34:45:504]: Recv:2 char</p><p>01 84 </p><p>[2022-05-31 17:34:45:510]: Send:8 char</p><p>01 04 00 0A 00 18 D0 02<br>[2022-05-31 17:34:45:819]: Recv:2 char</p><p>01 84 </p><p>[2022-05-31 17:34:45:824]: Send:8 char</p><p>01 04 00 0A 00 18 D0 02<br>[2022-05-31 17:34:46:353]: Recv:2 char</p><p>01 84 </p><p>[2022-05-31 17:34:49:735]: Send:8 char</p><p>01 02 00 00 00 0F 38 0E<br>[2022-05-31 17:34:49:842]: Recv:7 char</p><p>01 02 02 00 00 B9 B8<br>[2022-05-31 17:34:49:952]: Send:8 char</p><p>01 03 00 00 00 04 44 09<br>[2022-05-31 17:34:50:063]: Recv:13 char</p><p>01 03 08 00 00 60 18 00 00 15 4A 33 12<br>[2022-05-31 17:34:50:174]: Send:8 char</p><p>01 04 00 00 00 0A 70 0D<br>[2022-05-31 17:34:50:284]: Recv:25 char</p><p>01 04 14 08 DF 08 E6 08 E6 0F 63 0F 69 0F 65 00 FF 00 00 00 ED 00 00 E5 0B<br>[2022-05-31 17:34:50:395]: Send:8 char</p><p>01 04 00 0A 00 18 D0 02<br>[2022-05-31 17:34:50:507]: Recv:2 char</p><p>01 84 </p><p>[2022-05-31 17:34:50:513]: Send:8 char</p><p>01 04 00 0A 00 18 D0 02<br>[2022-05-31 17:34:50:824]: Recv:2 char</p><p>01 84 </p><p>[2022-05-31 17:34:50:829]: Send:8 char</p><p>01 04 00 0A 00 18 D0 02<br>[2022-05-31 17:34:51:346]: Recv:2 char</p><p>01 84 </p>]]></content>
    
    
    <categories>
      
      <category>Modbus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Modbus RTU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Modbus通讯协议</title>
    <link href="/2022/08/08/MODBUS%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/"/>
    <url>/2022/08/08/MODBUS%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="Modbus通讯协议简介"><a href="#Modbus通讯协议简介" class="headerlink" title="Modbus通讯协议简介"></a>Modbus通讯协议简介</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Modbus是工业领域通信协议的业界标准，是工业电子设备之间常用的连接方式。</p><p>特点：</p><ul><li>公开发表并且无版权要求；</li><li>易于部署和维护；</li><li>对供应商来说，修改移动本地的比特或字节没有很多限制。</li></ul><h3 id="Modbus-通讯方式"><a href="#Modbus-通讯方式" class="headerlink" title="Modbus 通讯方式"></a>Modbus 通讯方式</h3><p>1、TCP&#x2F;IP</p><p>2、各种媒体（有线：EIA&#x2F;TIA-232-E、EIA-422、EIA&#x2F;TIA-485-A ；光纤、无线等）上的异步串行传输；&#x3D;&#x3D;Modbus RTU和Modbus ASCII通讯既是采用该方式；&#x3D;&#x3D;</p><p>3、Modbus Plus，一种高速令牌传递网络。</p><p><img src="/2022/08/08/MODBUS%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/1789291-20200530140559414-931108713.jpg" alt="img"></p><h3 id="协议描述"><a href="#协议描述" class="headerlink" title="协议描述"></a>协议描述</h3><p>Modbus协议定义了一个控制器能认识使用的消息结构,而不管它们是经过何种网络进行通信的。它描述了一控制器请求访问其它设备的过程，如果回应来自其它设备的请求，以及怎样侦测错误并记录。</p><p>通过此协议，控制器相互之间、或控制器经由网络（如以太网）可以和其它设备之间进行通信。Modbus通讯物理接口可以选用串口（包括RS232、RS485和RS422），也可以选择以太网口。</p><p>通信过程：</p><p><img src="/2022/08/08/MODBUS%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/1789291-20200530144651500-608118892.jpg" alt="img"></p><p><img src="/2022/08/08/MODBUS%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/1789291-20200530144719721-773949887.jpg" alt="img"></p><p><strong>当主站不发送请求时，从站不会自己发出数据，从站和从站之间不能直接通讯。</strong></p><p>Modbus协议能够应用在不同类型的总线或者网络。对应不同的总线或网络，Modbus协议引入一些附加域映射成应用数据单元（ADU），即ADU &#x3D; 附加域 + PDU。例如：</p><ul><li>RS232 &#x2F; RS485 ADU &#x3D; 253 字节+服务器地址(1 byte) + CRC (2 字节) &#x3D; 256 字节 ；</li><li>TCP MODBUS ADU &#x3D; 249 字节+ MBAP (7 字节) &#x3D; 256 字节 。</li></ul><p><img src="/2022/08/08/MODBUS%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/1789291-20200530143538234-1678145168.jpg" alt="img"></p><h3 id="功能码"><a href="#功能码" class="headerlink" title="功能码"></a>功能码</h3><p>1.公共功能码</p><p>2.用户定义功能码</p><p>3.保留功能码</p><p><img src="/2022/08/08/MODBUS%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/1789291-20200530155234175-1895322693.jpg" alt="img"></p><p>公共功能码：</p><p><img src="/2022/08/08/MODBUS%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/1789291-20200530155637575-1588436382.jpg" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Modbus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Modbus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AES算法C语言实现</title>
    <link href="/2022/07/04/AES%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/07/04/AES%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="密码学基础-AES算法C语言实现"><a href="#密码学基础-AES算法C语言实现" class="headerlink" title="密码学基础  AES算法C语言实现"></a>密码学基础  AES算法C语言实现</h1><p><em>作为密码学的第一篇blog，首先将字符和位的关系说明清楚：</em></p><p>通常情况下一字节等于八位，通常在读取图片、声音、可执行文件需要用字节数组来保存文件，在下载文件也是用byte数组来做临时的缓冲器接收文件内容。</p><p>字符(Character)计算机中使用的字母、数字、字和符号，比如’P’、’K’、’%’、’#’等。</p><p>&#x3D;&#x3D;一般在英文状态下一个字母或字符占用一个字节，一个汉字用两个字节表示。&#x3D;&#x3D;</p><ul><li>ASCII 码中，一个英文字母(不分大小写)为一个字节，一个中文汉字为两个字节。</li><li>UTF-8 编码中，一个英文字为一个字节，一个中文为三个字节。</li><li>Unicode 编码中，一个英文为一个字节，一个中文为两个字节。</li><li>符号：英文标点为一个字节，中文标点为两个字节。例如：英文句号 <strong>.</strong> 占1个字节的大小，中文句号 <strong>。</strong>占2个字节的大小。</li><li>UTF-16 编码中，一个英文字母字符或一个汉字字符存储都需要 2 个字节(Unicode 扩展区的一些汉字存储需要 4 个字节)。</li><li>UTF-32 编码中，世界上任何字符的存储都需要 4 个字节。</li></ul><h2 id="AES简介"><a href="#AES简介" class="headerlink" title="AES简介"></a>AES简介</h2><p>是DES的替代算法，同样也是对称加密算法</p><ul><li>和DES一样，能有效抵御所有已知攻击；</li><li>加密算法易于现有软硬件平台的实现，且加解密过程效率优于DES；</li><li>具有典型的对称分组加密算法特性，以快速混淆和扩散为设计原则，本质是轮函数过程的循环。</li></ul><p><em><strong>AES的数据分组长度统一为128位，而密钥空间可根据需要采用128位、192位和256位三种不同长度。和大多数分组加密算法不一样AES的轮函数并没有采用Feistel结构设计，而是使用了3个不同的可逆均匀变换。</strong></em></p><h3 id="AES算法主要步骤"><a href="#AES算法主要步骤" class="headerlink" title="AES算法主要步骤"></a>AES算法主要步骤</h3><ol><li>密钥扩展（Key Expansion），使用密钥扩展算法将128位用户主密钥扩展成R个轮密钥；</li><li>初始轮（Init Round），即为轮密钥加；</li><li>重复轮（Rounds），每一轮包括：字节替换（SubBytes），行移位（Shift Rows），列混合（Mix Columns），轮密钥加（Add Round Key）四个步骤；</li><li>最终轮（Final Round），最终轮比重复轮少了列混合的步骤。</li></ol><p>&#x3D;&#x3D;最后一轮是不用列混合操作的&#x3D;&#x3D;</p><h3 id="AES算法具体内容"><a href="#AES算法具体内容" class="headerlink" title="AES算法具体内容"></a>AES算法具体内容</h3><p><a href="https://pic4.zhimg.com/80/v2-b22e3bdd7da5ddf5ea6ff71909dac4b7_720w.jpg"><img src="/2022/07/04/AES%E5%AE%9E%E7%8E%B0/v2-b22e3bdd7da5ddf5ea6ff71909dac4b7_720w.jpg" alt="img"></a></p><p>在讲述密钥加法层之前，我们来看看密钥的扩展</p><h4 id="密钥扩展"><a href="#密钥扩展" class="headerlink" title="密钥扩展"></a>密钥扩展</h4><p><a href="https://pic4.zhimg.com/80/v2-3027156eb00bcddcdac69657c8aad1e7_720w.jpg"><img src="/2022/07/04/AES%E5%AE%9E%E7%8E%B0/v2-3027156eb00bcddcdac69657c8aad1e7_720w.jpg" alt="img"></a></p><p><strong>子密钥的生成是以列为单位进行的，一列是32Bit，四列组成子密钥共128Bit。生成子密钥的数量比AES算法的轮数多一个，因为第一个密钥加法层进行密钥漂白时也需要子密钥。</strong></p><p>&#x3D;&#x3D;也就是密钥的扩展比算法的轮数多一个&#x3D;&#x3D;</p><p>如果i不是4的倍数，那么第i列如下：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">w<span class="hljs-comment">[i]</span>=w<span class="hljs-comment">[i-4]</span>⊕w<span class="hljs-comment">[i-1]</span><br></code></pre></td></tr></table></figure><p>如果i是4的倍数，那么第i列如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">w<span class="hljs-selector-attr">[i]</span>=w<span class="hljs-selector-attr">[i-4]</span>⊕<span class="hljs-built_in">T</span>(w<span class="hljs-selector-attr">[i-1]</span>)<br></code></pre></td></tr></table></figure><p>其中T是一个复杂的函数</p><p><strong>函数T()首先将4个输入字节进行翻转，并执行一个按字节的S盒代换，最后用第一个字节与轮系数Rcon进行异或运算。轮系数是一个有10个元素的一维数组，一个元素1个字节。T()函数存在的目的有两个，一是增加密钥编排中的非线性；二是消除AES中的对称性（防止不同轮的产生的轮密钥的对称性或者相似性）。这两种属性都是抵抗某些分组密码攻击必要的。</strong></p><p><a href="https://pic3.zhimg.com/80/v2-718685429c353bdf13b0d1fa5646ca1a_720w.png"><img src="/2022/07/04/AES%E5%AE%9E%E7%8E%B0/v2-718685429c353bdf13b0d1fa5646ca1a_720w.png" alt="img"></a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> Rcon[<span class="hljs-number">11</span>] = &#123;<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x1B</span>,<span class="hljs-number">0x36</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Key_S_Substitution</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>(*ExtendKeyArray)[<span class="hljs-number">44</span>], <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> nCol)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>&#123;<br>ExtendKeyArray[i][nCol] = S_Table[(ExtendKeyArray[i][nCol]) &gt;&gt; <span class="hljs-number">4</span>][(ExtendKeyArray[i][nCol]) &amp; <span class="hljs-number">0x0F</span>];<br>&#125;<br><br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">T_Function</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>(*ExtendKeyArray)[<span class="hljs-number">44</span>], <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> nCol)</span>   </span><br><span class="hljs-function">    <span class="hljs-comment">//T函数</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//1、将扩展密钥矩阵的nCol-1列复制到nCol列上，并将nCol列第一行的元素移动到最后一行，其他行数上移一行</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>&#123;<br>ExtendKeyArray[i][nCol] = ExtendKeyArray[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">4</span>][nCol - <span class="hljs-number">1</span>];<br>&#125;<br>    <br><span class="hljs-comment">//2、将nCol列进行S盒替换</span><br><span class="hljs-built_in">Key_S_Substitution</span>(ExtendKeyArray, nCol);<br>    <br><span class="hljs-comment">//3、将该列第一行元素与Rcon进行异或运算</span><br>ExtendKeyArray[<span class="hljs-number">0</span>][nCol] ^= Rcon[nCol / <span class="hljs-number">4</span>];<br><br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">CalculateExtendKeyArray</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>(*PasswordArray)[<span class="hljs-number">4</span>], <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>(*ExtendKeyArray)[<span class="hljs-number">44</span>])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//1、将密钥数组放入前四列扩展密钥组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)<br>&#123;<br>ExtendKeyArray[i &amp; <span class="hljs-number">0x03</span>][i &gt;&gt; <span class="hljs-number">2</span>] = PasswordArray[i &amp; <span class="hljs-number">0x03</span>][i &gt;&gt; <span class="hljs-number">2</span>];<br>&#125;<br><br><span class="hljs-comment">//2、计算扩展矩阵的后四十列</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">11</span>; i++) <span class="hljs-comment">//进行十轮循环</span><br>&#123;<br><span class="hljs-comment">//(1)如果列号是4的倍数，这执行G函数 否则将nCol-1列复制到nCol列上</span><br><span class="hljs-built_in">G_Function</span>(ExtendKeyArray, <span class="hljs-number">4</span>*i);<br><br><span class="hljs-comment">//(2)每一轮中，各列进行异或运算</span><br><span class="hljs-comment">// 列号是4的倍数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++)<span class="hljs-comment">//行号</span><br>&#123;<br>ExtendKeyArray[k][<span class="hljs-number">4</span> * i] = ExtendKeyArray[k][<span class="hljs-number">4</span> * i] ^ ExtendKeyArray[k][<span class="hljs-number">4</span> * (i - <span class="hljs-number">1</span>)];<br>&#125;<br><br><span class="hljs-comment">// 其他三列</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">4</span>; j++)<span class="hljs-comment">//每一轮的列号</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++)<span class="hljs-comment">//行号</span><br>&#123;<br>ExtendKeyArray[k][<span class="hljs-number">4</span> * i + j] = ExtendKeyArray[k][<span class="hljs-number">4</span> * i + j - <span class="hljs-number">1</span>] ^ ExtendKeyArray[k][<span class="hljs-number">4</span> * (i - <span class="hljs-number">1</span>) + j];<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> ret;<br>&#125;<br>Copy<br></code></pre></td></tr></table></figure><h4 id="密钥加法层"><a href="#密钥加法层" class="headerlink" title="密钥加法层"></a>密钥加法层</h4><p><strong>在密钥加法层中有两个输入的参数，分别是明文和子密钥k[0]，而且这两个输入都是128位的。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">AddRoundKey</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>(*PlainArray)[<span class="hljs-number">4</span>], <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>(*ExtendKeyArray)[<span class="hljs-number">44</span>], <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> MinCol)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)<br>&#123;<br>PlainArray[i][j] ^= ExtendKeyArray[i][MinCol + j];<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> ret;<br>&#125;<br>Copy<br></code></pre></td></tr></table></figure><h4 id="字节代换层（S盒）"><a href="#字节代换层（S盒）" class="headerlink" title="字节代换层（S盒）"></a>字节代换层（S盒）</h4><p>就是把字节一个个放入s盒之中</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">const unsigned char S_Table[<span class="hljs-number">16</span>][<span class="hljs-number">16</span>] =<br>&#123;<br><span class="hljs-number">0x63</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x76</span>,<br><span class="hljs-number">0xCA</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xC0</span>,<br><span class="hljs-number">0xB7</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>,<br><span class="hljs-number">0x04</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x75</span>,<br><span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x84</span>,<br><span class="hljs-number">0x53</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xCF</span>,<br><span class="hljs-number">0xD0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xA8</span>,<br><span class="hljs-number">0x51</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD2</span>,<br><span class="hljs-number">0xCD</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>,<br><span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xDB</span>,<br><span class="hljs-number">0xE0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x79</span>,<br><span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x08</span>,<br><span class="hljs-number">0xBA</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x8A</span>,<br><span class="hljs-number">0x70</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x9E</span>,<br><span class="hljs-number">0xE1</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xDF</span>,<br><span class="hljs-number">0x8C</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x16</span><br>&#125;<span class="hljs-comment">;</span><br><br>//字节代换<br><span class="hljs-keyword">int</span> Plain_S_Substitution(unsigned char *PlainArray)<br>&#123;<br><span class="hljs-keyword">int</span> <span class="hljs-keyword">ret</span> = <span class="hljs-number">0</span><span class="hljs-comment">;</span><br><br>for (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; 16; i++)</span><br>&#123;<br>PlainArray[i] = S_Table[PlainArray[i] &gt;&gt; <span class="hljs-number">4</span>][PlainArray[i] &amp; <span class="hljs-number">0x0F</span>]<span class="hljs-comment">;</span><br>&#125;<br><br>return <span class="hljs-keyword">ret</span><span class="hljs-comment">;</span><br>&#125;<br>Copy<br></code></pre></td></tr></table></figure><h4 id="行移位"><a href="#行移位" class="headerlink" title="行移位"></a>行移位</h4><p><a href="https://pic2.zhimg.com/v2-581b444c6583aff31afe66b0391d73c1_r.jpg"><img src="/2022/07/04/AES%E5%AE%9E%E7%8E%B0/v2-581b444c6583aff31afe66b0391d73c1_r.jpg" alt="preview"></a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ShiftRows</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *PlainArray)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//第一行 不移位</span><br><span class="hljs-comment">//PlainArray[0] = PlainArray[0];</span><br><br><span class="hljs-comment">//第二行 左移8Bit</span><br>PlainArray[<span class="hljs-number">1</span>] = (PlainArray[<span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">8</span>) | (PlainArray[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">24</span>);<br><br><span class="hljs-comment">//第三行 左移16Bit</span><br>PlainArray[<span class="hljs-number">2</span>] = (PlainArray[<span class="hljs-number">2</span>] &gt;&gt; <span class="hljs-number">16</span>) | (PlainArray[<span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">16</span>);<br><br><span class="hljs-comment">//第四行 左移24Bit</span><br>PlainArray[<span class="hljs-number">3</span>] = (PlainArray[<span class="hljs-number">3</span>] &gt;&gt; <span class="hljs-number">24</span>) | (PlainArray[<span class="hljs-number">3</span>] &lt;&lt; <span class="hljs-number">8</span>);<br><br><span class="hljs-keyword">return</span> ret;<br>&#125;<br>Copy<br></code></pre></td></tr></table></figure><h4 id="列混淆"><a href="#列混淆" class="headerlink" title="列混淆"></a>列混淆</h4><p><a href="https://pic2.zhimg.com/80/v2-8d1c58108b9d719a8674d7703ead7991_720w.jpg"><img src="/2022/07/04/AES%E5%AE%9E%E7%8E%B0/v2-8d1c58108b9d719a8674d7703ead7991_720w.jpg" alt="img"></a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">const unsigned <span class="hljs-built_in">char</span> MixArray<span class="hljs-literal">[<span class="hljs-number">4</span>]</span><span class="hljs-literal">[<span class="hljs-number">4</span>]</span> =<br>&#123;<br><span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>,<br><span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>,<br><span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>,<br><span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span><br>&#125;;<br><br><span class="hljs-built_in">int</span> <span class="hljs-constructor">MixColum(<span class="hljs-params">unsigned</span> <span class="hljs-params">char</span>(<span class="hljs-operator">*</span>PlainArray)</span><span class="hljs-literal">[<span class="hljs-number">4</span>]</span>)<br>&#123;<br><span class="hljs-built_in">int</span> ret = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//定义变量</span><br>unsigned <span class="hljs-built_in">char</span> ArrayTemp<span class="hljs-literal">[<span class="hljs-number">4</span>]</span><span class="hljs-literal">[<span class="hljs-number">4</span>]</span>;<br><br><span class="hljs-comment">//初始化变量</span><br>memcpy(ArrayTemp, PlainArray, <span class="hljs-number">16</span>);<br><br><span class="hljs-comment">//矩阵乘法 4*4</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)<br>&#123;<br>PlainArray<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span> =<br><span class="hljs-constructor">GaloisMultiplication(MixArray[<span class="hljs-params">i</span>][0], ArrayTemp[0][<span class="hljs-params">j</span>])</span> ^<br><span class="hljs-constructor">GaloisMultiplication(MixArray[<span class="hljs-params">i</span>][1], ArrayTemp[1][<span class="hljs-params">j</span>])</span> ^<br><span class="hljs-constructor">GaloisMultiplication(MixArray[<span class="hljs-params">i</span>][2], ArrayTemp[2][<span class="hljs-params">j</span>])</span> ^<br><span class="hljs-constructor">GaloisMultiplication(MixArray[<span class="hljs-params">i</span>][3], ArrayTemp[3][<span class="hljs-params">j</span>])</span>;<br>&#125;<br>&#125;<br>return ret;<br>&#125;<br>Copy<br></code></pre></td></tr></table></figure><p><strong>接下来我们就只用处理伽罗瓦域乘法相关处理了，由于前面介绍过相关概念，所以代码就不在此进行讲解了，大家可以参考下方的代码注释进行理解：</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs perl">//<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">/</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/功能: 伽罗瓦域内的乘法运算 GF(128)</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/参数: Num_L 输入的左参数</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/ Num_R 输入的右参数</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/返回值:计算结果</span><br><span class="hljs-regexp">char GaloisMultiplication(unsigned char Num_L, unsigned char Num_R)</span><br><span class="hljs-regexp">&#123;</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/定义变量</span><br><span class="hljs-regexp">unsigned char Result = 0; /</span><span class="hljs-regexp">/伽罗瓦域内乘法计算的结果</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">while (Num_L)</span><br><span class="hljs-regexp">&#123;</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/如果Num_L最低位是1就异或Num_R，相当于加上Num_R * 1</span><br><span class="hljs-regexp">if (Num_L &amp; 0x01)</span><br><span class="hljs-regexp">&#123;</span><br><span class="hljs-regexp">Result ^= Num_R;</span><br><span class="hljs-regexp">&#125;</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/Num_L右移一位，相当于除以2</span><br><span class="hljs-regexp">Num_L = Num_L &gt;&gt; 1;</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/如果Num_R最高位为1</span><br><span class="hljs-regexp">if (Num_R &amp; 0x80)</span><br><span class="hljs-regexp">&#123;</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/左移一位相当于乘二</span><br><span class="hljs-regexp">Num_R = Num_R &lt;&lt; 1; /</span><span class="hljs-regexp">/注：这里会丢失最高位，但是不用担心</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">Num_R ^= 0x1B; /</span><span class="hljs-regexp">/计算伽罗瓦域内除法Num_R = Num_R /</span> (<span class="hljs-keyword">x</span>^<span class="hljs-number">8</span>(刚好丢失最高位) + <span class="hljs-keyword">x</span>^<span class="hljs-number">4</span> + <span class="hljs-keyword">x</span>^<span class="hljs-number">3</span> + <span class="hljs-keyword">x</span>^<span class="hljs-number">1</span> + <span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-regexp">//</span>左移一位相当于乘二<br>Num_R = Num_R &lt;&lt; <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> Result;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AES</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些基本Markdown语法</title>
    <link href="/2022/07/04/Markdown%20%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/07/04/Markdown%20%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="块级元素："><a href="#块级元素：" class="headerlink" title="块级元素："></a>块级元素：</h2><h3 id="标题："><a href="#标题：" class="headerlink" title="标题："></a>标题：</h3><p>总共有六级标题，通过#的个数来区分，输入#之后一定要按空格键</p><p>比如一个四级标题如下:</p><h4 id="测试（-）"><a href="#测试（-）" class="headerlink" title="测试（####）"></a>测试（####）</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级标题<br><br>## 二级标题<br><br>### 三级标题<br><br>#### 四级标题<br><br>##### 五级标题<br><br>###### 六级标题<br>Copy<br></code></pre></td></tr></table></figure><h3 id="引用："><a href="#引用：" class="headerlink" title="引用："></a>引用：</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">引用是用&gt;表示<br><span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><blockquote><p>这是一段引用</p></blockquote><h3 id="列表："><a href="#列表：" class="headerlink" title="列表："></a>列表：</h3><h4 id="有序列表："><a href="#有序列表：" class="headerlink" title="有序列表："></a>有序列表：</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">篮网总冠军<br><br><span class="hljs-number">1</span>.击败骑士<br><br><span class="hljs-number">2</span>.干掉凯尔特人<br><br><span class="hljs-number">3</span>.跨过雄鹿<br><br><span class="hljs-number">4</span>.射落太阳<br><span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><h4 id="无序列表："><a href="#无序列表：" class="headerlink" title="无序列表："></a>无序列表：</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">用-加空格<br><span class="hljs-bullet">- </span><br><span class="hljs-bullet"></span>Copy<br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><p>用 - 加 [ 加空格加 ]</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">-<span class="hljs-selector-attr">[ ]</span><br>Copy<br></code></pre></td></tr></table></figure><ul><li>hahaha</li></ul><h3 id="代码块："><a href="#代码块：" class="headerlink" title="代码块："></a>代码块：</h3><p>1.自己右键</p><p>2.<code> </code>两个反引号中间算一行</p><p>3.三个反引号代码块</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br><span class="hljs-function">Copy</span><br></code></pre></td></tr></table></figure><h3 id="数学公式："><a href="#数学公式：" class="headerlink" title="数学公式："></a>数学公式：</h3><p>使用LaTeX</p><p>$$ \frac{\partial f}{\partial x}&#x3D;2\sqrt{a}x$$</p><p>就是两个美元符号加上两个美元符号</p><h3 id="表格："><a href="#表格：" class="headerlink" title="表格："></a>表格：</h3><table><thead><tr><th>姓名</th><th align="left">年龄</th><th>成绩</th></tr></thead><tbody><tr><td>是啥</td><td align="left"></td><td></td></tr></tbody></table><p>该表格用三个|分隔就行</p><h3 id="脚注："><a href="#脚注：" class="headerlink" title="脚注："></a>脚注：</h3><p>在MarkDown中支持添加脚注方式来对文本进行补充说明。</p><p>在需要添加注脚的文字后加上脚注名： [^注脚名] 。 然后在文本的任意位置(一般在最后)添加脚注：</p><p><em>脚注自动生成在页面最最后面，在页面末尾可以看到，并且脚注后方的链接可以直接跳转回到加脚注的地方。</em></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">脚注示例，这是第一个脚注[^注脚名1]，这是第二个脚注[^注脚名2]，这是第三个脚注[^注脚名3]<br><br>[<span class="hljs-symbol">^注脚名1</span>]: <span class="hljs-link">我是脚注一.</span><br>[<span class="hljs-symbol">^注脚名2</span>]: <span class="hljs-link">我是脚注二.</span><br>[<span class="hljs-symbol">^注脚名3</span>]: <span class="hljs-link">我是脚注三.</span><br>Copy<br></code></pre></td></tr></table></figure><h3 id="横线"><a href="#横线" class="headerlink" title="横线"></a>横线</h3><p>三个减号-</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-string">Copy</span><br></code></pre></td></tr></table></figure><h2 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://shang-swk.github.io/%22%E6%9C%AC%E4%BA%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%22">swk的博客</a></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[swk的博客]</span>(<span class="hljs-attribute">https</span>:<span class="hljs-comment">//shang-swk.github.io/)</span><br>Copy<br></code></pre></td></tr></table></figure><ul><li><h4 id="简单链接"><a href="#简单链接" class="headerlink" title="简单链接"></a>简单链接</h4><ul><li><code>[链接名称](链接网址)</code></li><li><code>[链接名称](链接网址 &quot;文字说明&quot;)</code></li><li><code>&lt;链接网址&gt;</code></li></ul></li></ul><p><em>文字说明可以通过鼠标悬浮链接上查看</em></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">百度[百度](https:<span class="hljs-regexp">//</span>www.baidu.com/)<br>百度[百度](https:<span class="hljs-regexp">//</span>www.baidu.com/ <span class="hljs-string">&quot;百度搜索&quot;</span>)<br>百度&lt;https:<span class="hljs-regexp">//</span>www.baidu.com/&gt;<br>Copy<br></code></pre></td></tr></table></figure><p><em><strong>示例效果:</strong></em></p><hr><p>百度<a href="https://www.baidu.com/">百度</a><br>百度<a href="https://www.baidu.com/">百度</a><br>百度<a href="https://www.baidu.com/">https://www.baidu.com/</a></p><h4 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h4><p>可以使用变量来调用链接</p><p><em>使用变量要记得在文档的结尾为变量赋值</em></p><p><em><strong>代码示例:</strong></em></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[百度]</span><span class="hljs-selector-attr">[1]</span><br><span class="hljs-selector-attr">[谷歌]</span><span class="hljs-selector-attr">[2]</span><br><br>然后在文档的结尾为变量赋值（网址）<br><br><span class="hljs-selector-attr">[1]</span>: <span class="hljs-selector-tag">https</span>:<span class="hljs-comment">//www.baidu.com/</span><br><span class="hljs-selector-attr">[2]</span>: <span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//www.google.com/</span><br><span class="hljs-selector-tag">Copy</span><br></code></pre></td></tr></table></figure><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>跟链接的方法区别在于前面加了个感叹号 <code>!</code></p><p><em><strong>代码示例:</strong></em></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">![百度logo]](https:<span class="hljs-regexp">//</span>www.baidu.com<span class="hljs-regexp">/img/</span>PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png)<br><br>![百度](https:<span class="hljs-regexp">//</span>www.baidu.com<span class="hljs-regexp">/img/</span>PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png <span class="hljs-string">&quot;百度logo&quot;</span>)<br><br>[百度][<span class="hljs-number">1</span>]<br><br>[<span class="hljs-number">1</span>]: https:<span class="hljs-regexp">//</span>www.baidu.com/<br>Copy<br></code></pre></td></tr></table></figure><h3 id="其他行内格式"><a href="#其他行内格式" class="headerlink" title="其他行内格式"></a>其他行内格式</h3><p>一对<code>*</code>表示斜体：</p><p><em>haha</em></p><hr><p>两对<code>*</code>表示加粗</p><p><strong>hahha</strong></p><hr><p>一对&#96;&#96; &#96;是行内代码</p><hr><p>下划线：</p><p><code>&lt;u&gt;下划线&lt;/u&gt;</code>下划线</p><hr><p>:kiss:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">冒号加表情英文得到表情<br></code></pre></td></tr></table></figure><hr><p>行内公式</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> sssss <span class="hljs-symbol">$</span><br></code></pre></td></tr></table></figure><hr><p>下标：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">用<span class="hljs-operator">~</span>加<span class="hljs-operator">~</span>来表示 <span class="hljs-variable">H</span><span class="hljs-operator">~</span><span class="hljs-number">2</span><span class="hljs-operator">~</span><span class="hljs-built_in">O</span><br></code></pre></td></tr></table></figure><p>H<del>2</del>O</p><hr><p>上标：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">用^加^表示<br></code></pre></td></tr></table></figure><p>X^2^</p><hr><p>高亮：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-operator">=</span><span class="hljs-operator">=</span>语句<span class="hljs-operator">=</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;啊哈哈哈&#x3D;&#x3D;</p><hr><p> <a href="https://shang-swk.github.io/categories/Markdown/">Markdown</a></p><p> <a href="https://shang-swk.github.io/tags/Markdown%E8%AF%AD%E6%B3%95/">Markdown语法</a></p>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
