<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HTTP通讯协议</title>
    <link href="/2022/08/08/HTTP%E5%8D%8F%E8%AE%AE/"/>
    <url>/2022/08/08/HTTP%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>超文本传输协议(HTTP)是一种通信协议，它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器。</p><p>HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。</p><p><img src="C:\Users\ASUS\blog\source_posts\img\image-20220801165030778.png" alt="image-20220801165030778"></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>HTTP协议永远都是客户端发起请求，服务器回送响应。</p><p>1、安全认证</p><p>2、快速、灵活</p><p>3、HTTP 1.0使用非持续连接：限制每次连接只处理一个请求，服务器处理完客户的请求，并收到客户的应答后，即断开连接。HTTP 1.1使用持续连接：不必为每个web对象创建一个新的连接，一个连接可以传送多个对象，采用这种方式可以节省传输时间。</p><p>4、无状态</p><p>并不是无连接</p><p>从HTTP&#x2F;1.1起，默认都开启了Keep-Alive，保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间 用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。Keep-Alive是有时间限制的</p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>1）首先客户机与服务器需要建立连接。</p><p> 2）建立连接后，客户机发送一个请求给服务器</p><p> 3）服务器接到请求后，给予相应的响应信息 </p><p>4）客户端接收服务器所返回的信息通过浏览器显示在用户的显示屏上，然后客户机与服务器断开连接。 </p><p>&#x3D;&#x3D;增加安全性的话可以加个代理服务器&#x3D;&#x3D;</p><p>以HTTP在开始传输之前，首先需要建立TCP连接，而TCP连接的过程需要所谓的“三次握手”。</p><p><img src="C:\Users\ASUS\blog\source_posts\img\image-20220801170517116.png" alt="image-20220801170517116"></p><h3 id="HTTP之URL"><a href="#HTTP之URL" class="headerlink" title="HTTP之URL"></a>HTTP之URL</h3><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息</p><p>URL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：</p><h4 id="http-www-aspxfans-com-8080-news-index-asp-boardID-5-amp-ID-24618-amp-page-1-name"><a href="#http-www-aspxfans-com-8080-news-index-asp-boardID-5-amp-ID-24618-amp-page-1-name" class="headerlink" title="http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name"></a><a href="http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</a></h4><p>从上面的URL可以看出，一个完整的URL包括以下几部分：</p><p>1.协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在”HTTP”后面的“&#x2F;&#x2F;”为分隔符</p><p>2.域名部分：该URL的域名部分为“<a href="http://www.aspxfans.com”.一个url中,也可以使用ip地址作为域名使用/">www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用</a></p><p>3.端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口</p><p>4.虚拟目录部分：从域名后的第一个“&#x2F;”开始到最后一个“&#x2F;”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“&#x2F;news&#x2F;”</p><p>5.文件名部分：从域名后的最后一个“&#x2F;”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“&#x2F;”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“&#x2F;”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名</p><p>6.锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分</p><p>7.参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID&#x3D;5&amp;ID&#x3D;24618&amp;page&#x3D;1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</p><h3 id="HTTP之状态码"><a href="#HTTP之状态码" class="headerlink" title="HTTP之状态码"></a>HTTP之状态码</h3><p>状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:</p><h6 id="1xx：指示信息–表示请求已接收，继续处理"><a href="#1xx：指示信息–表示请求已接收，继续处理" class="headerlink" title="1xx：指示信息–表示请求已接收，继续处理"></a>1xx：指示信息–表示请求已接收，继续处理</h6><h6 id="2xx：成功–表示请求已被成功接收、理解、接受"><a href="#2xx：成功–表示请求已被成功接收、理解、接受" class="headerlink" title="2xx：成功–表示请求已被成功接收、理解、接受"></a>2xx：成功–表示请求已被成功接收、理解、接受</h6><h6 id="3xx：重定向–要完成请求必须进行更进一步的操作"><a href="#3xx：重定向–要完成请求必须进行更进一步的操作" class="headerlink" title="3xx：重定向–要完成请求必须进行更进一步的操作"></a>3xx：重定向–要完成请求必须进行更进一步的操作</h6><h6 id="4xx：客户端错误–请求有语法错误或请求无法实现"><a href="#4xx：客户端错误–请求有语法错误或请求无法实现" class="headerlink" title="4xx：客户端错误–请求有语法错误或请求无法实现"></a>4xx：客户端错误–请求有语法错误或请求无法实现</h6><h6 id="5xx：服务器端错误–服务器未能实现合法的请求"><a href="#5xx：服务器端错误–服务器未能实现合法的请求" class="headerlink" title="5xx：服务器端错误–服务器未能实现合法的请求"></a>5xx：服务器端错误–服务器未能实现合法的请求</h6><p>常见状态码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">200</span> OK                        <span class="hljs-comment">//客户端请求成功</span><br><span class="hljs-number">400</span> Bad Request               <span class="hljs-comment">//客户端请求有语法错误，不能被服务器所理解</span><br><span class="hljs-number">401</span> Unauthorized              <span class="hljs-comment">//请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 </span><br><span class="hljs-number">403</span> Forbidden                 <span class="hljs-comment">//服务器收到请求，但是拒绝提供服务</span><br><span class="hljs-number">404</span> Not Found                 <span class="hljs-comment">//请求资源不存在，eg：输入了错误的URL</span><br><span class="hljs-number">500</span> Internal Server Error     <span class="hljs-comment">//服务器发生不可预期的错误</span><br><span class="hljs-number">503</span> Server Unavailable        <span class="hljs-comment">//服务器当前不能处理客户端的请求，一段时间后可能恢复正常</span><br></code></pre></td></tr></table></figure><h3 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h3><p>根据HTTP标准，HTTP请求可以使用多种请求方法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">GET      <span class="hljs-comment">// 请求指定的页面信息，并返回实体主体。</span><br>HEAD     <span class="hljs-comment">//类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</span><br>POST     <span class="hljs-comment">//向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</span><br>PUT      <span class="hljs-comment">// 从客户端向服务器传送的数据取代指定的文档的内容。</span><br>DELETE   <span class="hljs-comment">//请求服务器删除指定的页面。</span><br>CONNECT  <span class="hljs-comment">//HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</span><br>OPTIONS  <span class="hljs-comment">//允许客户端查看服务器的性能。</span><br>TRACE    <span class="hljs-comment">//回显服务器收到的请求，主要用于测试或诊断。</span><br></code></pre></td></tr></table></figure><p>抓包示例：</p><img src="C:\Users\ASUS\blog\source\_posts\img\image-20220801170804269.png" alt="image-20220801170804269" style="zoom:150%;" />]]></content>
    
    
    <categories>
      
      <category>HTTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RS232通讯协议</title>
    <link href="/2022/08/08/RS232%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/"/>
    <url>/2022/08/08/RS232%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="RS232通讯协议"><a href="#RS232通讯协议" class="headerlink" title="RS232通讯协议"></a>RS232通讯协议</h2><p>一、硬件Hardware：</p><p>波特率: 2400 bps </p><p>数据位: 8 bits </p><p>停止位 : 1 bits </p><p>奇偶校验: NON</p><p>二、DB9使用标准直通线，长度不宜超过15米</p><p><img src="C:\Users\ASUS\blog\source_posts\img\D89" alt="image-20220712112329773"></p><p>三、命令</p><table><thead><tr><th>Q1</th><th>1-80K使用</th><th align="center">状态查询</th></tr></thead><tbody><tr><td>Q2</td><td>三相20-80K使用</td><td align="center">状态查询</td></tr><tr><td>Q6</td><td>1-80K使用</td><td align="center">状态查询</td></tr><tr><td>WA</td><td>6-80K使用</td><td align="center">功率查询</td></tr><tr><td>S<n></td><td>1-80K使用</td><td align="center">关机</td></tr></tbody></table><p>&#x3D;&#x3D;备注：<cr>表示回车．&#x3D;&#x3D;</p><h3 id="（1）-查询命令-Q1"><a href="#（1）-查询命令-Q1" class="headerlink" title="（1） 查询命令 Q1"></a><strong>（1）</strong> <strong>查询命令</strong> <strong>Q1</strong></h3><p>为了查询系统基本的状态信息，&#x3D;&#x3D;主机发送：&#x3D;&#x3D;</p><h4 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1<cr></h4><p><strong>UPS 回应</strong></p><p>(MMM.M NNN.N PPP.P QQQ RR.R S.SS TT.T b7b6b5b4b3b2b1b0<CR></p><h4 id="输入电压-MMM-M"><a href="#输入电压-MMM-M" class="headerlink" title="输入电压: MMM.M"></a>输入电压: MMM.M</h4><p>M 是一个整数，范围为 0 – 9。单位是 V。</p><h4 id="上次转电池放电时电压-NNN-N"><a href="#上次转电池放电时电压-NNN-N" class="headerlink" title="上次转电池放电时电压: NNN.N"></a><strong>上次转电池放电时电压</strong>: NNN.N</h4><p>N 是一个整数，范围为 0 – 9，有部分机种默认为 0。 单位是 V。</p><h4 id="输出电压-PPP-P"><a href="#输出电压-PPP-P" class="headerlink" title="输出电压: PPP.P"></a><strong>输出电压: PPP.P</strong></h4><p>P 是十进制的整数，范围为 0 - 9。 单位是 V。三相输入时为 R 相电压。</p><h4 id="输出负载百分比-QQQ"><a href="#输出负载百分比-QQQ" class="headerlink" title="输出负载百分比: QQQ"></a><strong>输出负载百分比: QQQ</strong></h4><p>QQQ 是 W% 或 VA%的最大值。 VA% 是 VA 的最大值的百分比。 W% 是有用功率的最大值的百分比。</p><h4 id="输入频率-RR-R"><a href="#输入频率-RR-R" class="headerlink" title="输入频率: RR.R"></a>输入频率: RR.R</h4><p>R 是一个整数，范围为 0 – 9。 单位是 Hz。</p><h4 id="电池单元电压-S-SS"><a href="#电池单元电压-S-SS" class="headerlink" title="电池单元电压: S.SS"></a><strong>电池单元电压</strong>: S.SS</h4><p>S 是一个整数，范围为 0 – 9。 单位是 V。每节电池有 6 个电池单元，读到的电压要乘以 6，得到单节电池电压。市电模式时，读到的是充电电压，电池模式时读到电池电压。</p><h4 id="温度-TT-T"><a href="#温度-TT-T" class="headerlink" title="温度: TT.T"></a><strong>温度</strong>: TT.T</h4><p>T 是一个整数，范围为 0 – 9。单位是 摄氏度。</p><h4 id="UPS-状态-b7b6b5b4b3b2b1b0"><a href="#UPS-状态-b7b6b5b4b3b2b1b0" class="headerlink" title="UPS 状态: b7b6b5b4b3b2b1b0"></a>UPS 状态: b7b6b5b4b3b2b1b0</h4><p><bn> 是二进制数 ‘0’ 或 ‘1’。UPS 状态：</p><table><thead><tr><th>Bit</th><th>描述</th></tr></thead><tbody><tr><td>7</td><td>1 :  市电异常</td></tr><tr><td>6</td><td>1 :  电池电压低</td></tr><tr><td>5</td><td>1 :  旁路输出</td></tr><tr><td>4</td><td>1 :  UPS 故障</td></tr><tr><td>3</td><td>1 :  UPS 后备式  (0 ：在线式)</td></tr><tr><td>2</td><td>1 :  测试进行中</td></tr><tr><td>1</td><td>1 :  内部保留</td></tr><tr><td>0</td><td>保留是 0</td></tr></tbody></table><p>二进制代码被修改为 8 个字节的二进制代码为避免与 ASCII 控制代码混淆. </p><p>&#x3D;&#x3D;备注：<cr>是回车，如果用 16 进制发送 Q1<cr>为 51 31 OD&#x3D;&#x3D;</p><p>举例:</p><p>电脑: Q1<cr></p><p>UPS:  (208.4 000.0 208.4 034 59.9 2.05 35.0 00110000<cr></p><p>表示:</p><p>输入电压 208.4 V.</p><p>上次转电池放电时输入电压 000.0 V.</p><p>输出电压 208.4 V</p><p>负载 34%.</p><p>输入频率 59.9 Hz</p><p>每个电池单元电池电压 2.05 V。每节电池 12.3V</p><p>温度 35.0</p><p>UPS 是在线式的, UPS 故障, 旁路运行.</p><h3 id="（2）-查询命令-Q2"><a href="#（2）-查询命令-Q2" class="headerlink" title="（2） 查询命令 Q2"></a>（2） 查询命令 Q2</h3><p>&#x3D;&#x3D;备注：<cr>是回车，如果用 16 进制发送 Q2<cr>为 51 32 OD&#x3D;&#x3D;</p><p>Computer: <strong>Q2 <cr></strong></p><p>UPS: (MMM.M MMM.M MMM.M NNN.N PPP.P PPP.P PPP.P QQQ QQQ QQQ RR.R SSS.S TT.T</p><p>b7b6b5b4b3b2b1b0 ttt.tt CCC BB ff ff ff ff wwwwwwww YO<cr></p><h4 id="UPS-输入电压-MMM-M"><a href="#UPS-输入电压-MMM-M" class="headerlink" title="UPS 输入电压: MMM.M"></a>UPS 输入电压: MMM.M</h4><p>M 是十进制的整数，范围为 0 - 9。 单位是 V。</p><p>在单相系统中，只有 R 相是有效的，S 和 T 相总是 0。在三相系统中，按顺序代表 R、S、T 相的值</p><h4 id="上次转电池放电时电压-NNN-N-1"><a href="#上次转电池放电时电压-NNN-N-1" class="headerlink" title="上次转电池放电时电压: NNN.N"></a>上次转电池放电时电压: NNN.N</h4><p>N 是一个整数，范围为 0 – 9，有部分机种默认为 0。 单位是 V.</p><h4 id="输出电压-PPP-P-1"><a href="#输出电压-PPP-P-1" class="headerlink" title="输出电压: PPP.P"></a>输出电压: PPP.P</h4><p>P 是十进制的整数，范围为 0 - 9。 单位是 V。</p><p>在单相系统中，只有 R 相是有效的，S 和 T 相总是 0。在三相系统中，按顺序代表 R、S、T 相的值。</p><h4 id="输出电流-QQQ"><a href="#输出电流-QQQ" class="headerlink" title="输出电流: QQQ"></a>输出电流: QQQ</h4><p>QQQ 是电流最大值的百分比，不是一个绝对值。</p><p>在单相系统中，只有 R 相是有效的，S 和 T 相总是 0。在三相系统中，按顺序代表 R、S、T 相的值。</p><h4 id="输出-频率-RR-R"><a href="#输出-频率-RR-R" class="headerlink" title="输出 频率: RR.R"></a>输出 频率: RR.R</h4><p>R 是十进制的整数，范围为 0 - 9。 单位是 Hz。</p><h4 id="电池电压-SSS-S"><a href="#电池电压-SSS-S" class="headerlink" title="电池电压: SSS.S"></a>电池电压: SSS.S</h4><p>S 是一个整数，范围为 0 – 9。 单位是 V。</p><h4 id="温度-TT-T-1"><a href="#温度-TT-T-1" class="headerlink" title="温度: TT.T"></a>温度: TT.T</h4><p>T 是一个整数，范围为 0 – 9。单位是 摄氏度。</p><h4 id="UPS-状态-b7b6b5b4b3b2b1b0-1"><a href="#UPS-状态-b7b6b5b4b3b2b1b0-1" class="headerlink" title="UPS 状态: b7b6b5b4b3b2b1b0"></a>UPS 状态: b7b6b5b4b3b2b1b0</h4><p><bn> 是二进制数 ‘0’ 或 ‘1’。UPS 状态：</p><table><thead><tr><th>Bit</th><th>描述</th></tr></thead><tbody><tr><td>7</td><td>1 :  市电异常</td></tr><tr><td>6</td><td>1 :  电池电压低</td></tr><tr><td>5</td><td>1 :  旁路输出</td></tr><tr><td>4</td><td>1 :  UPS 故障</td></tr><tr><td>3</td><td>1 :  UPS 后备式  (0 ：在线式)</td></tr><tr><td>2</td><td>1 :  测试进行中</td></tr><tr><td>1</td><td>1 :  内部保留</td></tr><tr><td>0</td><td>保留是 0</td></tr></tbody></table><h4 id="电池剩余备用时间估计-ttttt"><a href="#电池剩余备用时间估计-ttttt" class="headerlink" title="电池剩余备用时间估计: ttttt"></a>电池剩余备用时间估计: ttttt</h4><p>估计的电池剩余备用时间。单位是秒。因电池备用时间与电池质量，放电频率，负载大小等条件都有关系，此数据仅供参考．</p><h4 id="电池容量百分比-CCC"><a href="#电池容量百分比-CCC" class="headerlink" title="电池容量百分比: CCC"></a>电池容量百分比: CCC</h4><p>CCC 为 000  - 100。值超过 100 % 时显示为最大值。</p><h4 id="电池测试状态-BB"><a href="#电池测试状态-BB" class="headerlink" title="电池测试状态: BB"></a>电池测试状态: BB</h4><p>00      idle</p><p>01   processing</p><p>02   result : no failure</p><p>03   result : failure &#x2F; warning 04 Not possible 或 inhibite 05 Test cancel</p><p>06   Reserved</p><p>07   Other values</p><h4 id="故障代码-ffffffff"><a href="#故障代码-ffffffff" class="headerlink" title="故障代码: ffffffff"></a>故障代码: ffffffff</h4><p>可包含同时发生的 4 种故障代码。此项仅供维修人员使用． <strong>警告: wwwwwwww</strong></p><p>可包含同时发生的4种故障代码，此项仅供维修人员使用．</p><h4 id="输入变压器类型-Y"><a href="#输入变压器类型-Y" class="headerlink" title="输入变压器类型: Y"></a><strong>输入变压器类型</strong>: Y</h4><p>Y 是二进制数字0 或 1</p><p>Y&#x3D;1,输入变压器是Y 型, LCD 显示相电压</p><p>Y&#x3D;0,输入变压器是∆, LCD 显示线电压</p><h4 id="Lcd-显示输出相电压或线电压-O"><a href="#Lcd-显示输出相电压或线电压-O" class="headerlink" title="Lcd 显示输出相电压或线电压: O"></a>Lcd 显示输出相电压或线电压: O</h4><p>O 是二进制数字0或1。</p><p>O&#x3D;1, LCD 显示输出电压是相电压</p><p>O&#x3D;0, LCD 显示输出电压是线电压</p><p>如果 O&#x3D;1(相电压), 但监控需要线电压，线电压 &#x3D; √3 ×相电压如果 O&#x3D;0(线电压), 但监控需要相电压，相电压 &#x3D; 线电压 &#x2F;√</p><h3 id="（3）-查询命令-Q6"><a href="#（3）-查询命令-Q6" class="headerlink" title="（3） 查询命令 Q6"></a>（3） 查询命令 Q6</h3><p>&#x3D;&#x3D;备注：<cr>是回车，如果用 16 进制发送 Q6<cr>为 51 36 OD&#x3D;&#x3D;</p><p>Q6<cr></p><p><strong>回应：</strong></p><p>(MMM.M MMM.M MMM.M NN.N PPP.P PPP.P PPP.P RR.R QQQ QQQ QQQ SSS.S</p><p>VVV.V TT.T ttttt CCC KB ffffffff wwwwwwww YO<cr></p><h4 id="UPS-输入电压-MMM-M-1"><a href="#UPS-输入电压-MMM-M-1" class="headerlink" title="UPS 输入电压: MMM.M"></a>UPS 输入电压: MMM.M</h4><p>M 是十进制的整数，范围为 0 - 9。 单位是 V。</p><p>在单相系统中，只有 R 相是有效的，S 和 T 相总是 0。在三相系统中，按顺序代表 R、S、T 相的值。</p><h4 id="UPS-输入频率-频率-NN-N"><a href="#UPS-输入频率-频率-NN-N" class="headerlink" title="UPS 输入频率 频率: NN.N"></a>UPS 输入频率 频率: NN.N</h4><p><strong>N</strong>  是十进制的整数，范围为 0 - 9。 单位是 Hz。<strong>输出电压</strong><strong>: PPP.P</strong></p><p>P 是十进制的整数，范围为 0 - 9。 单位是 V。</p><p>在单相系统中，只有 R 相是有效的，S 和 T 相总是 0。在三相系统中，按顺序代表 R、S、T 相的值。</p><h4 id="输出-频率-RR-R-1"><a href="#输出-频率-RR-R-1" class="headerlink" title="输出 频率: RR.R"></a>输出 频率: RR.R</h4><p>R 是十进制的整数，范围为 0 - 9。 单位是 Hz。<strong>输出电流</strong><strong>: QQQ</strong></p><p>QQQ 是电流最大值的百分比，不是一个绝对值。</p><p>在单相系统中，只有 R 相是有效的，S 和 T 相总是 0。在三相系统中，按顺序代表 R、S、T 相的值。</p><h4 id="Positive-电池-电压-SSS-S"><a href="#Positive-电池-电压-SSS-S" class="headerlink" title="Positive 电池 电压: SSS.S"></a>Positive 电池 电压: SSS.S</h4><p>S 是十进制的整数，范围为 0 - 9。 单位是 V。</p><h4 id="Negative-电池-电压-VVV-V"><a href="#Negative-电池-电压-VVV-V" class="headerlink" title="Negative 电池 电压: VVV.V"></a>Negative 电池 电压: VVV.V</h4><p>V 是十进制的整数，范围为 0 - 9。 单位是 V。</p><h4 id="温度-TT-T-2"><a href="#温度-TT-T-2" class="headerlink" title="温度: TT.T"></a>温度: TT.T</h4><p>T 是十进制的整数，范围为 0 - 9。 单位是摄氏度。</p><h4 id="电池剩余备用时间估计-ttttt-1"><a href="#电池剩余备用时间估计-ttttt-1" class="headerlink" title="电池剩余备用时间估计: ttttt"></a>电池剩余备用时间估计: ttttt</h4><p>估计的电池剩余备用时间。单位是秒。因电池备用时间与电池质量，放电频率，负载大小等条件都有关系，此数据仅供参考．</p><h4 id="电池容量百分比-CCC-1"><a href="#电池容量百分比-CCC-1" class="headerlink" title="电池容量百分比: CCC"></a>电池容量百分比: CCC</h4><p>CCC 为 000  - 100。值超过 100 % 时显示为最大值。</p><h4 id="系统模式-K"><a href="#系统模式-K" class="headerlink" title="系统模式: K"></a>系统模式: K</h4><p>系统模式定义如下：</p><table><thead><tr><th>K</th><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>PowerOn 模式</td><td>系统上电初始化。</td></tr><tr><td>1</td><td>Standby 模式</td><td>系统无输出，在此模式下，用户可进行系统配置及开  机。系统关机后，也会先转入此模式。</td></tr><tr><td>2</td><td>Bypass 模式</td><td>在不满足高效模式条件的情况下，以旁路输出为系统  输出。</td></tr><tr><td>3</td><td>Line 模式</td><td>UPS 模块由市电提供能量进行逆变输出，且系统以  UPS 并联输出为系统输出。</td></tr><tr><td>4</td><td>Bat 模式</td><td>UPS 模块由电池提供能量进行逆变输出，且系统以  UPS 并联输出为系统输出。</td></tr><tr><td>5</td><td>BatTest 模式</td><td>UPS 模块定时或根据用户设定由市电模式转换到电  池模式工作一段时间，检测电池是否正常，自检时间</td></tr></tbody></table><table><thead><tr><th></th><th></th><th>到后返回市电模式。</th></tr></thead><tbody><tr><td>6</td><td>Fault 模式</td><td>故障模式。</td></tr><tr><td>7</td><td>Converter 模式</td><td>逆变始终以额定的固定频率输出，给负载提供输出质  量极高的稳定电源。</td></tr><tr><td>8</td><td>HE 模式</td><td>高效模式，在旁路状况良好的情况下，可直接由旁路  为负载供电。</td></tr><tr><td>9</td><td>Shutdown 模式</td><td>关机模式</td></tr></tbody></table><h4 id="电池测试状态-B"><a href="#电池测试状态-B" class="headerlink" title="电池测试状态: B"></a>电池测试状态: B</h4><p>0     idle</p><p>1        processing</p><p>2      result : no failure</p><p>3      result : failure &#x2F; warning</p><p>4     Not possible 或 inhibite</p><p>5     Test cancel</p><p>6     Reserved</p><p>7    Other values</p><h4 id="故障代码-ffffffff-1"><a href="#故障代码-ffffffff-1" class="headerlink" title="故障代码: ffffffff"></a>故障代码: ffffffff</h4><p>可包含同时发生的 4 种故障代码。此项仅供维修人员使用． <strong>警告</strong><strong>: wwwwwwww</strong></p><p>可包含同时发生的4种故障代码，此项仅供维修人员使用．</p><h4 id="输入变压器类型-Y-1"><a href="#输入变压器类型-Y-1" class="headerlink" title="输入变压器类型: Y"></a><strong>输入变压器类型: Y</strong></h4><p>Y 是二进制数字0 或 1</p><p>Y&#x3D;1,输入变压器是Y 型, LCD 显示相电压</p><p>Y&#x3D;0,输入变压器是∆, LCD 显示线电压</p><h4 id="Lcd-显示输出相电压或线电压-O-1"><a href="#Lcd-显示输出相电压或线电压-O-1" class="headerlink" title="Lcd 显示输出相电压或线电压: O"></a>Lcd 显示输出相电压或线电压: O</h4><p>O  是二进制数字0或1。</p><p>O&#x3D;1, LCD 显示输出电压是相电压</p><p>O&#x3D;0, LCD 显示输出电压是线电压</p><p>如果 O&#x3D;1(相电压), 但监控需要线电压，线电压 &#x3D; √3 ×相电压如果 O&#x3D;0(线电压), 但监控需要相电压，相电压 &#x3D; 线电压 &#x2F;√3</p><h3 id="4-查询命令WA"><a href="#4-查询命令WA" class="headerlink" title="(4)查询命令WA"></a>(4)查询命令WA</h3><p>&#x3D;&#x3D;备注：<cr>是回车，如果用 16 进制发送 WA<cr>为 51 41 OD&#x3D;&#x3D;</p><p>WA<cr></p><p>UPS 响应</p><p>(<a href="http://www.w/">WWW.W </a><a href="http://www.w/">WWW.W </a><a href="http://www.w/">WWW.W </a>VVV.V VVV.V VVV.V TTT.T SSS.S AAA.A AAA.A AAA.A QQQ</p><p>b7b6b5b4b3b2b1b0<cr></p><h4 id="输出功率：-WWW-W"><a href="#输出功率：-WWW-W" class="headerlink" title="输出功率： WWW.W"></a>输出功率： <a href="http://www.w/">WWW.W</a></h4><p>W 是十进制的整数，范围从 0 - 9。 单位是 KW. </p><p>在单相系统中，只有 R 相是有效的，S 和 T 相总是 0。 </p><p>在三相系统中，按顺序代表 R、S、T 相的值。</p><h4 id="输出视在功率：-VVV-V"><a href="#输出视在功率：-VVV-V" class="headerlink" title="输出视在功率： VVV.V"></a><strong>输出视在功率：</strong> <strong>VVV.V</strong></h4><p>V 是十进制的整数，范围从 0 - 9。 单位是 KVA. </p><p>在单相系统中，只有 R 相是有效的，S 和 T 相总是 0。 </p><p>在三相系统中，按顺序代表 R、S、T 相的值。</p><h4 id="总功率-TTT-T"><a href="#总功率-TTT-T" class="headerlink" title="总功率: TTT.T"></a><strong>总功率: TTT.T</strong></h4><p>T 是十进制的整数，范围从 0 - 9。 单位是 KW.</p><p>3 Phase system, Include of three phase R,S,&amp;T real power.</p><h4 id="总视在功率-SSS-S"><a href="#总视在功率-SSS-S" class="headerlink" title="总视在功率: SSS.S"></a>总视在功率: SSS.S</h4><p>S 是十进制的整数，范围从 0 - 9。 单位是 KVA.</p><p>3 Phase system, Include of three phase R,S,&amp;T complex power.</p><h4 id="输出电流-AAA-A"><a href="#输出电流-AAA-A" class="headerlink" title="输出电流: AAA.A"></a>输出电流: AAA.A</h4><p>A 是十进制的整数，范围从 0 - 9。 单位是 A.</p><p>在单相系统中，只有 R 相是有效的，S 和 T 相总是 0。在三相系统中，按顺序代表 R、S、T 相的值。</p><h4 id="输出负载百分比-QQQ-1"><a href="#输出负载百分比-QQQ-1" class="headerlink" title="输出负载百分比: QQQ"></a>输出负载百分比: QQQ</h4><p>QQQ 是 W% 或 VA%的最大值。 VA% 是 VA 的最大值的百分比。 W% 是有用功率的最大值的百分比。</p><h4 id="UPS-Status-b7b6b5b4b3b2b1b0"><a href="#UPS-Status-b7b6b5b4b3b2b1b0" class="headerlink" title="UPS Status:b7b6b5b4b3b2b1b0"></a>UPS Status:b7b6b5b4b3b2b1b0</h4><p><bn> 是二进制数 ‘0’ 或 ‘1’。UPS 状态：</p><table><thead><tr><th>Bit</th><th>描述</th></tr></thead><tbody><tr><td>7</td><td>1 : 市电异常</td></tr><tr><td>6</td><td>1 :  电池电压低</td></tr><tr><td>5</td><td>1 :  旁路模式</td></tr><tr><td>4</td><td>1 :  UPS 故障</td></tr><tr><td>3</td><td>1 :  UPS 后备式  (0 ：在线式)</td></tr><tr><td>2</td><td>1 :  测试进行中</td></tr><tr><td>1</td><td>1 :  内部保留</td></tr><tr><td>0</td><td>保留是 0</td></tr></tbody></table><h3 id="（5）关机命令S-S"><a href="#（5）关机命令S-S" class="headerlink" title="（5）关机命令S S"></a>（5）关机命令S S<n><cr></h3><h4 id="关机延迟时间"><a href="#关机延迟时间" class="headerlink" title="关机延迟时间: "></a>关机延迟时间: <n></h4><p><n>可设置范围： .2, .3, …, 01, 02,…, to 10。 单位是分钟。</p><h4 id="UPS-动作-x2F-回应"><a href="#UPS-动作-x2F-回应" class="headerlink" title="UPS 动作&#x2F;回应:"></a>UPS 动作&#x2F;回应:</h4><p>延时<n>分钟后关闭 UPS 输出。电池模式下（该指令仅限于电池模式），UPS 在接受到关机指令<n>分钟后都会关闭输出。但如果<n>分钟内电池电压低于关闭点电压， 则 UPS 立即关闭输出。UPS 输出关闭后如果侦测到有市电，则延时 10 秒后重新输出。</p><p>例如： S.3<cr> — 在(0.3) 分钟后切断输出。</p><p>Send:3 char<br>51 31 0D </p><p>Recv:46 char<br>28 32 33 31 2E 36 20 31 34 30 2E 30 20 32 32 30 2E 34 20 30 33 36 20 35 30 2E 30 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 00 </p><p>Send:3 char<br>51 31 0D </p><p>Send:3 char<br>51 31 0D </p><p>Recv:47 char<br>28 32 33 30 2E 39 20 31 34 30 2E 30 20 32 32 30 2E 37 20 30 33 36 20 35 30 2E 30 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 0D </p><p>Send:3 char<br>51 32 0D </p><p>Recv:118 char<br>28 32 33 31 2E 31 20 32 33 31 2E 37 20 32 32 38 2E 35 20 31 34 30 2E 30 20 32 32 30 2E 37 20 32 32 31 2E 31 20 32 32 30 2E 36 20 30 30 33 20 30 31 34 20 30 30 30 20 35 30 2E 30 20 34 32 33 2E 32 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 20 30 30 30 2E 30 30 20 31 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 30 30 34 30 30 30 20 31 31 0D </p><p>Send:3 char<br>51 36 0D </p><p>Recv:110 char<br>28 32 33 30 2E 38 20 32 33 31 2E 35 20 32 32 39 2E 31 20 35 30 2E 30 20 32 32 30 2E 36 20 32 32 31 2E 30 20 32 32 30 2E 36 20 35 30 2E 31 20 30 30 33 20 30 31 34 20 30 30 30 20 32 31 31 2E 33 20 32 31 31 2E 39 20 32 32 2E 30 20 30 30 30 30 30 20 31 30 30 20 33 32 20 30 30 30 30 30 30 30 30 20 30 30 30 30 30 30 30 30 20 31 31 0D </p><p>Send:3 char<br>57 41 0D </p><p>Recv:80 char<br>28 30 30 30 2E 34 20 30 30 32 2E 39 20 30 30 30 2E 30 20 30 30 30 2E 37 20 30 30 33 2E 31 20 30 30 30 2E 30 20 30 33 34 2E 30 20 30 33 39 2E 39 20 30 30 33 2E 33 20 30 31 34 2E 35 20 30 30 30 2E 33 20 30 33 36 20 30 30 30 30 30 30 30 30 0D </p><p>Send:3 char<br>51 31 0D </p><p>Recv:47 char<br>28 32 33 31 2E 31 20 31 34 30 2E 30 20 32 32 30 2E 36 20 30 33 37 20 34 39 2E 39 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 0D </p><p>Send:3 char<br>51 32 0D </p><p>Recv:118 char<br>28 32 33 31 2E 33 20 32 33 32 2E 35 20 32 33 30 2E 31 20 31 34 30 2E 30 20 32 32 30 2E 36 20 32 32 31 2E 31 20 32 32 30 2E 36 20 30 30 33 20 30 31 34 20 30 30 30 20 35 30 2E 30 20 34 32 33 2E 34 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 20 30 30 30 2E 30 30 20 31 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 30 30 34 30 30 30 20 31 31 0D </p><p>Send:3 char<br>51 36 0D </p><p>Recv:110 char<br>28 32 33 30 2E 39 20 32 33 32 2E 37 20 32 33 30 2E 32 20 34 39 2E 39 20 32 32 30 2E 38 20 32 32 30 2E 39 20 32 32 30 2E 35 20 34 39 2E 39 20 30 30 33 20 30 31 34 20 30 30 30 20 32 31 31 2E 33 20 32 31 31 2E 39 20 32 32 2E 30 20 30 30 30 30 30 20 31 30 30 20 33 32 20 30 30 30 30 30 30 30 30 20 30 30 30 30 30 30 30 30 20 31 31 0D </p><p>Send:3 char<br>57 41 0D </p><p>Recv:80 char<br>28 30 30 30 2E 34 20 30 30 32 2E 38 20 30 30 30 2E 30 20 30 30 30 2E 37 20 30 30 33 2E 31 20 30 30 30 2E 30 20 30 33 33 2E 37 20 30 33 39 2E 34 20 30 30 33 2E 33 20 30 31 34 2E 32 20 30 30 30 2E 33 20 30 33 36 20 30 30 30 30 30 30 30 30 0D </p><p>本次采集结束</p><p>[2021-08-18 10:36:39:578]:<br>Send:3 char<br>51 31 0D<br>[2021-08-18 10:36:39:809]:<br>Recv:47 char<br>28 32 33 31 2E 33 20 31 34 30 2E 30 20 32 32 30 2E 38 20 30 33 37 20 34 39 2E 39 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:36:39:928]:<br>Send:3 char<br>51 32 0D<br>[2021-08-18 10:36:40:458]:<br>Recv:118 char<br>28 32 33 31 2E 34 20 32 33 32 2E 38 20 32 32 39 2E 39 20 31 34 30 2E 30 20 32 32 30 2E 37 20 32 32 31 2E 31 20 32 32 30 2E 36 20 30 30 33 20 30 31 35 20 30 30 30 20 34 39 2E 39 20 34 32 33 2E 33 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 20 30 30 30 2E 30 30 20 31 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 30 30 34 30 30 30 20 31 31 0D<br>[2021-08-18 10:36:40:569]:<br>Send:3 char<br>51 36 0D<br>[2021-08-18 10:36:41:078]:<br>Recv:110 char<br>28 32 33 31 2E 33 20 32 33 32 2E 36 20 32 32 39 2E 37 20 34 39 2E 39 20 32 32 30 2E 36 20 32 32 30 2E 39 20 32 32 30 2E 35 20 34 39 2E 39 20 30 30 33 20 30 31 35 20 30 30 30 20 32 31 31 2E 33 20 32 31 32 2E 30 20 32 32 2E 30 20 30 30 30 30 30 20 31 30 30 20 33 32 20 30 30 30 30 30 30 30 30 20 30 30 30 30 30 30 30 30 20 31 31 0D<br>[2021-08-18 10:36:41:198]:<br>Send:3 char<br>57 41 0D<br>[2021-08-18 10:36:41:556]:<br>Recv:80 char<br>28 30 30 30 2E 34 20 30 30 32 2E 39 20 30 30 30 2E 30 20 30 30 30 2E 37 20 30 30 33 2E 32 20 30 30 30 2E 30 20 30 33 34 2E 34 20 30 34 30 2E 32 20 30 30 33 2E 32 20 30 31 34 2E 37 20 30 30 30 2E 33 20 30 33 36 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:36:41:677]:<br>本次采集结束</p><p>[2021-08-18 10:36:44:568]:<br>Send:3 char<br>51 31 0D<br>[2021-08-18 10:36:44:784]:<br>Recv:47 char<br>28 32 33 30 2E 39 20 31 34 30 2E 30 20 32 32 30 2E 37 20 30 33 36 20 34 39 2E 39 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:36:44:899]:<br>Send:3 char<br>51 32 0D<br>[2021-08-18 10:36:45:431]:<br>Recv:118 char<br>28 32 33 31 2E 31 20 32 33 32 2E 34 20 32 33 30 2E 34 20 31 34 30 2E 30 20 32 32 30 2E 35 20 32 32 30 2E 37 20 32 32 30 2E 36 20 30 30 33 20 30 31 34 20 30 30 30 20 34 39 2E 39 20 34 32 33 2E 32 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 20 30 30 30 2E 30 30 20 31 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 30 30 34 30 30 30 20 31 31 0D<br>[2021-08-18 10:36:45:552]:<br>Send:3 char<br>51 36 0D<br>[2021-08-18 10:36:46:051]:<br>Recv:110 char<br>28 32 33 31 2E 33 20 32 33 32 2E 38 20 32 33 30 2E 33 20 34 39 2E 39 20 32 32 30 2E 35 20 32 32 31 2E 31 20 32 32 30 2E 34 20 35 30 2E 30 20 30 30 33 20 30 31 34 20 30 30 30 20 32 31 31 2E 33 20 32 31 31 2E 39 20 32 32 2E 30 20 30 30 30 30 30 20 31 30 30 20 33 32 20 30 30 30 30 30 30 30 30 20 30 30 30 30 30 30 30 30 20 31 31 0D<br>[2021-08-18 10:36:46:164]:<br>Send:3 char<br>57 41 0D<br>[2021-08-18 10:36:46:527]:<br>Recv:80 char<br>28 30 30 30 2E 34 20 30 30 32 2E 38 20 30 30 30 2E 30 20 30 30 30 2E 37 20 30 30 33 2E 31 20 30 30 30 2E 30 20 30 33 33 2E 38 20 30 33 39 2E 37 20 30 30 33 2E 33 20 30 31 34 2E 33 20 30 30 30 2E 33 20 30 33 36 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:36:46:643]:<br>本次采集结束</p><p>[2021-08-18 10:36:49:573]:<br>Send:3 char<br>51 31 0D<br>[2021-08-18 10:36:49:808]:<br>Recv:47 char<br>28 32 33 30 2E 35 20 31 34 30 2E 30 20 32 32 30 2E 38 20 30 33 36 20 34 39 2E 39 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:36:49:920]:<br>Send:3 char<br>51 32 0D<br>[2021-08-18 10:36:50:454]:<br>Recv:118 char<br>28 32 33 30 2E 37 20 32 33 32 2E 37 20 32 33 30 2E 34 20 31 34 30 2E 30 20 32 32 30 2E 39 20 32 32 31 2E 30 20 32 32 30 2E 35 20 30 30 33 20 30 31 34 20 30 30 30 20 34 39 2E 39 20 34 32 33 2E 33 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 20 30 30 30 2E 30 30 20 31 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 30 30 34 30 30 30 20 31 31 0D<br>[2021-08-18 10:36:50:572]:<br>Send:3 char<br>51 36 0D<br>[2021-08-18 10:36:50:770]:<br>Recv:38 char<br>28 32 33 31 2E 32 20 32 33 32 2E 32 20 32 32 39 2E 34 20 34 39 2E 39 20 32 32 30 2E 36 20 32 32 31 2E 33 20 32 00<br>[2021-08-18 10:36:50:774]:<br>Send:3 char<br>51 36 0D<br>[2021-08-18 10:36:50:777]:<br>本次采集结束</p><p>[2021-08-18 10:37:38:605]:<br>Send:3 char<br>51 31 0D<br>[2021-08-18 10:37:38:840]:<br>Recv:47 char<br>28 32 33 30 2E 39 20 31 34 30 2E 30 20 32 32 30 2E 37 20 30 33 36 20 34 39 2E 39 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:37:38:961]:<br>Send:3 char<br>51 32 0D<br>[2021-08-18 10:37:39:487]:<br>Recv:118 char<br>28 32 33 31 2E 30 20 32 33 32 2E 39 20 32 33 30 2E 34 20 31 34 30 2E 30 20 32 32 30 2E 36 20 32 32 30 2E 38 20 32 32 30 2E 36 20 30 30 33 20 30 31 34 20 30 30 30 20 35 30 2E 30 20 34 32 33 2E 33 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 20 30 30 30 2E 30 30 20 31 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 30 30 34 30 30 30 20 31 31 0D<br>[2021-08-18 10:37:39:603]:<br>Send:3 char<br>51 36 0D<br>[2021-08-18 10:37:40:107]:<br>Recv:110 char<br>28 32 33 31 2E 30 20 32 33 32 2E 36 20 32 33 30 2E 37 20 34 39 2E 39 20 32 32 30 2E 35 20 32 32 31 2E 30 20 32 32 30 2E 36 20 35 30 2E 30 20 30 30 33 20 30 31 34 20 30 30 30 20 32 31 31 2E 33 20 32 31 32 2E 30 20 32 32 2E 30 20 30 30 30 30 30 20 31 30 30 20 33 32 20 30 30 30 30 30 30 30 30 20 30 30 30 30 30 30 30 30 20 31 31 0D<br>[2021-08-18 10:37:40:219]:<br>Send:3 char<br>57 41 0D<br>[2021-08-18 10:37:40:584]:<br>Recv:80 char<br>28 30 30 30 2E 34 20 30 30 32 2E 39 20 30 30 30 2E 30 20 30 30 30 2E 37 20 30 30 33 2E 32 20 30 30 30 2E 30 20 30 33 34 2E 31 20 30 34 30 2E 35 20 30 30 33 2E 34 20 30 31 34 2E 35 20 30 30 30 2E 33 20 30 33 36 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:37:40:696]:<br>本次采集结束</p><p>[2021-08-18 10:37:43:505]:<br>Send:3 char<br>51 31 0D<br>[2021-08-18 10:37:43:763]:<br>Recv:47 char<br>28 32 33 31 2E 30 20 31 34 30 2E 30 20 32 32 30 2E 35 20 30 33 37 20 34 39 2E 39 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:37:43:872]:<br>Send:3 char<br>51 32 0D<br>[2021-08-18 10:37:44:410]:<br>Recv:118 char<br>28 32 33 31 2E 33 20 32 33 33 2E 31 20 32 33 31 2E 30 20 31 34 30 2E 30 20 32 32 30 2E 38 20 32 32 31 2E 31 20 32 32 30 2E 36 20 30 30 33 20 30 31 35 20 30 30 30 20 34 39 2E 39 20 34 32 33 2E 32 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 20 30 30 30 2E 30 30 20 31 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 30 30 34 30 30 30 20 31 31 0D<br>[2021-08-18 10:37:44:529]:<br>Send:3 char<br>51 36 0D<br>[2021-08-18 10:37:45:031]:<br>Recv:110 char<br>28 32 33 31 2E 34 20 32 33 32 2E 34 20 32 33 30 2E 38 20 34 39 2E 39 20 32 32 30 2E 35 20 32 32 31 2E 32 20 32 32 30 2E 37 20 34 39 2E 39 20 30 30 33 20 30 31 34 20 30 30 30 20 32 31 31 2E 33 20 32 31 32 2E 30 20 32 32 2E 30 20 30 30 30 30 30 20 31 30 30 20 33 32 20 30 30 30 30 30 30 30 30 20 30 30 30 30 30 30 30 30 20 31 31 0D<br>[2021-08-18 10:37:45:142]:<br>Send:3 char<br>57 41 0D<br>[2021-08-18 10:37:45:509]:<br>Recv:80 char<br>28 30 30 30 2E 34 20 30 30 32 2E 39 20 30 30 30 2E 30 20 30 30 30 2E 37 20 30 30 33 2E 32 20 30 30 30 2E 30 20 30 33 34 2E 36 20 30 34 30 2E 39 20 30 30 33 2E 33 20 30 31 34 2E 38 20 30 30 30 2E 33 20 30 33 36 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:37:45:616]:<br>本次采集结束</p><p>[2021-08-18 10:37:48:507]:<br>Send:3 char<br>51 31 0D<br>[2021-08-18 10:37:48:736]:<br>Recv:47 char<br>28 32 33 31 2E 32 20 31 34 30 2E 30 20 32 32 30 2E 36 20 30 33 37 20 34 39 2E 39 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:37:48:854]:<br>Send:3 char<br>51 32 0D<br>[2021-08-18 10:37:49:385]:<br>Recv:118 char<br>28 32 33 31 2E 32 20 32 33 32 2E 38 20 32 33 30 2E 38 20 31 34 30 2E 30 20 32 32 30 2E 36 20 32 32 30 2E 39 20 32 32 30 2E 35 20 30 30 33 20 30 31 34 20 30 30 30 20 35 30 2E 30 20 34 32 33 2E 33 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 20 30 30 30 2E 30 30 20 31 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 30 30 34 30 30 30 20 31 31 0D<br>[2021-08-18 10:37:49:497]:<br>Send:3 char<br>51 36 0D<br>[2021-08-18 10:37:50:004]:<br>Recv:110 char<br>28 32 33 31 2E 30 20 32 33 33 2E 32 20 32 33 30 2E 38 20 34 39 2E 39 20 32 32 30 2E 37 20 32 32 30 2E 38 20 32 32 30 2E 37 20 34 39 2E 39 20 30 30 33 20 30 31 34 20 30 30 30 20 32 31 31 2E 33 20 32 31 31 2E 39 20 32 32 2E 30 20 30 30 30 30 30 20 31 30 30 20 33 32 20 30 30 30 30 30 30 30 30 20 30 30 30 30 30 30 30 30 20 31 31 0D<br>[2021-08-18 10:37:50:122]:<br>Send:3 char<br>57 41 0D<br>[2021-08-18 10:37:50:481]:<br>Recv:80 char<br>28 30 30 30 2E 34 20 30 30 32 2E 39 20 30 30 30 2E 30 20 30 30 30 2E 37 20 30 30 33 2E 32 20 30 30 30 2E 30 20 30 33 34 2E 35 20 30 34 30 2E 30 20 30 30 33 2E 32 20 30 31 34 2E 35 20 30 30 30 2E 33 20 30 33 37 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:37:50:597]:<br>本次采集结束</p><p>[2021-08-18 10:37:53:509]:<br>Send:3 char<br>51 31 0D<br>[2021-08-18 10:37:53:761]:<br>Recv:47 char<br>28 32 33 31 2E 36 20 31 34 30 2E 30 20 32 32 30 2E 33 20 30 33 36 20 34 39 2E 39 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:37:53:875]:<br>Send:3 char<br>51 32 0D<br>[2021-08-18 10:37:54:409]:<br>Recv:118 char<br>28 32 33 31 2E 31 20 32 33 33 2E 30 20 32 33 30 2E 36 20 31 34 30 2E 30 20 32 32 30 2E 37 20 32 32 31 2E 30 20 32 32 30 2E 35 20 30 30 33 20 30 31 34 20 30 30 30 20 35 30 2E 30 20 34 32 33 2E 33 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 20 30 30 30 2E 30 30 20 31 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 30 30 34 30 30 30 20 31 31 0D<br>[2021-08-18 10:37:54:517]:<br>Send:3 char<br>51 36 0D<br>[2021-08-18 10:37:55:029]:<br>Recv:110 char<br>28 32 33 31 2E 30 20 32 33 32 2E 38 20 32 33 30 2E 38 20 34 39 2E 39 20 32 32 30 2E 35 20 32 32 31 2E 31 20 32 32 30 2E 35 20 34 39 2E 39 20 30 30 33 20 30 31 34 20 30 30 30 20 32 31 31 2E 33 20 32 31 32 2E 30 20 32 32 2E 30 20 30 30 30 30 30 20 31 30 30 20 33 32 20 30 30 30 30 30 30 30 30 20 30 30 30 30 30 30 30 30 20 31 31 0D<br>[2021-08-18 10:37:55:136]:<br>Send:3 char<br>57 41 0D<br>[2021-08-18 10:37:55:506]:<br>Recv:80 char<br>28 30 30 30 2E 34 20 30 30 32 2E 39 20 30 30 30 2E 30 20 30 30 30 2E 37 20 30 30 33 2E 32 20 30 30 30 2E 30 20 30 33 34 2E 34 20 30 34 30 2E 34 20 30 30 33 2E 32 20 30 31 34 2E 37 20 30 30 30 2E 33 20 30 33 36 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:37:55:628]:<br>本次采集结束</p><p>[2021-08-18 10:37:58:514]:<br>Send:3 char<br>51 31 0D<br>[2021-08-18 10:37:58:734]:<br>Recv:47 char<br>28 32 33 31 2E 31 20 31 34 30 2E 30 20 32 32 30 2E 36 20 30 33 36 20 34 39 2E 39 20 32 2E 32 30 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 0D<br>[2021-08-18 10:37:58:844]:<br>Send:3 char<br>51 32 0D<br>[2021-08-18 10:37:59:382]:<br>Recv:118 char<br>28 32 33 31 2E 31 20 32 33 32 2E 39 20 32 33 30 2E 35 20 31 34 30 2E 30 20 32 32 30 2E 36 20 32 32 31 2E 30 20 32 32 30 2E 35 20 30 30 33 20 30 31 34 20 30 30 30 20 35 30 2E 30 20 34 32 33 2E 33 20 32 32 2E 30 20 30 30 30 30 30 30 30 30 20 30 30 30 2E 30 30 20 31 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 20 30 30 30 30 34 30 30 30 20 31 31 0D<br>[2021-08-18 10:37:59:488]:<br>Send:3 char<br>51 36 0D<br>[2021-08-18 10:37:59:597]:<br>Recv:1 char<br>00<br>[2021-08-18 10:37:59:601]:<br>Send:3 char<br>51 36 0D<br>[2021-08-18 10:37:59:605]:<br>本次采集结束</p>]]></content>
    
    
    <categories>
      
      <category>RS232</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RS232</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Modbus TCP通讯协议</title>
    <link href="/2022/08/08/MODBUS%20TCP/"/>
    <url>/2022/08/08/MODBUS%20TCP/</url>
    
    <content type="html"><![CDATA[<h2 id="MODBUS-TCP协议"><a href="#MODBUS-TCP协议" class="headerlink" title="MODBUS TCP协议"></a>MODBUS TCP协议</h2><h3 id="Modbus-TCP数据帧"><a href="#Modbus-TCP数据帧" class="headerlink" title="Modbus TCP数据帧"></a>Modbus TCP数据帧</h3><p>　　ModbusTCP的数据帧可分为两部分：<strong>MBAP</strong>+<strong>PDU</strong>。</p><p><img src="C:\Users\ASUS\blog\source_posts\img\1789291-20200530161850302-400055988.jpg" alt="img"></p><h3 id="MBAP报文头"><a href="#MBAP报文头" class="headerlink" title="MBAP报文头"></a>MBAP报文头</h3><p>　　MBAP的长度为7个字节，组成如下：</p><table><thead><tr><th align="center">事务处理标识</th><th>协议标识</th><th>长度</th><th>单元标识符</th></tr></thead><tbody><tr><td align="center">2字节</td><td>2字节</td><td>2字节</td><td>1字节</td></tr></tbody></table><table><thead><tr><th>内容</th><th align="center">解释</th></tr></thead><tbody><tr><td><strong>事务处理标识</strong></td><td align="center">可以理解为报文的序列号，一般每次通信之后就要加1以区别不同的通信数据报文。</td></tr><tr><td><strong>协议标识符</strong></td><td align="center">00 00表示ModbusTCP协议。</td></tr><tr><td><strong>长度</strong></td><td align="center">表示接下来的数据长度，单位为字节。</td></tr><tr><td><strong>单元标识符</strong></td><td align="center">可以理解为设备地址。</td></tr></tbody></table><h3 id="帧结构PDU"><a href="#帧结构PDU" class="headerlink" title="帧结构PDU"></a>帧结构PDU</h3><p>　　PDU由功能码+数据组成。功能码为1字节，数据长度不定，由具体功能决定。</p><p>　　<strong>功能码</strong></p><p>根据对象的不同，常用的Modbus的功能码有：</p><table><thead><tr><th>功能码</th><th align="center">含义</th></tr></thead><tbody><tr><td>0x01</td><td align="center">读coil</td></tr><tr><td>0x05</td><td align="center">写单个coil</td></tr><tr><td>0x0F</td><td align="center">写多个coil</td></tr><tr><td>0x02</td><td align="center">读离散量输入</td></tr><tr><td>0x04</td><td align="center">读输入寄存器</td></tr><tr><td>0x03</td><td align="center">读保持寄存器</td></tr><tr><td>0x06</td><td align="center">写单个保持寄存器</td></tr><tr><td>0x10</td><td align="center">写多个保持寄存器</td></tr></tbody></table><h3 id="Modbus-TCP示例报文"><a href="#Modbus-TCP示例报文" class="headerlink" title="Modbus TCP示例报文"></a>Modbus TCP示例报文</h3><p>　　1、数据请求</p><table><thead><tr><th>97 76 00 00 00 06 04 04 00 7D 00 7D</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td>示例</td><td>长度</td><td>说明</td><td>备注</td></tr><tr><td>Map报文头</td><td>0x97</td><td>1</td><td>事务处理标识符Hi</td><td>客户机发起，服务器复制，用于事务处理配对</td></tr><tr><td></td><td>0x96</td><td>1</td><td>事务处理标识符Lo</td><td></td></tr><tr><td></td><td>0x0000</td><td>2</td><td>协议标识符号</td><td>客户机发起，服务器复制Modbus协议 &#x3D; 0.</td></tr><tr><td></td><td>0x0006</td><td>2</td><td>长度</td><td>从本字节下一个到最后</td></tr><tr><td></td><td>0x04</td><td>1</td><td>单元标识符</td><td>客户机发起，服务器复制串口链路或其他总线上远程终端标识</td></tr><tr><td>功能码</td><td>0x04</td><td>1</td><td>功能码，读寄存器</td><td>参考标准modbus协议</td></tr><tr><td>数据</td><td>0x007D</td><td>2</td><td>起始地址</td><td></td></tr><tr><td></td><td>0x 007D</td><td>2</td><td>寄存器数量</td><td></td></tr><tr><td>校验</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>　　2、数据请求回复</p><table><thead><tr><th>97 76 00 00 00 FD 04 04 FA ………………</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td>示例</td><td>长度</td><td>说明</td><td>备注</td></tr><tr><td>Map报文头</td><td>0x97</td><td>1</td><td>事务处理标识符Hi</td><td>客户机发起，服务器复制，用于事务处理配对</td></tr><tr><td></td><td>0x96</td><td>1</td><td>事务处理标识符Lo</td><td></td></tr><tr><td></td><td>0x0000</td><td>2</td><td>协议标识符号</td><td>客户机发起，服务器复制Modbus协议 &#x3D; 0.</td></tr><tr><td></td><td>0x00FD</td><td>2</td><td>长度</td><td>长度从本字节下一个到最后</td></tr><tr><td></td><td>0x04</td><td>1</td><td>单元标识符</td><td>客户机发起，服务器复制串口链路或其他总线上远程终端标识</td></tr><tr><td>功能码</td><td>0x04</td><td>1</td><td>功能码，读寄存器</td><td>参考标准modbus协议</td></tr><tr><td>数据</td><td>0x FA</td><td>1</td><td>字节个数</td><td></td></tr><tr><td></td><td>0x—-</td><td></td><td>数据</td><td></td></tr><tr><td>校验</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>　　3、写多个寄存器</p><p>　　</p><table><thead><tr><th>97 79 00 00 00 09 04 10 00 00 00 01 02 00 01</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td>示例</td><td>长度</td><td>说明</td><td>备注</td></tr><tr><td>Map报文头</td><td>0x97</td><td>1</td><td>事务处理标识符Hi</td><td>客户机发起，服务器复制，用于事务处理配对</td></tr><tr><td></td><td>0x79</td><td>1</td><td>事务处理标识符Lo</td><td></td></tr><tr><td></td><td>0x0000</td><td>2</td><td>协议标识符号</td><td>客户机发起，服务器复制Modbus协议 &#x3D; 0.</td></tr><tr><td></td><td>0x0009</td><td>2</td><td>长度</td><td>从本字节下一个到最后</td></tr><tr><td></td><td>0x04</td><td>1</td><td>单元标识符</td><td>客户机发起，服务器复制串口链路或其他总线上远程终端标识</td></tr><tr><td>功能码</td><td>0x10</td><td>1</td><td>功能码，读寄存器</td><td>参考标准modbus协议</td></tr><tr><td>数据</td><td>0x0000</td><td>2</td><td>起始地址</td><td></td></tr><tr><td></td><td>0x 0001</td><td>2</td><td>写寄存器数量</td><td></td></tr><tr><td></td><td>0x 02</td><td>1</td><td>写字节的个数</td><td></td></tr><tr><td></td><td>00 01</td><td>2</td><td>目标值</td><td></td></tr><tr><td>校验</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>　　</p><p>　　4、写多个寄存器响应</p><p>　　</p><table><thead><tr><th>97 79 00 00 00 06 04 10 00 00 00 01</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td>示例</td><td>长度</td><td>说明</td><td>备注</td></tr><tr><td>Map报文头</td><td>0x97</td><td>1</td><td>事务处理标识符Hi</td><td>客户机发起，服务器复制，用于事务处理配对</td></tr><tr><td></td><td>0x79</td><td>1</td><td>事务处理标识符Lo</td><td></td></tr><tr><td></td><td>0x0000</td><td>2</td><td>协议标识符号</td><td>客户机发起，服务器复制Modbus协议 &#x3D; 0.</td></tr><tr><td></td><td>0x0006</td><td>2</td><td>长度</td><td>从本字节下一个到最后</td></tr><tr><td></td><td>0x04</td><td>1</td><td>单元标识符</td><td>客户机发起，服务器复制串口链路或其他总线上远程终端标识</td></tr><tr><td>功能码</td><td>0x10</td><td>1</td><td>功能码，读寄存器</td><td>参考标准modbus协议</td></tr><tr><td>数据</td><td>0x0000</td><td>2</td><td>起始地址</td><td></td></tr><tr><td></td><td>0x 0001</td><td>2</td><td>寄存器个数</td><td></td></tr><tr><td>校验</td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Modbus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Modbus TCP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Modbus RTU通讯协议</title>
    <link href="/2022/08/08/MODBUS%20RTU/"/>
    <url>/2022/08/08/MODBUS%20RTU/</url>
    
    <content type="html"><![CDATA[<h2 id="MODBUS-RTU协议"><a href="#MODBUS-RTU协议" class="headerlink" title="MODBUS RTU协议"></a>MODBUS RTU协议</h2><p>MODBUS  RTU通信规约</p><p><img src="C:\Users\ASUS\blog\source_posts\img\1789291-20200531131537098-1326034318.jpg" alt="img"></p><p>信息传输为异步方式，并以字节为单位，每个字节由8 位二进制数组成：</p><p>异步：异步双方不需要共同的时钟，也就是接收方不知道发送方什么时候发送，所以在发送的信息中就要有提示接收方开始接收的信息，如开始位，同时在结束时有停止位。</p><p>异步的另外一种含义是计算机多线程的异步处理。与同步处理相对，异步处理不用阻塞当前<a href="https://baike.baidu.com/item/%E7%BA%BF%E7%A8%8B/103101">线程</a>来等待处理完成，而是允许后续操作，直至其它线程将处理完成，并回调通知此线程。</p><p>但此处需要明确的是:异步与<a href="https://baike.baidu.com/item/%E5%A4%9A%E7%BA%BF%E7%A8%8B/1190404">多线程</a>与并行不是同一个概念.</p><table><thead><tr><th>起始位</th><th>1位</th></tr></thead><tbody><tr><td>数据位</td><td>8位</td></tr><tr><td>奇偶校验位</td><td>无校验</td></tr><tr><td>停止位</td><td>1位</td></tr><tr><td>流控</td><td>无流控</td></tr><tr><td>通讯速率</td><td>9600bps</td></tr></tbody></table><img src="C:\Users\ASUS\blog\source\_posts\img\image-20220711095955587.png" alt="image-20220711095955587" style="zoom:67%;" /><p>每个数据帧组成如下：（RTU模式）</p><table><thead><tr><th>地址码</th><th>功能码</th><th>数据信息</th><th>CRC 校验</th></tr></thead><tbody><tr><td>8 位</td><td>8 位</td><td>N*8 位</td><td>16 位</td></tr></tbody></table><p>地址码：信息发送过来必然有个地址</p><p>功能码：就来告诉从机执行什么动作</p><p>通常用两个16位的数来表示，所以总共是8位</p><table><thead><tr><th><strong>功能码</strong></th><th><strong>定 义</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>01H</td><td>Read Coil Status</td><td>读写一个Coil</td></tr><tr><td>02H</td><td>Read Input Status</td><td>只读一个Coil</td></tr><tr><td>03H</td><td>Read Holding Registers</td><td>读写寄存器数值</td></tr><tr><td>04H</td><td>Read Input Registers</td><td>只读寄存器数值</td></tr><tr><td>05H</td><td>Force Single Coil</td><td>修改一个Coil值</td></tr><tr><td>06H</td><td>Preset Single Register</td><td>修改一个寄存器值</td></tr><tr><td>0FH</td><td>Force Multiple Coils</td><td>修改多个Coil值</td></tr><tr><td>10H</td><td>Load Multiple Register</td><td>修改多个寄存器值</td></tr></tbody></table><p>数据区</p><p>数据区包括需要由从机返送何种信息或执行什么动作。这些信息可以是数据、参考地址等。</p><p>错误校验码（16 位CRC 校验）</p><p>主机或从机可用校验码进行判别接收信息是否正确。由于电子噪声或一些其它干扰， 信息在传输过程中有时会发生错误，错误校验码（CRC）可以检验主机或从机在通讯数据传送过程中的信息是否有误，错误的数据可以放弃（无论是发送还是接收），这样增加了系统的安全和效率。</p><p>MODBUS 通讯规约的CRC（冗余循环码）包含2个字节，即16位二进制数。CRC码由发送设备（主机）计算，放置于发送信息帧的尾部（CRC 高字节在前）。接收信息的设备（从机）再重新计算接收到信息的CRC，比较计算得到的CRC 是否与接收到的相符，如果两者不相符，则表明出错。</p><p>16位CRC校验。 CRC-16 &#x3D; <em>x</em>^16 + <em>x</em>^12 + <em>x</em>^5 + <em>x</em>^0</p><p>计算步骤为：</p><p>(1).预置16 位寄存器为十六进制FFFF（即全为1），称此寄存器为CRC 寄存器； </p><p>(2).把第一个8 位数据与16 位CRC 寄存器的&#x3D;&#x3D;低位相异或&#x3D;&#x3D;，把结果放于CRC 寄存器； </p><p>(3).把寄存器的内容右移一位(朝低位)，用0 填补最高位，检查最低位</p><p>（注意：这时的最低位指移位前的最低位，不是移位后的最低位）；</p><p>(4). 如果最低位为0：重复第3 步(再次移位)，如果最低位为1：CRC 寄存器与多项式</p><p>A001H（1010000000000001B）进行异或；</p><p>(5). 重复步骤3 和4，直到右移8 次，这样整个8 位数据全部进行了处理；</p><p>(6). 重复步骤2 到步骤5，进行下一个8 位数据的处理；</p><p>(7). 最后得到的CRC 寄存器即为CRC 码。</p><p>(8).CRC计算参考代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title">calculate_CRC</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *ptr, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> crc=<span class="hljs-number">0xffff</span>; <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i; <span class="hljs-keyword">while</span>(len!=<span class="hljs-number">0</span>)<br>&#123;<br>crc^=*ptr;<span class="hljs-comment">// crc寄存器与数据的8位进行异或</span><br> <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>((crc&amp;<span class="hljs-number">0x0001</span>)==<span class="hljs-number">0</span><span class="hljs-comment">/*与   如果是0就进行移位*/</span>) crc=crc&gt;&gt;<span class="hljs-number">1</span>; <span class="hljs-keyword">else</span><br>&#123;<br>crc=crc&gt;&gt;<span class="hljs-number">1</span>; crc^=<span class="hljs-number">0xa001</span>;<br>&#125;<br>&#125;<br>len-=<span class="hljs-number">1</span>; ptr++;<br>&#125;<br>crc=(crc&lt;&lt;<span class="hljs-number">8</span>) | (crc&gt;&gt;<span class="hljs-number">8</span>);<span class="hljs-comment">//高低字节取反</span><br>    <span class="hljs-keyword">return</span> crc;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="传输格式"><a href="#传输格式" class="headerlink" title="传输格式"></a>传输格式</h4><h5 id="命令报文格式"><a href="#命令报文格式" class="headerlink" title="命令报文格式"></a>命令报文格式</h5><p>数据传输分为被动和主动以及自己传输和接受</p><p>被动比如是打开某个东西然后自动发送某东西</p><p>主动就是主动发信息</p><p>在传输过程中，数据遵循的一些规则统称为协议</p><p>不同设备之间，协议是不同的</p><p>协议有底层协议和高层协议</p><p>这是一个底层协议</p><p>校验码的那些一般都是规定好的，是大家通用的，不需要去学的特别清楚，了解就行。</p><p>&#x3D;&#x3D;地址是设备地址与起始地址是不同的&#x3D;&#x3D;</p><p>起始地址是你需要的东西储存的地址</p><p>1） Read Coil Status</p><p>&#x3D;&#x3D;数据个数要看你需要的东西占多少字节&#x3D;&#x3D;</p><p>&#x3D;&#x3D;功能码“01H”能读取位元，&#x3D;&#x3D;      读写</p><table><thead><tr><th align="center">地址</th><th>功能码</th><th>起始地址</th><th></th><th>数据个数</th><th></th><th>CRC</th><th></th></tr></thead><tbody><tr><td align="center">01</td><td>01</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td></tr></tbody></table><p>返回</p><table><thead><tr><th>地址</th><th>功能码</th><th>字节个数</th><th>数据</th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>01</td><td>N（8位）</td><td>数据N..  1</td><td>高位</td><td>低位</td></tr></tbody></table><p>2） Read Input Status： 功能码“02H”能读取位元，</p><table><thead><tr><th>地址</th><th>功能码</th><th>起始地址</th><th></th><th>数据个数</th><th></th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>02</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td></tr></tbody></table><p>返回</p><table><thead><tr><th>地址</th><th>功能码</th><th>字节个数</th><th>数据</th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>02</td><td>N（8位）</td><td>数据N..  1</td><td>高位</td><td>低位</td></tr></tbody></table><p>3） Read Holding Registers</p><p>功能码“03H”能够访问所有内部保持寄存器。</p><table><thead><tr><th>地址</th><th>功能码</th><th>起始地址</th><th></th><th>数据个数</th><th></th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>03</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td></tr></tbody></table><p>返回</p><table><thead><tr><th>地址</th><th>功能码</th><th>字节个数</th><th>数据</th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>03</td><td>2N</td><td>数据1（16位）……数据N（16位）</td><td>高位</td><td>低位</td></tr></tbody></table><p>4） Read Input Registers：</p><p>功能码“04H”能够访问所有外部输入寄存器。</p><table><thead><tr><th>地址</th><th>功能码</th><th>起始地址</th><th></th><th>数据个数</th><th></th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>04</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td></tr></tbody></table><p>返回：</p><table><thead><tr><th>地址</th><th>功能码</th><th>字节个数</th><th>数据</th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>04</td><td>2N</td><td>数据1（16位）……数据N（16位）</td><td>高位</td><td>低位</td></tr></tbody></table><p>5） Force Single Coil：</p><p>功能码“05H”能够设置一个位元，这里的数据就是一个字节，只可能是0xFF 00 或者0x00 00。0xFF 00代表开机 0x00 00代表关机。</p><table><thead><tr><th>地址</th><th>功能码</th><th>地址</th><th></th><th>数据</th><th></th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>05</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td></tr></tbody></table><p>返回：</p><table><thead><tr><th>地址</th><th>功能码</th><th>地址</th><th></th><th>数据</th><th></th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>05</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td></tr></tbody></table><p>6） Preset Single Register</p><p>功能码“06H”能修改一个内部保持寄存器。</p><table><thead><tr><th>地址</th><th>功能码</th><th>地址</th><th></th><th>数据</th><th></th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>06</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td></tr></tbody></table><p>返回：</p><table><thead><tr><th>地址</th><th>功能码</th><th>地址</th><th></th><th>数据</th><th></th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>06</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td></tr></tbody></table><p>7） Force Multiple Coils：</p><p>功能码“0FH”，能根据位元的位设置多个量。</p><table><thead><tr><th>地址</th><th>功能码</th><th>起始地址</th><th>数据个数</th><th>数据个数</th><th></th><th>字节个数</th><th>数据</th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>15</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>N</td><td>字节（8位）1……N</td><td>高位</td><td>低位</td></tr></tbody></table><p>返回：</p><table><thead><tr><th>地址</th><th>功能码</th><th>起始地址</th><th></th><th>数据个数</th><th></th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>15</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td></tr></tbody></table><p>8） Load Multiple Register</p><p>功能码“10H”，能根据连续地址修改内部多个保持寄存器。</p><table><thead><tr><th>地址</th><th>功能码</th><th>起始地址</th><th></th><th>数据个数</th><th></th><th>字节个数</th><th>数据</th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>16</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>2N</td><td>数据（16位）1……N</td><td>高位</td><td>低位</td></tr></tbody></table><p>返回：</p><table><thead><tr><th>地址</th><th>功能码</th><th>起始地址</th><th></th><th>数据个数</th><th></th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>16</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td><td>高位</td><td>低位</td></tr></tbody></table><h5 id="异常应答返回（测试时开放，实际使用时屏蔽）-非法功能："><a href="#异常应答返回（测试时开放，实际使用时屏蔽）-非法功能：" class="headerlink" title="异常应答返回（测试时开放，实际使用时屏蔽） 非法功能："></a>异常应答返回（测试时开放，实际使用时屏蔽） 非法功能：</h5><table><thead><tr><th>从站地址</th><th>功能码</th><th>异常码</th><th>CRC</th><th></th></tr></thead><tbody><tr><td>01</td><td>80H+原功能码</td><td>ERR</td><td>高位</td><td>低位</td></tr></tbody></table><p>ERR ：01 非法功能</p><p>02 非法数据地址</p><p>03 非法数据值</p><p>04 非法个数</p><p>05 CRC错误</p><p>06 从机忙状态</p><p>[2022-05-31 17:34:39:731]: Send:8 char    8字节  </p><p>01 02 00 00 00 0F 38 0E               数据个数15个 ？   </p><p>[2022-05-31 17:34:39:840]: Recv:7 char</p><p>01 02 02 00 00 B9 B8          数据位00 00？<br>[2022-05-31 17:34:39:951]: Send:8 char    8字节</p><p>01 03 00 00 00 04 44 09       4个数据<br>[2022-05-31 17:34:40:060]: Recv:13 char</p><p>01 03 &#x3D;&#x3D;08&#x3D;&#x3D; 00 00 60 18 00 00 15 4A 33 12    08表示2N   4个数据<br>[2022-05-31 17:34:40:172]: Send:8 char   8字节</p><p>01 04 00 00 00 0A 70 0D    数据个数10<br>[2022-05-31 17:34:40:282]: Recv:25 char</p><p>01 04 &#x3D;&#x3D;14&#x3D;&#x3D; 08 E1 08 E7 08 E8 0F 66 0F 6C 0F 69 00 FC 00 00 00 E9 00 00 25 7A  </p><p> 20个数据<br>[2022-05-31 17:34:40:391]: Send:8 char</p><p>01 04 00 0A 00 18 D0 02     数据24个<br>[2022-05-31 17:34:40:500]: Recv:2 char</p><p>01 84      </p><p>[2022-05-31 17:34:40:514]: Send:8 char</p><p>01 04 00 0A 00 18 D0 02<br>[2022-05-31 17:34:40:848]: Recv:2 char</p><p>01 84 </p><p>[2022-05-31 17:34:40:856]: Send:8 char</p><p>01 04 00 0A 00 18 D0 02<br>[2022-05-31 17:34:41:382]: Recv:2 char</p><p>01 84 </p><p>[2022-05-31 17:34:44:740]: Send:8 char</p><p>01 02 00 00 00 0F 38 0E<br>[2022-05-31 17:34:44:847]: Recv:7 char</p><p>01 02 02 00 00 B9 B8<br>[2022-05-31 17:34:44:956]: Send:8 char</p><p>01 03 00 00 00 04 44 09<br>[2022-05-31 17:34:45:066]: Recv:13 char</p><p>01 03 08 00 00 60 18 00 00 15 4A 33 12<br>[2022-05-31 17:34:45:176]: Send:8 char</p><p>01 04 00 00 00 0A 70 0D<br>[2022-05-31 17:34:45:285]: Recv:25 char</p><p>01 04 14 08 E1 08 E7 08 E7 0F 66 0F 6B 0F 67 00 FF 00 00 00 EA 00 00 FF 6A<br>[2022-05-31 17:34:45:396]: Send:8 char</p><p>01 04 00 0A 00 18 D0 02<br>[2022-05-31 17:34:45:504]: Recv:2 char</p><p>01 84 </p><p>[2022-05-31 17:34:45:510]: Send:8 char</p><p>01 04 00 0A 00 18 D0 02<br>[2022-05-31 17:34:45:819]: Recv:2 char</p><p>01 84 </p><p>[2022-05-31 17:34:45:824]: Send:8 char</p><p>01 04 00 0A 00 18 D0 02<br>[2022-05-31 17:34:46:353]: Recv:2 char</p><p>01 84 </p><p>[2022-05-31 17:34:49:735]: Send:8 char</p><p>01 02 00 00 00 0F 38 0E<br>[2022-05-31 17:34:49:842]: Recv:7 char</p><p>01 02 02 00 00 B9 B8<br>[2022-05-31 17:34:49:952]: Send:8 char</p><p>01 03 00 00 00 04 44 09<br>[2022-05-31 17:34:50:063]: Recv:13 char</p><p>01 03 08 00 00 60 18 00 00 15 4A 33 12<br>[2022-05-31 17:34:50:174]: Send:8 char</p><p>01 04 00 00 00 0A 70 0D<br>[2022-05-31 17:34:50:284]: Recv:25 char</p><p>01 04 14 08 DF 08 E6 08 E6 0F 63 0F 69 0F 65 00 FF 00 00 00 ED 00 00 E5 0B<br>[2022-05-31 17:34:50:395]: Send:8 char</p><p>01 04 00 0A 00 18 D0 02<br>[2022-05-31 17:34:50:507]: Recv:2 char</p><p>01 84 </p><p>[2022-05-31 17:34:50:513]: Send:8 char</p><p>01 04 00 0A 00 18 D0 02<br>[2022-05-31 17:34:50:824]: Recv:2 char</p><p>01 84 </p><p>[2022-05-31 17:34:50:829]: Send:8 char</p><p>01 04 00 0A 00 18 D0 02<br>[2022-05-31 17:34:51:346]: Recv:2 char</p><p>01 84 </p>]]></content>
    
    
    <categories>
      
      <category>Modbus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Modbus RTU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Modbus通讯协议</title>
    <link href="/2022/08/08/MODBUS%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/"/>
    <url>/2022/08/08/MODBUS%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="Modbus通讯协议简介"><a href="#Modbus通讯协议简介" class="headerlink" title="Modbus通讯协议简介"></a>Modbus通讯协议简介</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Modbus是工业领域通信协议的业界标准，是工业电子设备之间常用的连接方式。</p><p>特点：</p><ul><li>公开发表并且无版权要求；</li><li>易于部署和维护；</li><li>对供应商来说，修改移动本地的比特或字节没有很多限制。</li></ul><h3 id="Modbus-通讯方式"><a href="#Modbus-通讯方式" class="headerlink" title="Modbus 通讯方式"></a>Modbus 通讯方式</h3><p>1、TCP&#x2F;IP</p><p>2、各种媒体（有线：EIA&#x2F;TIA-232-E、EIA-422、EIA&#x2F;TIA-485-A ；光纤、无线等）上的异步串行传输；&#x3D;&#x3D;Modbus RTU和Modbus ASCII通讯既是采用该方式；&#x3D;&#x3D;</p><p>3、Modbus Plus，一种高速令牌传递网络。</p><p><img src="C:\Users\ASUS\blog\source_posts\img\1789291-20200530140559414-931108713.jpg" alt="img"></p><h3 id="协议描述"><a href="#协议描述" class="headerlink" title="协议描述"></a>协议描述</h3><p>Modbus协议定义了一个控制器能认识使用的消息结构,而不管它们是经过何种网络进行通信的。它描述了一控制器请求访问其它设备的过程，如果回应来自其它设备的请求，以及怎样侦测错误并记录。</p><p>通过此协议，控制器相互之间、或控制器经由网络（如以太网）可以和其它设备之间进行通信。Modbus通讯物理接口可以选用串口（包括RS232、RS485和RS422），也可以选择以太网口。</p><p>通信过程：</p><p><img src="C:\Users\ASUS\blog\source_posts\img\1789291-20200530144651500-608118892.jpg" alt="img"></p><p><img src="C:\Users\ASUS\blog\source_posts\img\1789291-20200530144719721-773949887.jpg" alt="img"></p><p><strong>当主站不发送请求时，从站不会自己发出数据，从站和从站之间不能直接通讯。</strong></p><p>Modbus协议能够应用在不同类型的总线或者网络。对应不同的总线或网络，Modbus协议引入一些附加域映射成应用数据单元（ADU），即ADU &#x3D; 附加域 + PDU。例如：</p><ul><li>RS232 &#x2F; RS485 ADU &#x3D; 253 字节+服务器地址(1 byte) + CRC (2 字节) &#x3D; 256 字节 ；</li><li>TCP MODBUS ADU &#x3D; 249 字节+ MBAP (7 字节) &#x3D; 256 字节 。</li></ul><p><img src="C:\Users\ASUS\blog\source_posts\img\1789291-20200530143538234-1678145168.jpg" alt="img"></p><h3 id="功能码"><a href="#功能码" class="headerlink" title="功能码"></a>功能码</h3><p>1.公共功能码</p><p>2.用户定义功能码</p><p>3.保留功能码</p><p><img src="C:\Users\ASUS\blog\source_posts\img\1789291-20200530155234175-1895322693.jpg" alt="img"></p><p>公共功能码：</p><p><img src="C:\Users\ASUS\blog\source_posts\img\1789291-20200530155637575-1588436382.jpg" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Modbus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Modbus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AES算法C语言实现</title>
    <link href="/2022/07/04/AES%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/07/04/AES%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="密码学基础-AES算法C语言实现"><a href="#密码学基础-AES算法C语言实现" class="headerlink" title="密码学基础  AES算法C语言实现"></a>密码学基础  AES算法C语言实现</h1><p><em>作为密码学的第一篇blog，首先将字符和位的关系说明清楚：</em></p><p>通常情况下一字节等于八位，通常在读取图片、声音、可执行文件需要用字节数组来保存文件，在下载文件也是用byte数组来做临时的缓冲器接收文件内容。</p><p>字符(Character)计算机中使用的字母、数字、字和符号，比如’P’、’K’、’%’、’#’等。</p><p>&#x3D;&#x3D;一般在英文状态下一个字母或字符占用一个字节，一个汉字用两个字节表示。&#x3D;&#x3D;</p><ul><li>ASCII 码中，一个英文字母(不分大小写)为一个字节，一个中文汉字为两个字节。</li><li>UTF-8 编码中，一个英文字为一个字节，一个中文为三个字节。</li><li>Unicode 编码中，一个英文为一个字节，一个中文为两个字节。</li><li>符号：英文标点为一个字节，中文标点为两个字节。例如：英文句号 <strong>.</strong> 占1个字节的大小，中文句号 <strong>。</strong>占2个字节的大小。</li><li>UTF-16 编码中，一个英文字母字符或一个汉字字符存储都需要 2 个字节(Unicode 扩展区的一些汉字存储需要 4 个字节)。</li><li>UTF-32 编码中，世界上任何字符的存储都需要 4 个字节。</li></ul><h2 id="AES简介"><a href="#AES简介" class="headerlink" title="AES简介"></a>AES简介</h2><p>是DES的替代算法，同样也是对称加密算法</p><ul><li>和DES一样，能有效抵御所有已知攻击；</li><li>加密算法易于现有软硬件平台的实现，且加解密过程效率优于DES；</li><li>具有典型的对称分组加密算法特性，以快速混淆和扩散为设计原则，本质是轮函数过程的循环。</li></ul><p><em><strong>AES的数据分组长度统一为128位，而密钥空间可根据需要采用128位、192位和256位三种不同长度。和大多数分组加密算法不一样AES的轮函数并没有采用Feistel结构设计，而是使用了3个不同的可逆均匀变换。</strong></em></p><h3 id="AES算法主要步骤"><a href="#AES算法主要步骤" class="headerlink" title="AES算法主要步骤"></a>AES算法主要步骤</h3><ol><li>密钥扩展（Key Expansion），使用密钥扩展算法将128位用户主密钥扩展成R个轮密钥；</li><li>初始轮（Init Round），即为轮密钥加；</li><li>重复轮（Rounds），每一轮包括：字节替换（SubBytes），行移位（Shift Rows），列混合（Mix Columns），轮密钥加（Add Round Key）四个步骤；</li><li>最终轮（Final Round），最终轮比重复轮少了列混合的步骤。</li></ol><p>&#x3D;&#x3D;最后一轮是不用列混合操作的&#x3D;&#x3D;</p><h3 id="AES算法具体内容"><a href="#AES算法具体内容" class="headerlink" title="AES算法具体内容"></a>AES算法具体内容</h3><p><a href="https://pic4.zhimg.com/80/v2-b22e3bdd7da5ddf5ea6ff71909dac4b7_720w.jpg"><img src="https://pic4.zhimg.com/80/v2-b22e3bdd7da5ddf5ea6ff71909dac4b7_720w.jpg" alt="img"></a></p><p><a href="https://pic4.zhimg.com/80/v2-b22e3bdd7da5ddf5ea6ff71909dac4b7_720w.jpg">img</a></p><p>在讲述密钥加法层之前，我们来看看密钥的扩展</p><h4 id="密钥扩展"><a href="#密钥扩展" class="headerlink" title="密钥扩展"></a>密钥扩展</h4><p><a href="https://pic4.zhimg.com/80/v2-3027156eb00bcddcdac69657c8aad1e7_720w.jpg"><img src="https://pic4.zhimg.com/80/v2-3027156eb00bcddcdac69657c8aad1e7_720w.jpg" alt="img"></a></p><p><a href="https://pic4.zhimg.com/80/v2-3027156eb00bcddcdac69657c8aad1e7_720w.jpg">img</a></p><p><strong>子密钥的生成是以列为单位进行的，一列是32Bit，四列组成子密钥共128Bit。生成子密钥的数量比AES算法的轮数多一个，因为第一个密钥加法层进行密钥漂白时也需要子密钥。</strong></p><p>&#x3D;&#x3D;也就是密钥的扩展比算法的轮数多一个&#x3D;&#x3D;</p><p>如果i不是4的倍数，那么第i列如下：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">w<span class="hljs-comment">[i]</span>=w<span class="hljs-comment">[i-4]</span>⊕w<span class="hljs-comment">[i-1]</span><br></code></pre></td></tr></table></figure><p>如果i是4的倍数，那么第i列如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">w<span class="hljs-selector-attr">[i]</span>=w<span class="hljs-selector-attr">[i-4]</span>⊕<span class="hljs-built_in">T</span>(w<span class="hljs-selector-attr">[i-1]</span>)<br></code></pre></td></tr></table></figure><p>其中T是一个复杂的函数</p><p><strong>函数T()首先将4个输入字节进行翻转，并执行一个按字节的S盒代换，最后用第一个字节与轮系数Rcon进行异或运算。轮系数是一个有10个元素的一维数组，一个元素1个字节。T()函数存在的目的有两个，一是增加密钥编排中的非线性；二是消除AES中的对称性（防止不同轮的产生的轮密钥的对称性或者相似性）。这两种属性都是抵抗某些分组密码攻击必要的。</strong></p><p><a href="https://pic3.zhimg.com/80/v2-718685429c353bdf13b0d1fa5646ca1a_720w.png"><img src="https://pic3.zhimg.com/80/v2-718685429c353bdf13b0d1fa5646ca1a_720w.png" alt="img"></a></p><p><a href="https://pic3.zhimg.com/80/v2-718685429c353bdf13b0d1fa5646ca1a_720w.png">img</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> Rcon[<span class="hljs-number">11</span>] = &#123;<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x1B</span>,<span class="hljs-number">0x36</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Key_S_Substitution</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>(*ExtendKeyArray)[<span class="hljs-number">44</span>], <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> nCol)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>&#123;<br>ExtendKeyArray[i][nCol] = S_Table[(ExtendKeyArray[i][nCol]) &gt;&gt; <span class="hljs-number">4</span>][(ExtendKeyArray[i][nCol]) &amp; <span class="hljs-number">0x0F</span>];<br>&#125;<br><br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">T_Function</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>(*ExtendKeyArray)[<span class="hljs-number">44</span>], <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> nCol)</span>   </span><br><span class="hljs-function">    <span class="hljs-comment">//T函数</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//1、将扩展密钥矩阵的nCol-1列复制到nCol列上，并将nCol列第一行的元素移动到最后一行，其他行数上移一行</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>&#123;<br>ExtendKeyArray[i][nCol] = ExtendKeyArray[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">4</span>][nCol - <span class="hljs-number">1</span>];<br>&#125;<br>    <br><span class="hljs-comment">//2、将nCol列进行S盒替换</span><br><span class="hljs-built_in">Key_S_Substitution</span>(ExtendKeyArray, nCol);<br>    <br><span class="hljs-comment">//3、将该列第一行元素与Rcon进行异或运算</span><br>ExtendKeyArray[<span class="hljs-number">0</span>][nCol] ^= Rcon[nCol / <span class="hljs-number">4</span>];<br><br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">CalculateExtendKeyArray</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>(*PasswordArray)[<span class="hljs-number">4</span>], <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>(*ExtendKeyArray)[<span class="hljs-number">44</span>])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//1、将密钥数组放入前四列扩展密钥组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)<br>&#123;<br>ExtendKeyArray[i &amp; <span class="hljs-number">0x03</span>][i &gt;&gt; <span class="hljs-number">2</span>] = PasswordArray[i &amp; <span class="hljs-number">0x03</span>][i &gt;&gt; <span class="hljs-number">2</span>];<br>&#125;<br><br><span class="hljs-comment">//2、计算扩展矩阵的后四十列</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">11</span>; i++) <span class="hljs-comment">//进行十轮循环</span><br>&#123;<br><span class="hljs-comment">//(1)如果列号是4的倍数，这执行G函数 否则将nCol-1列复制到nCol列上</span><br><span class="hljs-built_in">G_Function</span>(ExtendKeyArray, <span class="hljs-number">4</span>*i);<br><br><span class="hljs-comment">//(2)每一轮中，各列进行异或运算</span><br><span class="hljs-comment">// 列号是4的倍数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++)<span class="hljs-comment">//行号</span><br>&#123;<br>ExtendKeyArray[k][<span class="hljs-number">4</span> * i] = ExtendKeyArray[k][<span class="hljs-number">4</span> * i] ^ ExtendKeyArray[k][<span class="hljs-number">4</span> * (i - <span class="hljs-number">1</span>)];<br>&#125;<br><br><span class="hljs-comment">// 其他三列</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">4</span>; j++)<span class="hljs-comment">//每一轮的列号</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++)<span class="hljs-comment">//行号</span><br>&#123;<br>ExtendKeyArray[k][<span class="hljs-number">4</span> * i + j] = ExtendKeyArray[k][<span class="hljs-number">4</span> * i + j - <span class="hljs-number">1</span>] ^ ExtendKeyArray[k][<span class="hljs-number">4</span> * (i - <span class="hljs-number">1</span>) + j];<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> ret;<br>&#125;<br>Copy<br></code></pre></td></tr></table></figure><h4 id="密钥加法层"><a href="#密钥加法层" class="headerlink" title="密钥加法层"></a>密钥加法层</h4><p><strong>在密钥加法层中有两个输入的参数，分别是明文和子密钥k[0]，而且这两个输入都是128位的。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">AddRoundKey</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>(*PlainArray)[<span class="hljs-number">4</span>], <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>(*ExtendKeyArray)[<span class="hljs-number">44</span>], <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> MinCol)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)<br>&#123;<br>PlainArray[i][j] ^= ExtendKeyArray[i][MinCol + j];<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> ret;<br>&#125;<br>Copy<br></code></pre></td></tr></table></figure><h4 id="字节代换层（S盒）"><a href="#字节代换层（S盒）" class="headerlink" title="字节代换层（S盒）"></a>字节代换层（S盒）</h4><p>就是把字节一个个放入s盒之中</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">const unsigned char S_Table[<span class="hljs-number">16</span>][<span class="hljs-number">16</span>] =<br>&#123;<br><span class="hljs-number">0x63</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x76</span>,<br><span class="hljs-number">0xCA</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xC0</span>,<br><span class="hljs-number">0xB7</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>,<br><span class="hljs-number">0x04</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x75</span>,<br><span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x84</span>,<br><span class="hljs-number">0x53</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xCF</span>,<br><span class="hljs-number">0xD0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xA8</span>,<br><span class="hljs-number">0x51</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD2</span>,<br><span class="hljs-number">0xCD</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>,<br><span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xDB</span>,<br><span class="hljs-number">0xE0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x79</span>,<br><span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x08</span>,<br><span class="hljs-number">0xBA</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x8A</span>,<br><span class="hljs-number">0x70</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x9E</span>,<br><span class="hljs-number">0xE1</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xDF</span>,<br><span class="hljs-number">0x8C</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x16</span><br>&#125;<span class="hljs-comment">;</span><br><br>//字节代换<br><span class="hljs-keyword">int</span> Plain_S_Substitution(unsigned char *PlainArray)<br>&#123;<br><span class="hljs-keyword">int</span> <span class="hljs-keyword">ret</span> = <span class="hljs-number">0</span><span class="hljs-comment">;</span><br><br>for (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; 16; i++)</span><br>&#123;<br>PlainArray[i] = S_Table[PlainArray[i] &gt;&gt; <span class="hljs-number">4</span>][PlainArray[i] &amp; <span class="hljs-number">0x0F</span>]<span class="hljs-comment">;</span><br>&#125;<br><br>return <span class="hljs-keyword">ret</span><span class="hljs-comment">;</span><br>&#125;<br>Copy<br></code></pre></td></tr></table></figure><h4 id="行移位"><a href="#行移位" class="headerlink" title="行移位"></a>行移位</h4><p><a href="https://pic2.zhimg.com/v2-581b444c6583aff31afe66b0391d73c1_r.jpg"><img src="https://pic2.zhimg.com/v2-581b444c6583aff31afe66b0391d73c1_r.jpg" alt="preview"></a></p><p><a href="https://pic2.zhimg.com/v2-581b444c6583aff31afe66b0391d73c1_r.jpg">preview</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ShiftRows</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *PlainArray)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//第一行 不移位</span><br><span class="hljs-comment">//PlainArray[0] = PlainArray[0];</span><br><br><span class="hljs-comment">//第二行 左移8Bit</span><br>PlainArray[<span class="hljs-number">1</span>] = (PlainArray[<span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">8</span>) | (PlainArray[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">24</span>);<br><br><span class="hljs-comment">//第三行 左移16Bit</span><br>PlainArray[<span class="hljs-number">2</span>] = (PlainArray[<span class="hljs-number">2</span>] &gt;&gt; <span class="hljs-number">16</span>) | (PlainArray[<span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">16</span>);<br><br><span class="hljs-comment">//第四行 左移24Bit</span><br>PlainArray[<span class="hljs-number">3</span>] = (PlainArray[<span class="hljs-number">3</span>] &gt;&gt; <span class="hljs-number">24</span>) | (PlainArray[<span class="hljs-number">3</span>] &lt;&lt; <span class="hljs-number">8</span>);<br><br><span class="hljs-keyword">return</span> ret;<br>&#125;<br>Copy<br></code></pre></td></tr></table></figure><h4 id="列混淆"><a href="#列混淆" class="headerlink" title="列混淆"></a>列混淆</h4><p><a href="https://pic2.zhimg.com/80/v2-8d1c58108b9d719a8674d7703ead7991_720w.jpg"><img src="https://pic2.zhimg.com/80/v2-8d1c58108b9d719a8674d7703ead7991_720w.jpg" alt="img"></a></p><p><a href="https://pic2.zhimg.com/80/v2-8d1c58108b9d719a8674d7703ead7991_720w.jpg">img</a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">const unsigned <span class="hljs-built_in">char</span> MixArray<span class="hljs-literal">[<span class="hljs-number">4</span>]</span><span class="hljs-literal">[<span class="hljs-number">4</span>]</span> =<br>&#123;<br><span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>,<br><span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>,<br><span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>,<br><span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span><br>&#125;;<br><br><span class="hljs-built_in">int</span> <span class="hljs-constructor">MixColum(<span class="hljs-params">unsigned</span> <span class="hljs-params">char</span>(<span class="hljs-operator">*</span>PlainArray)</span><span class="hljs-literal">[<span class="hljs-number">4</span>]</span>)<br>&#123;<br><span class="hljs-built_in">int</span> ret = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//定义变量</span><br>unsigned <span class="hljs-built_in">char</span> ArrayTemp<span class="hljs-literal">[<span class="hljs-number">4</span>]</span><span class="hljs-literal">[<span class="hljs-number">4</span>]</span>;<br><br><span class="hljs-comment">//初始化变量</span><br>memcpy(ArrayTemp, PlainArray, <span class="hljs-number">16</span>);<br><br><span class="hljs-comment">//矩阵乘法 4*4</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)<br>&#123;<br>PlainArray<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span> =<br><span class="hljs-constructor">GaloisMultiplication(MixArray[<span class="hljs-params">i</span>][0], ArrayTemp[0][<span class="hljs-params">j</span>])</span> ^<br><span class="hljs-constructor">GaloisMultiplication(MixArray[<span class="hljs-params">i</span>][1], ArrayTemp[1][<span class="hljs-params">j</span>])</span> ^<br><span class="hljs-constructor">GaloisMultiplication(MixArray[<span class="hljs-params">i</span>][2], ArrayTemp[2][<span class="hljs-params">j</span>])</span> ^<br><span class="hljs-constructor">GaloisMultiplication(MixArray[<span class="hljs-params">i</span>][3], ArrayTemp[3][<span class="hljs-params">j</span>])</span>;<br>&#125;<br>&#125;<br>return ret;<br>&#125;<br>Copy<br></code></pre></td></tr></table></figure><p><strong>接下来我们就只用处理伽罗瓦域乘法相关处理了，由于前面介绍过相关概念，所以代码就不在此进行讲解了，大家可以参考下方的代码注释进行理解：</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs perl">//<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">/</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/功能: 伽罗瓦域内的乘法运算 GF(128)</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/参数: Num_L 输入的左参数</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/ Num_R 输入的右参数</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/返回值:计算结果</span><br><span class="hljs-regexp">char GaloisMultiplication(unsigned char Num_L, unsigned char Num_R)</span><br><span class="hljs-regexp">&#123;</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/定义变量</span><br><span class="hljs-regexp">unsigned char Result = 0; /</span><span class="hljs-regexp">/伽罗瓦域内乘法计算的结果</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">while (Num_L)</span><br><span class="hljs-regexp">&#123;</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/如果Num_L最低位是1就异或Num_R，相当于加上Num_R * 1</span><br><span class="hljs-regexp">if (Num_L &amp; 0x01)</span><br><span class="hljs-regexp">&#123;</span><br><span class="hljs-regexp">Result ^= Num_R;</span><br><span class="hljs-regexp">&#125;</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/Num_L右移一位，相当于除以2</span><br><span class="hljs-regexp">Num_L = Num_L &gt;&gt; 1;</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/如果Num_R最高位为1</span><br><span class="hljs-regexp">if (Num_R &amp; 0x80)</span><br><span class="hljs-regexp">&#123;</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/左移一位相当于乘二</span><br><span class="hljs-regexp">Num_R = Num_R &lt;&lt; 1; /</span><span class="hljs-regexp">/注：这里会丢失最高位，但是不用担心</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">Num_R ^= 0x1B; /</span><span class="hljs-regexp">/计算伽罗瓦域内除法Num_R = Num_R /</span> (<span class="hljs-keyword">x</span>^<span class="hljs-number">8</span>(刚好丢失最高位) + <span class="hljs-keyword">x</span>^<span class="hljs-number">4</span> + <span class="hljs-keyword">x</span>^<span class="hljs-number">3</span> + <span class="hljs-keyword">x</span>^<span class="hljs-number">1</span> + <span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-regexp">//</span>左移一位相当于乘二<br>Num_R = Num_R &lt;&lt; <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> Result;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AES</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些基本Markdown语法</title>
    <link href="/2022/07/04/Markdown%20%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/07/04/Markdown%20%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="块级元素："><a href="#块级元素：" class="headerlink" title="块级元素："></a>块级元素：</h2><h3 id="标题："><a href="#标题：" class="headerlink" title="标题："></a>标题：</h3><p>总共有六级标题，通过#的个数来区分，输入#之后一定要按空格键</p><p>比如一个四级标题如下:</p><h4 id="测试（-）"><a href="#测试（-）" class="headerlink" title="测试（####）"></a>测试（####）</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级标题<br><br>## 二级标题<br><br>### 三级标题<br><br>#### 四级标题<br><br>##### 五级标题<br><br>###### 六级标题<br>Copy<br></code></pre></td></tr></table></figure><h3 id="引用："><a href="#引用：" class="headerlink" title="引用："></a>引用：</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">引用是用&gt;表示<br><span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><blockquote><p>这是一段引用</p></blockquote><h3 id="列表："><a href="#列表：" class="headerlink" title="列表："></a>列表：</h3><h4 id="有序列表："><a href="#有序列表：" class="headerlink" title="有序列表："></a>有序列表：</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">篮网总冠军<br><br><span class="hljs-number">1</span>.击败骑士<br><br><span class="hljs-number">2</span>.干掉凯尔特人<br><br><span class="hljs-number">3</span>.跨过雄鹿<br><br><span class="hljs-number">4</span>.射落太阳<br><span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><h4 id="无序列表："><a href="#无序列表：" class="headerlink" title="无序列表："></a>无序列表：</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">用-加空格<br><span class="hljs-bullet">- </span><br><span class="hljs-bullet"></span>Copy<br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><p>用 - 加 [ 加空格加 ]</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">-<span class="hljs-selector-attr">[ ]</span><br>Copy<br></code></pre></td></tr></table></figure><ul><li>hahaha</li></ul><h3 id="代码块："><a href="#代码块：" class="headerlink" title="代码块："></a>代码块：</h3><p>1.自己右键</p><p>2.<code> </code>两个反引号中间算一行</p><p>3.三个反引号代码块</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br><span class="hljs-function">Copy</span><br></code></pre></td></tr></table></figure><h3 id="数学公式："><a href="#数学公式：" class="headerlink" title="数学公式："></a>数学公式：</h3><p>使用LaTeX</p><p>$$ \frac{\partial f}{\partial x}&#x3D;2\sqrt{a}x$$</p><p>就是两个美元符号加上两个美元符号</p><h3 id="表格："><a href="#表格：" class="headerlink" title="表格："></a>表格：</h3><table><thead><tr><th>姓名</th><th align="left">年龄</th><th>成绩</th></tr></thead><tbody><tr><td>是啥</td><td align="left"></td><td></td></tr></tbody></table><p>该表格用三个|分隔就行</p><h3 id="脚注："><a href="#脚注：" class="headerlink" title="脚注："></a>脚注：</h3><p>在MarkDown中支持添加脚注方式来对文本进行补充说明。</p><p>在需要添加注脚的文字后加上脚注名： [^注脚名] 。 然后在文本的任意位置(一般在最后)添加脚注：</p><p><em>脚注自动生成在页面最最后面，在页面末尾可以看到，并且脚注后方的链接可以直接跳转回到加脚注的地方。</em></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">脚注示例，这是第一个脚注[^注脚名1]，这是第二个脚注[^注脚名2]，这是第三个脚注[^注脚名3]<br><br>[<span class="hljs-symbol">^注脚名1</span>]: <span class="hljs-link">我是脚注一.</span><br>[<span class="hljs-symbol">^注脚名2</span>]: <span class="hljs-link">我是脚注二.</span><br>[<span class="hljs-symbol">^注脚名3</span>]: <span class="hljs-link">我是脚注三.</span><br>Copy<br></code></pre></td></tr></table></figure><h3 id="横线"><a href="#横线" class="headerlink" title="横线"></a>横线</h3><p>三个减号-</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-string">Copy</span><br></code></pre></td></tr></table></figure><h2 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://shang-swk.github.io/%22%E6%9C%AC%E4%BA%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%22">swk的博客</a></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[swk的博客]</span>(<span class="hljs-attribute">https</span>:<span class="hljs-comment">//shang-swk.github.io/)</span><br>Copy<br></code></pre></td></tr></table></figure><ul><li><h4 id="简单链接"><a href="#简单链接" class="headerlink" title="简单链接"></a>简单链接</h4><ul><li><code>[链接名称](链接网址)</code></li><li><code>[链接名称](链接网址 &quot;文字说明&quot;)</code></li><li><code>&lt;链接网址&gt;</code></li></ul></li></ul><p><em>文字说明可以通过鼠标悬浮链接上查看</em></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">百度[百度](https:<span class="hljs-regexp">//</span>www.baidu.com/)<br>百度[百度](https:<span class="hljs-regexp">//</span>www.baidu.com/ <span class="hljs-string">&quot;百度搜索&quot;</span>)<br>百度&lt;https:<span class="hljs-regexp">//</span>www.baidu.com/&gt;<br>Copy<br></code></pre></td></tr></table></figure><p><em><strong>示例效果:</strong></em></p><hr><p>百度<a href="https://www.baidu.com/">百度</a><br>百度<a href="https://www.baidu.com/">百度</a><br>百度<a href="https://www.baidu.com/">https://www.baidu.com/</a></p><h4 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h4><p>可以使用变量来调用链接</p><p><em>使用变量要记得在文档的结尾为变量赋值</em></p><p><em><strong>代码示例:</strong></em></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[百度]</span><span class="hljs-selector-attr">[1]</span><br><span class="hljs-selector-attr">[谷歌]</span><span class="hljs-selector-attr">[2]</span><br><br>然后在文档的结尾为变量赋值（网址）<br><br><span class="hljs-selector-attr">[1]</span>: <span class="hljs-selector-tag">https</span>:<span class="hljs-comment">//www.baidu.com/</span><br><span class="hljs-selector-attr">[2]</span>: <span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//www.google.com/</span><br><span class="hljs-selector-tag">Copy</span><br></code></pre></td></tr></table></figure><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>跟链接的方法区别在于前面加了个感叹号 <code>!</code></p><p><em><strong>代码示例:</strong></em></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">![百度logo]](https:<span class="hljs-regexp">//</span>www.baidu.com<span class="hljs-regexp">/img/</span>PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png)<br><br>![百度](https:<span class="hljs-regexp">//</span>www.baidu.com<span class="hljs-regexp">/img/</span>PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png <span class="hljs-string">&quot;百度logo&quot;</span>)<br><br>[百度][<span class="hljs-number">1</span>]<br><br>[<span class="hljs-number">1</span>]: https:<span class="hljs-regexp">//</span>www.baidu.com/<br>Copy<br></code></pre></td></tr></table></figure><h3 id="其他行内格式"><a href="#其他行内格式" class="headerlink" title="其他行内格式"></a>其他行内格式</h3><p>一对<code>*</code>表示斜体：</p><p><em>haha</em></p><hr><p>两对<code>*</code>表示加粗</p><p><strong>hahha</strong></p><hr><p>一对&#96;&#96; &#96;是行内代码</p><hr><p>下划线：</p><p><code>&lt;u&gt;下划线&lt;/u&gt;</code>下划线</p><hr><p>:kiss:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">冒号加表情英文得到表情<br></code></pre></td></tr></table></figure><hr><p>行内公式</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> sssss <span class="hljs-symbol">$</span><br></code></pre></td></tr></table></figure><hr><p>下标：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">用<span class="hljs-operator">~</span>加<span class="hljs-operator">~</span>来表示 <span class="hljs-variable">H</span><span class="hljs-operator">~</span><span class="hljs-number">2</span><span class="hljs-operator">~</span><span class="hljs-built_in">O</span><br></code></pre></td></tr></table></figure><p>H<del>2</del>O</p><hr><p>上标：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">用^加^表示<br></code></pre></td></tr></table></figure><p>X^2^</p><hr><p>高亮：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-operator">=</span><span class="hljs-operator">=</span>语句<span class="hljs-operator">=</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;啊哈哈哈&#x3D;&#x3D;</p><hr><p> <a href="https://shang-swk.github.io/categories/Markdown/">Markdown</a></p><p> <a href="https://shang-swk.github.io/tags/Markdown%E8%AF%AD%E6%B3%95/">Markdown语法</a></p>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
